{"version":3,"sources":["UsePoissonProcess.js","Utils.js","Cultivars.js","UseCraigsOregano.js","Plant.js","App.js","serviceWorker.js","index.js"],"names":["usePoissonProcess","cb","rate","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","sample","randomChoice","arr","Math","floor","random","length","rand","min","max","Cultivars","Vulgare","Glandulosum","Gracile","Hirtum","Virens","Viridulum","WIDTH","window","innerWidth","HEIGHT","innerHeight","useCraigsOregano","useState","oreganos","setOreganos","clusteringFactor","setClusteringFactor","PoissonSampling","poissonSampler","setPoissonSampler","os","sampler","properties","getAllPoints","addPoint","next","heirloom","size","cultivar","Object","values","color","Color","lighten","saturate","x","round","y","jitterX","jitterY","baseGrowthRate","harvestedLeaves","leafClusterFactor","harvested","updateOreganos","refreshSampler","newSampler","filter","o","forEach","heirlooms","totalHarvested","reduce","acc","plant","heirloomHarvested","Set","map","h","totalPlants","buyFerts","f","bumpHarvestedCount","clickOregano","OreganoPlant","props","maxLeaves","oreganoLeaves","updateOreganoLeaves","setSampler","growthRate","updateGrowthRate","noLeaves","growthLimitReached","pow","abs","leaf","className","style","left","top","aria-label","backgroundColor","title","onClick","e","leafId","preventDefault","key","CraigsOregano","href","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e58e385.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { sample } from 'poisson-process'\n\n/* https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nfunction useInterval (callback, delay) {\n  const savedCallback = useRef()\n  useEffect(\n    () => {\n      savedCallback.current = callback\n    },\n    [callback]\n  )\n  useEffect(\n    () => {\n      function tick () {\n        savedCallback.current()\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay)\n        return () => clearInterval(id)\n      }\n    },\n    [delay]\n  )\n}\n\nfunction usePoissonProcess (cb, rate) {\n  useInterval(cb, sample(rate))\n}\n\nexport { usePoissonProcess }\n","const randomChoice = arr => {\n  let index = Math.floor(Math.random() * arr.length)\n  return arr[index]\n}\n\nconst rand = (min, max) => Math.random() * (max - min + 1) + min\n\nexport { randomChoice, rand }\n","\nconst Cultivars = {\n    Vulgare: 'vulgare',\n    Glandulosum: 'glandulosum',\n    Gracile: 'gracile',\n    Hirtum: 'hirtum',\n    Virens: 'virens',\n    Viridulum: 'viridulum',\n}\n\nexport {Cultivars}","import React, { useState, useEffect } from 'react'\nimport * as PoissonSampling from 'poisson-disk-sampling'\nimport { usePoissonProcess } from './UsePoissonProcess'\nimport { rand, randomChoice } from './Utils'\nimport { Cultivars } from './Cultivars'\nimport * as Color from 'color2'\n\nconst WIDTH = window.innerWidth - window.innerWidth/4\nconst HEIGHT = window.innerHeight - window.innerHeight/4\nconst XOFFSET = 100\nconst YOFFSET = 100\nconst averageInterval = 1000\nconst jitterX = 0\nconst jitterY = 0\nconst initialClusteringFactor = 12 // per width\n\nfunction useCraigsOregano () {\n  const [oreganos, setOreganos] = useState([])\n  const [clusteringFactor, setClusteringFactor] = useState(\n    initialClusteringFactor\n  )\n\n  const buyFerts = () => {\n    setClusteringFactor(f => f + 1)\n  }\n\n  const bumpHarvestedCount = id => {\n    setOreganos(os =>\n      os.map(o =>\n        o.id === id ? { ...o, harvestedLeaves: o.harvestedLeaves + 1 } : o\n      )\n    )\n  }\n\n  const clickOregano = id => {\n    setOreganos(os =>\n      os.map(o => (o.id === id ? { ...o, harvested: true } : o))\n    )\n  }\n\n  const [poissonSampler, setPoissonSampler] = useState(() => {\n    return new PoissonSampling([WIDTH, HEIGHT], WIDTH / clusteringFactor)\n  })\n\n  const updateOreganos = (os, sampler, properties) => {\n    const sample =\n      sampler.getAllPoints().length === 0\n        ? sampler.addPoint([WIDTH / 2, HEIGHT / 2])\n        : sampler.next()\n\n    // work out if the oregano is near an heirloom\n    const heirloom = randomChoice([true, false, false, false, false])\n    const size = rand(10, 100)\n    const cultivar = randomChoice([\n      ...Object.values(Cultivars),\n      Cultivars.Vulgare,\n      Cultivars.Vulgare,\n      Cultivars.Vulgare\n    ])\n    const color =\n      cultivar === Cultivars.Vulgare\n        ? '#167a40'\n        : new Color('#167a40').lighten(rand(0, 0.4)).saturate(rand(0.2, 0.8))\n\n    return sample\n      ? [\n        ...os,\n        {\n          x: XOFFSET + Math.round(sample[0]) + rand(0, jitterX),\n          y: YOFFSET + Math.round(sample[1]) + rand(0, jitterY),\n          id: Math.random(),\n          heirloom,\n          cultivar,\n          jitterX,\n          jitterY,\n          baseGrowthRate: averageInterval * rand(0.2, 2),\n          harvestedLeaves: 0,\n          leafClusterFactor: size / 2,\n          size,\n          color,\n          harvested: false,\n          ...properties\n        }\n      ]\n      : os\n  }\n\n  usePoissonProcess(() => {\n    setOreganos(os => updateOreganos(os, poissonSampler))\n  }, averageInterval)\n\n  const refreshSampler = () => {\n    setPoissonSampler(() => {\n      // updating the clustering factor requires creating a new sampler instance\n      const newSampler = new PoissonSampling(\n        [WIDTH, HEIGHT],\n        WIDTH / clusteringFactor\n      )\n\n      // Add existing oregano positions to the newly created poissonSampler instance.\n      oreganos\n        .filter(o => !o.harvested) // ignore already harvested. allows for new growth.\n        .forEach(({ x, y }) => {\n          newSampler.addPoint([x, y])\n        })\n\n      return newSampler\n    })\n  }\n  useEffect(refreshSampler, [clusteringFactor])\n  useEffect(refreshSampler, [oreganos.filter(o => o.harvested).length])\n\n  const heirlooms = oreganos.filter(o => o.heirloom && o.harvestedLeaves > 0)\n  const leafCount = (acc, plant) => acc + plant.harvestedLeaves\n\n  // add the harvested leaves and the harvested plants themselves\n  const totalHarvested =\n    oreganos.reduce(leafCount, 0) + oreganos.filter(o => o.harvested).length\n\n  const heirloomHarvested = new Set(heirlooms.map(h => h.cultivar)).size\n\n  const totalPlants = oreganos.filter(o => !o.harvested).length\n\n  return {\n    oreganos,\n    buyFerts,\n    bumpHarvestedCount,\n    clickOregano,\n    totalHarvested,\n    heirloomHarvested,\n    totalPlants\n  }\n}\n\nexport { useCraigsOregano }\n","import React, { useState, useEffect } from 'react'\nimport { usePoissonProcess } from './UsePoissonProcess'\nimport * as PoissonSampling from 'poisson-disk-sampling'\n\nfunction OreganoPlant (props) {\n  const {\n    id,\n    x,\n    y,\n    heirloom,\n    cultivar,\n    clickOregano,\n    baseGrowthRate,\n    bumpHarvestedCount,\n    leafClusterFactor,\n    jitterX,\n    jitterY,\n    color,\n    size\n  } = props\n\n  const maxLeaves = size\n\n  const [oreganoLeaves, updateOreganoLeaves] = useState([])\n  const [sampler, setSampler] = useState(() => {\n    return new PoissonSampling([size, size], size / leafClusterFactor)\n  })\n\n  const [growthRate, updateGrowthRate] = useState(baseGrowthRate)\n\n  const clickLeaf = leafId => {\n    updateOreganoLeaves(os =>\n      os.map(o => (o.id === leafId ? { ...o, harvested: true } : o))\n    )\n    bumpHarvestedCount(id)\n    // reset the growth rate to the base growth rate.\n    updateGrowthRate(() => baseGrowthRate)\n  }\n\n  useEffect(\n    () => {\n      // update the sampler whenever the number of harvested leaves changes\n      // to reflect the loss of the leaf.\n      setSampler(() => {\n        const sampler = new PoissonSampling([size, size], size / 4)\n        oreganoLeaves\n          .filter(o => !o.harvested)\n          .forEach(o => {\n            sampler.addPoint([o.x, o.y])\n          })\n        return sampler\n      })\n    },\n    [oreganoLeaves.filter(o => o.harvested).length]\n  )\n\n  useEffect(\n    () => {\n      // whenever the number of leaves changes, increase the growth rate.\n      updateGrowthRate(rate => {\n        return rate / baseGrowthRate + baseGrowthRate / 2\n      })\n    },\n    [oreganoLeaves.length]\n  )\n\n  usePoissonProcess(() => {\n    updateOreganoLeaves(os => {\n      const numPoints = sampler.getAllPoints().length\n      const noLeaves = numPoints === 0\n\n      if (os.filter(o => !o.harvested).length >= maxLeaves) {\n        return os\n      }\n\n      const sample = noLeaves\n        ? sampler.addPoint([size / 2, size / 2])\n        : sampler.next()\n\n      if (sample !== null) {\n        let growthLimitReached =\n          Math.pow(Math.abs(sample[0]), 2) + Math.pow(Math.abs(sample[1]), 2) >\n          Math.pow(size, 2)\n\n        let leaf = {\n          x: Math.round(sample[0] + jitterX),\n          y: Math.round(sample[1] + jitterY),\n          id: Math.random(),\n          heirloom\n        }\n        return growthLimitReached ? os : [...os, leaf]\n      } else {\n        return os\n      }\n    })\n  }, growthRate)\n\n  return (\n    <div\n      className={'oregano' + (heirloom ? ' oregano--heirloom' : '')}\n      style={{ left: x, top: y }}\n      aria-label={'oregano'}\n    >\n      {oreganoLeaves\n        .filter(o => !o.harvested)\n        .map(leaf => (\n          <div\n            className={\n              'oregano-leaf' + (leaf.heirloom ? ' oregano--heirloom' : '')\n            }\n            style={{\n              left: -(size / 2) + leaf.x,\n              top: -(size / 2) + leaf.y,\n              backgroundColor: color\n            }}\n            title={\n              'Origanum ' + cultivar + (heirloom ? ' (heirloom variety)' : '')\n            }\n            onClick={e => {\n              e.preventDefault()\n              if (oreganoLeaves.filter(o => !o.harvested).length === 1) {\n                clickOregano(id)\n              } else {\n                clickLeaf(leaf.id)\n              }\n            }}\n            key={leaf.id}\n          />\n        ))}\n    </div>\n  )\n}\n\nexport { OreganoPlant }\n","import React from 'react'\nimport './App.css'\nimport { useCraigsOregano } from './UseCraigsOregano'\nimport { OreganoPlant } from './Plant'\nimport { Cultivars } from './Cultivars'\n\nfunction CraigsOregano (props) {\n  const {\n    oreganos,\n    buyFerts,\n    bumpHarvestedCount,\n    clickOregano,\n    totalHarvested,\n    heirloomHarvested,\n    totalPlants\n  } = useCraigsOregano()\n\n  return (\n    <div className={'craigs-oregano'}>\n      <div className={'oreganos'}>\n        {oreganos\n          .filter(o => !o.harvested)\n          .map(plant => (\n            <OreganoPlant\n              {...plant}\n              clickOregano={clickOregano}\n              key={plant.id}\n              bumpHarvestedCount={bumpHarvestedCount}\n            />\n          ))}\n      </div>\n      <div className={'info'}>\n        <p className={'count'}>\n          total oregano harvested: <b>{totalHarvested}</b>\n          <br />\n          heirloom varieties harvested: <b>{heirloomHarvested}</b>/\n          {Object.values(Cultivars).length} <br />\n          <b>{totalPlants}</b> plants growing <br />\n        </p>\n        <p>\n          <a\n            href='#'\n            onClick={e => {\n              e.preventDefault()\n              buyFerts()\n            }}\n            aria-label='apply fertiliser'\n          >\n            apply fertiliser\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nfunction App () {\n  return (\n    <div className='App'>\n      <CraigsOregano />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}