{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["height","width","quality","libnoise","QualityMode","LOW","numThresholds","Background","useState","noise","generator","Perlin","Math","random","data","Array","from","length","map","_","i","x","y","getValue","min","max","thresholds","keys","colorsBase","chroma","domain","colors","thresholdColors","t","contours","d3","size","projection","geo","scale","translate","path","threshold","d","contour","color","generatePaths","paths","KeyframesStyle","index","viewBox","style","position","top","left","fill","stroke","strokeWidth","strokeLinejoin","animationDelay","animationDuration","animationName","animationIterationCount","animationDirection","animationTimingFunction","animationFillMode","className","App","bordered","title","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bd88f0f.chunk.js","sourcesContent":["import './App.less'\nimport { useState, useEffect, useRef } from 'react'\nimport { libnoise } from 'libnoise'\nimport * as geo from 'd3-geo'\nimport * as d3 from 'd3'\nimport * as chroma from 'chroma-js'\nimport { Card, Button, Space, Row, Col, Divider } from 'antd'\nimport { GithubOutlined } from '@ant-design/icons'\n\nconst { height, width } = { height: 100, width: 100 } //useWindowDimensions()\n\nconst quality = libnoise.QualityMode.LOW\nconst numThresholds = 16\n\nconst generatePaths = () => {\n  const noise = new libnoise.generator.Perlin(\n    0.3, // freq\n    0.1, // lacunarity\n    12, // octave count\n    1.4, // persistence\n    Math.random() * 100, // seed\n    quality // quality\n  )\n\n  const data = Array.from({ length: width * height }).map((_, i) => {\n    const x = i % width\n    const y = i / height\n    return noise.getValue(x, y, 1)\n  })\n\n  // find largest and smallest values in data\n  const min = Math.min(...data)\n  const max = Math.max(...data)\n  // create an array of thresholds between min and max\n  const thresholds = [...Array(numThresholds).keys()].map(\n    i => min + (max - min) * (i / (numThresholds - 1))\n  )\n\n  const colorsBase = chroma\n    .scale(['#295939', '#e9b0df'])\n    .domain([1, numThresholds], numThresholds, 'log')\n    .colors(numThresholds)\n\n  const thresholdColors = thresholds.map((t, i) => [colorsBase[i]])\n\n  const contours = d3.contours().size([width, height])\n  const projection = geo.geoIdentity().scale(1.2).translate([-25, -25])\n  const path = d3.geoPath(projection)\n\n  return thresholds.map((threshold, i) => ({\n    d: path(contours.contour(data, threshold)),\n    color: thresholdColors[i]\n  }))\n}\n\nfunction Background () {\n  const [paths, setPaths] = useState(generatePaths())\n\n  // generate new paths every numThresholds seconds\n  /*useEffect(() => {\n    const interval = setInterval(() => {\n      setPaths(generatePaths())\n    }, numThresholds * 1000)\n    return () => clearInterval(interval)\n  }, [])*/\n\n  const KeyframesStyle = (\n    <style>\n      {`\n    @keyframes colorCycle {\n      ${paths.map(\n        ({color}, index) => `\n        ${(index * 100) / (numThresholds - 1)}% {\n          stroke: ${color};\n        }\n      `\n      )}\n    }\n    `}\n    </style>\n  )\n\n  return (\n    <>\n      {KeyframesStyle}\n      <svg\n        viewBox={`0 0 ${width / 2} ${height / 2}`}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100vw',\n          height: '100vh'\n        }}\n      >\n        <g>\n          {paths.map(({ d, color }, index) => (\n            <path\n              key={d}\n              d={d}\n              fill={'#295939'}\n              stroke={color}\n              strokeWidth={0.05}\n              strokeLinejoin='round'\n              style={{\n                animationDelay: `${index}s`,\n                animationDuration: `${3}s`,\n                animationName: 'colorCycle',\n                animationIterationCount: 'infinite',\n                animationDirection: 'alternate',\n                animationTimingFunction: 'ease-in-out',\n                animationFillMode: 'both'\n              }}\n              className='contour'\n            />\n          ))}\n        </g>\n      </svg>\n    </>\n  )\n}\n\nfunction App () {\n  return (\n    <div className='app'>\n      <Background />\n      <div className='header'>\n        <Card\n          className='headerContent'\n          bordered={false}\n          title={<h1 className={'title'}>milquetoast</h1>}\n        >\n          <Divider>language</Divider>\n          <p>\n            <ul>\n              <li>\n                <a href='https://magnetboard.io'>magnetboard.io</a> <br />\n                <i>collaborative fridge magnets</i>\n              </li>\n              <li>\n                <a href='https://hanzi.gg'>hanzi.gg</a> <br />\n                <i>hanzi guessing game</i>\n              </li>\n              <li>\n                <a href='/milquewordgen'>milquewordgen</a> <br />\n                <i>conlang word generator</i>\n              </li>\n            </ul>\n          </p>\n          <Divider>games</Divider>\n          <p>\n            <ul>\n              <li>\n                <a href='/scattershell'>Sailsongs of Scattershell</a>\n              </li>\n              <li>\n                <a href='/scattershell-islands'>Scattershell Islands</a>\n              </li>\n              <li>\n                <a href='/craigs-oregano'>Craig's Oregano</a>\n              </li>\n            </ul>\n          </p>\n          <Divider>ham radio</Divider>\n          <p>\n            <ul>\n              <li>\n                <a href='https://ft8.live'>ft8.live</a> <br /> realtime spotting\n                tool\n              </li>\n            </ul>\n          </p>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}