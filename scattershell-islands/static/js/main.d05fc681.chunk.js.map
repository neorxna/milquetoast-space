{"version":3,"sources":["Properties.js","Cell.js","Utils.js","GenerateGrid.js","UseGrid.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["CellTypes","IslandSizes","Cell","props","onActivate","onDeactivate","activated","cellType","harbour","canActivate","canDeactivate","noneActivated","cellView","blocked","click","onClick","e","preventDefault","className","GridPositions","grid","size","up","pos","down","left","undefined","right","randomChoice","arr","Math","floor","random","length","rand","min","max","getActivatedNeighbours","filter","x","checkConnected","queue","visited","current","activatedCells","cell","push","shift","neighbours","neighbour","useGrid","useState","baseCell","getPos","y","Array","fill","map","i","sPos","essentialFoodCandidates","essentialFoodPosition","walk","hPos","candidates","pick","head","w","console","log","Poisson","point","round","forEach","generateGrid","setGrid","gridByRow","reduce","rows","item","slice","remainingActives","acc","countActivated","checkValid","update","check","target","updatedGrid","messages","settlements","s","n","notes","useEffect","activatedNeighbours","str","c","harbours","numFoodActivated","numMaterialsActivated","numGrasslands","numLagoons","updateCell","prevGrid","cellHasActivatedNeighbour","cellCanDeactivate","clearGrid","Grid","islandSize","row","colN","rowN","href","message","key","note","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d05fc681.chunk.js","sourcesContent":["const CellTypes = {\n  Undecided: '?',\n  Food: 'üå±',\n  Materials: 'üõ†Ô∏è',\n  Settlement: 'üìå',\n  Grass: 'üå≤',\n  Lagoon: 'üíß',\n  Desert: 'üåµ',\n  Mountain: '‚õ∞Ô∏è'\n}\n\nconst IslandSizes = {\n  Tiny: 2,\n  Small: 3,\n  Medium: 5,\n  Large: 8\n}\n\nexport { CellTypes, IslandSizes }\n","import React from 'react'\nimport { CellTypes } from './Properties'\n\nfunction Cell (props) {\n  const {\n    onActivate,\n    onDeactivate,\n    activated,\n    cellType,\n    harbour,\n    canActivate,\n    canDeactivate,\n    noneActivated\n  } = props\n\n  const cellView = cellType\n\n  const blocked = (!activated && !canActivate) || (activated && !canDeactivate)\n  const click = blocked\n    ? {}\n    : {\n      onClick: e => {\n        e.preventDefault()\n        if (activated) onDeactivate()\n        else onActivate()\n      }\n    }\n\n  return (\n    <td\n      className={\n        (activated ? 'cell--activated' : 'cell--unactivated') +\n        (blocked ? ' cell--blocked' : '') +\n        (!canActivate ? ' cell--unactivatable' : '') +\n        (cellType === CellTypes.Settlement ? ' cell--settlement' : '') +\n        (cellType !== CellTypes.Settlement && noneActivated\n          ? ' cell--dim'\n          : '') +\n        (harbour ? ' cell--harbour' : '')\n      }\n      {...click}\n    >\n      {harbour && <div className={`harbour harbour-${harbour}`} />}\n\n      {cellView}\n    </td>\n  )\n}\n\nexport { Cell }\n","const GridPositions = (grid, size) => {\n  const up = pos => grid[pos - size]\n  const down = pos => grid[pos + size]\n  const left = pos => (pos % size === 0 ? undefined : grid[pos - 1])\n  const right = pos => (pos % size === size - 1 ? undefined : grid[pos + 1])\n  return { up, down, left, right }\n}\n\nexport { GridPositions }\n","import { CellTypes } from './Properties'\nimport { GridPositions } from './Utils'\nimport * as Poisson from 'poisson-disk-sampling'\n\nconst randomChoice = arr => {\n  let index = Math.floor(Math.random() * arr.length)\n  return arr[index]\n}\n\nconst rand = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n\nconst generateGrid = size => {\n  const baseCell = { cellType: CellTypes.Undecided, activated: false }\n\n  const getPos = (x, y) => y * size + x\n\n  let grid = Array(size * size)\n    .fill({ ...baseCell })\n    .map((cell, pos) => ({ ...cell, pos }))\n\n  const { up, down, left, right } = GridPositions(grid, size)\n\n  // add size/3 settlements\n\n  for (let i = 0; i < size / 4; i++) {\n    let x = rand(0, size - 1)\n    let y = rand(0, size - 1)\n    let cell = grid[getPos(x, y)]\n    grid[getPos(x, y)] = { ...cell, cellType: CellTypes.Settlement }\n  }\n\n  // add at least 1 food next to a settlement.\n  // find a settlement, pick a random direction that leads to another cell, place food.\n  let sPos = randomChoice(\n    grid.filter(cell => cell.cellType === CellTypes.Settlement)\n  ).pos\n  let essentialFoodCandidates = [\n    up(sPos),\n    down(sPos),\n    left(sPos),\n    right(sPos)\n  ].filter(x => x != undefined && x.cellType === CellTypes.Undecided)\n  let essentialFoodPosition = randomChoice(essentialFoodCandidates)\n\n  grid[essentialFoodPosition.pos] = {\n    ...essentialFoodPosition,\n    cellType: CellTypes.Food\n  }\n\n  // add at least 1 materials within an n-manhattan-walk of a settlement, where n=size.\n  if (size >= 3) {\n    let walk = [grid[sPos]] // start at sPos\n    while (walk.length < size) {\n      let head = walk[walk.length - 1]\n      let hPos = head.pos\n      let candidates = [up(hPos), down(hPos), left(hPos), right(hPos)].filter(\n        x => x != undefined && x.cellType === CellTypes.Undecided\n      )\n      let pick = randomChoice(candidates)\n      if (pick != undefined) walk.push(pick)\n    }\n    let head = walk[walk.length - 1]\n    grid[head.pos] = { ...head, cellType: CellTypes.Materials }\n  }\n\n  // for size=8, do a random n-manhattan walk from each settlement, where n=size-2, place a mountain.\n  if (size > 5) {\n    let walk = [grid[sPos]] // start at sPos\n    while (walk.length < 6) {\n      let head = walk[walk.length - 1]\n      let hPos = head.pos\n      let candidates = [up(hPos), down(hPos), left(hPos), right(hPos)].filter(\n        x =>\n          x != undefined &&\n          x.cellType === CellTypes.Undecided &&\n          walk.filter(w => w.pos === x.pos).length === 0\n      )\n      let pick = randomChoice(candidates)\n      if (pick != undefined) walk.push(pick)\n      else break\n    }\n    let head = walk[walk.length - 1]\n    grid[head.pos] = { ...head, cellType: CellTypes.Mountain }\n  }\n\n  console.log('starting poisson...')\n\n  const poisson = new Poisson([size, size], size / 10)\n  poisson\n    .fill()\n    .map(point => getPos(Math.round(point[0]), Math.round(point[1])))\n    .forEach(pos => {\n      if (grid[pos] && grid[pos].cellType === CellTypes.Undecided) {\n        grid[pos].cellType = randomChoice([\n          CellTypes.Grass,\n          CellTypes.Mountain,\n          CellTypes.Lagoon,\n          CellTypes.Desert\n        ])\n      }\n    })\n\n  grid.forEach(cell => {\n    if (cell.cellType === CellTypes.Undecided) {\n      cell.cellType = randomChoice([\n        CellTypes.Food,\n        CellTypes.Materials,\n        CellTypes.Undecided\n      ])\n    }\n  })\n\n  console.log('generated grid', grid)\n  return grid\n}\n\nexport { generateGrid }\n","import { useState, useEffect } from 'react'\nimport { CellTypes } from './Properties'\nimport { generateGrid } from './GenerateGrid'\nimport { GridPositions } from './Utils'\n\nconst countActivated = grid =>\n  grid.reduce((acc, cell) => acc + (cell.activated ? 1 : 0), 0)\n\nconst getActivatedNeighbours = (pos, grid, size) => {\n  const { up, down, left, right } = GridPositions(grid, size)\n  return [up(pos), down(pos), left(pos), right(pos)].filter(\n    x => x && x.activated\n  )\n}\n\nconst checkConnected = (grid, size) => {\n  /*\n  Check if the user's cells are connected,\n  i.e. there is a single component in the graph represented by the\n  activated cells and their neighbours.\n\n  Performs a breadth first search and then checks if there are any\n  activated unvisited cells remaining.\n  */\n  let queue = []\n  let visited = {}\n  let current = null\n  const activatedCells = grid.filter(cell => cell.activated)\n\n  if (activatedCells[0]) queue.push(activatedCells[0].pos)\n  else return true\n\n  while (queue.length > 0) {\n    current = queue.shift()\n    if (!visited[current]) {\n      visited[current] = true\n      let neighbours = getActivatedNeighbours(current, grid, size)\n      for (let neighbour of neighbours) {\n        queue.push(neighbour.pos)\n      }\n    }\n  }\n\n  // are there are any active cells that do not have their pos in visited?\n  return grid.filter(cell => cell.activated && !visited[cell.pos]).length === 0\n}\n\nfunction useGrid (size) {\n  //  for (let i = 0; i < 100; i++) { generateGrid(size)}\n  const [grid, setGrid] = useState(() => generateGrid(size))\n\n  const gridByRow = grid.reduce(\n    (rows, item) => {\n      let head = rows[rows.length - 1]\n      return head.length === size\n        ? [...rows, [item]]\n        : [...rows.slice(0, rows.length - 1), [...head, item]]\n    },\n    [[]]\n  )\n\n  const remainingActives = size - countActivated(grid)\n\n  const getPos = (x, y) => y * size + x\n\n  const updateCell = (x, y, update) => {\n    setGrid(prevGrid => {\n      return checkValid(x, y, update, prevGrid, false)\n    })\n  }\n\n  const checkValid = (x, y, update, grid, check) => {\n    const pos = getPos(x, y)\n    const target = grid[pos]\n\n    // ensure an update would not lead to a disconnected graph.\n    if (target !== undefined) {\n      let updatedGrid = [...grid]\n      updatedGrid[pos] = { ...target, ...update }\n\n      return checkConnected(updatedGrid, size)\n        ? check\n          ? true\n          : updatedGrid\n        : check\n          ? false\n          : grid\n    } else {\n      return check ? false : grid\n    }\n  }\n\n  const cellCanDeactivate = (x, y) => {\n    return checkValid(x, y, { activated: false }, grid, true)\n  }\n\n  const cellHasActivatedNeighbour = (x, y) => {\n    const pos = getPos(x, y)\n    return getActivatedNeighbours(pos, grid, size).length > 0\n  }\n\n  const clearGrid = () => {\n    setGrid(prevGrid => prevGrid.map(cell => ({ ...cell, activated: false })))\n  }\n\n  /* Message conditions */\n  let messages = []\n\n  const { up, down, left, right } = GridPositions(grid, size)\n\n  const oneSettlementActivated =\n    grid.filter(\n      cell => cell.activated && cell.cellType === CellTypes.Settlement\n    ).length > 0\n  if (oneSettlementActivated) messages.push('‚úî at least one settlement')\n  else messages.push(`need settlement (${CellTypes.Settlement})`)\n\n  if (size > 2) {\n    // all settlements must be adjacent to two activated cells\n    let settlements = grid.filter(\n      cell => cell.activated && cell.cellType === CellTypes.Settlement\n    )\n    let allHaveAdjacent =\n      settlements.filter(s => {\n        const activatedNeighbours = [\n          up(s.pos),\n          down(s.pos),\n          left(s.pos),\n          right(s.pos)\n        ].filter(n => n && n.activated)\n        return activatedNeighbours.length > 1\n      }).length === settlements.length && settlements.length > 0\n    if (allHaveAdjacent) {\n      messages.push('‚úîÔ∏è settlements have at least two neighbours')\n    } else if (settlements.length > 0) {\n      messages.push('settlements need at least two neighbours')\n    }\n  }\n\n  if (size === 8) {\n    const mountainActivated =\n      grid.filter(\n        cell => cell.activated && cell.cellType === CellTypes.Mountain\n      ).length > 0\n    if (mountainActivated) messages.push('‚úîÔ∏è at least one mountain')\n    else messages.push(`need mountain (${CellTypes.Mountain})`)\n  }\n\n  /* Note conditions */\n\n  let notes = []\n\n  // how many non-activated cells are adjacent to more than one activated cell?\n\n  useEffect(\n    () => {\n      setGrid(grid =>\n        grid.map(cell => {\n          const { up, down, left, right } = GridPositions(grid, size)\n          const neighbours = [\n            ['u', up(cell.pos)],\n            ['d', down(cell.pos)],\n            ['l', left(cell.pos)],\n            ['r', right(cell.pos)]\n          ]\n          const activatedNeighbours = neighbours.filter(\n            n => n[1] && n[1].activated\n          )\n          return !cell.activated && activatedNeighbours.length > 1\n            ? {\n              ...cell,\n              harbour: activatedNeighbours.reduce((str, n) => str + n[0], '')\n            }\n            : { ...cell, harbour: false }\n        })\n      )\n    },\n    [grid.filter(c => c.activated).length]\n  )\n\n  const harbours = grid.filter(c => c.harbour).length\n  if (harbours > 0) {\n    notes.push(\n      `${harbours} harbour${harbours > 1 ? 's' : ''} (fishing possible)`\n    )\n  }\n\n  const numFoodActivated = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Food\n  ).length\n  if (numFoodActivated === 0 && harbours === 0) {\n    notes.push('food may be hard to come by.')\n  } else if (numFoodActivated > 0) {\n    notes.push(`bountiful food x${numFoodActivated}`)\n  }\n\n  const numMaterialsActivated = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Materials\n  ).length\n  if (numMaterialsActivated === 0) {\n    notes.push('materials may be hard to come by.')\n  } else {\n    notes.push(`bountiful materials x${numMaterialsActivated}`)\n  }\n\n  const numGrasslands = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Grass\n  ).length\n  if (numGrasslands > 0) notes.push(`grasslands x${numGrasslands}`)\n\n  const numLagoons = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Lagoon\n  ).length\n  if (numLagoons > 0) notes.push(`lagoon x${numLagoons}`)\n\n  return {\n    grid,\n    gridByRow,\n    checkConnected,\n    remainingActives,\n    updateCell,\n    cellHasActivatedNeighbour,\n    cellCanDeactivate,\n    clearGrid,\n    messages,\n    notes\n  }\n}\n\nexport { useGrid }\n","import { Cell } from './Cell'\nimport { useGrid } from './UseGrid'\nimport React from 'react'\n\nfunction Grid (props) {\n  const { islandSize } = props\n  const {\n    gridByRow,\n    remainingActives,\n    updateCell,\n    cellHasActivatedNeighbour,\n    cellCanDeactivate,\n    clearGrid,\n    messages,\n    notes\n  } = useGrid(islandSize)\n\n  return (\n    <>\n      <h2>{remainingActives}</h2>\n      <table>\n        {gridByRow.map((row, colN) => {\n          return (\n            <tr>\n              {row.map((cell, rowN) => {\n                return (\n                    <Cell\n                      cellType={cell.cellType}\n                      activated={cell.activated}\n                      harbour={cell.harbour}\n                      canActivate={\n                        remainingActives > 0 &&\n                        (remainingActives === islandSize ||\n                          cellHasActivatedNeighbour(rowN, colN))\n                      }\n                      canDeactivate={cellCanDeactivate(rowN, colN)}\n                      onActivate={() =>\n                        updateCell(rowN, colN, { activated: true })\n                      }\n                      onDeactivate={() =>\n                        updateCell(rowN, colN, { activated: false })\n                      }\n                      noneActivated={remainingActives === islandSize}\n                    />\n                )\n              })}\n            </tr>\n          )\n        })}\n      </table>\n\n      <div className={'info'}>\n        <a\n          href='#'\n          onClick={e => {\n            e.preventDefault()\n            clearGrid()\n          }}\n        >\n          clear\n        </a>\n        <ul className={'messages'}>\n          {messages.map((message, i) => (\n            <li key={`${message}${i}`}>{message}</li>\n          ))}\n        </ul>\n        {notes.length > 0 && '-'}\n        <ul className={'notes'}>\n          {notes.map((note, i) => (\n            <li key={`${note}${i}`}>{note}</li>\n          ))}\n        </ul>\n      </div>\n    </>\n  )\n}\n\nexport { Grid }\n","import React from 'react'\nimport './App.css'\nimport { Grid } from './Grid'\nimport { IslandSizes } from './Properties'\n\nfunction App () {\n  return (\n    <div className='App'>\n      {<Grid islandSize={IslandSizes.Tiny} />}\n      <hr />\n      {<Grid islandSize={IslandSizes.Small} />}\n      <hr />\n      {<Grid islandSize={IslandSizes.Medium} />}\n      <hr />\n      {<Grid islandSize={IslandSizes.Large} />}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}