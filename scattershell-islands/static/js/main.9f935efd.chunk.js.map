{"version":3,"sources":["Cell.js","Properties.js","Utils.js","GenerateGrid.js","UseGrid.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","onActivate","onDeactivate","activated","cellType","canActivate","cellView","activatedView","canDeactivate","className","href","onClick","e","preventDefault","unactivatedView","CellTypes","IslandSizes","GridPositions","grid","size","up","pos","down","left","undefined","right","randomChoice","arr","Math","floor","random","length","rand","min","max","getActivatedNeighbours","filter","x","checkConnected","queue","visited","current","activatedCells","cell","push","shift","neighbours","neighbour","useGrid","useState","baseCell","getPos","y","Array","fill","map","i","sPos","essentialFoodCandidates","essentialFoodPosition","walk","hPos","candidates","pick","head","generateGrid","setGrid","gridByRow","reduce","rows","item","slice","remainingActives","acc","countActivated","checkValid","update","check","target","updatedGrid","messages","notes","harbours","activatedNeighbours","n","numFoodActivated","numMaterialsActivated","updateCell","prevGrid","cellHasActivatedNeighbour","cellCanDeactivate","clearGrid","Grid","islandSize","row","colN","rowN","message","key","note","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f935efd.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Cell (props) {\n  const {\n    onActivate,\n    onDeactivate,\n    activated,\n    cellType,\n    canActivate,\n    canDeactivate\n  } = props\n\n  const cellView = cellType\n\n  const activatedView = canDeactivate ? (\n    <a\n      className={'cell--activated'}\n      href='#'\n      onClick={e => {\n        e.preventDefault()\n        onDeactivate()\n      }}\n    >\n      {cellView}\n    </a>\n  ) : (\n    <span className={'cell--undeactivatable'}>{cellView}</span>\n  )\n  const unactivatedView = canActivate ? (\n    <a\n      className={'cell--unactivated'}\n      href='#'\n      onClick={e => {\n        e.preventDefault()\n        onActivate()\n      }}\n    >\n      {cellView}\n    </a>\n  ) : (\n    <span className={'cell--unactivatable'}>{cellView}</span>\n  )\n\n  return activated ? activatedView : unactivatedView\n}\n\nexport { Cell }\n","const CellTypes = {\n  Undecided: '?',\n  Food: '🌱',\n  Materials: '🛠️',\n  Settlement: '📌',\n  Grass: '🍃',\n  Lagoon: '💧',\n  Desert: '🌵',\n  Mountain: '⛰️'\n}\n\nconst IslandSizes = {\n  Tiny: 2,\n  Small: 3,\n  Medium: 5,\n  Large: 8\n}\n\nexport { CellTypes, IslandSizes }\n","const GridPositions = (grid, size) => {\n  const up = pos => grid[pos - size]\n  const down = pos => grid[pos + size]\n  const left = pos => (pos % size === 0 ? undefined : grid[pos - 1])\n  const right = pos => (pos % size === size - 1 ? undefined : grid[pos + 1])\n  return { up, down, left, right }\n}\n\nexport { GridPositions }\n","import { CellTypes } from './Properties'\nimport { GridPositions } from './Utils'\n\nconst randomChoice = arr => {\n  let index = Math.floor(Math.random() * arr.length)\n  return arr[index]\n}\n\nconst rand = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n\nconst generateGrid = size => {\n  const baseCell = { cellType: CellTypes.Undecided, activated: false }\n\n  const getPos = (x, y) => y * size + x\n\n  let grid = Array(size * size)\n    .fill({ ...baseCell })\n    .map((cell, pos) => ({ ...cell, pos }))\n\n  const { up, down, left, right } = GridPositions(grid, size)\n\n  // add size/3 settlements\n\n  for (let i = 0; i < size / 4; i++) {\n    let x = rand(0, size - 1)\n    let y = rand(0, size - 1)\n    let cell = grid[getPos(x, y)]\n    grid[getPos(x, y)] = { ...cell, cellType: CellTypes.Settlement }\n  }\n\n  // add at least 1 food next to a settlement.\n  // find a settlement, pick a random direction that leads to another cell, place food.\n  let sPos = randomChoice(\n    grid.filter(cell => cell.cellType === CellTypes.Settlement)\n  ).pos\n  let essentialFoodCandidates = [\n    up(sPos),\n    down(sPos),\n    left(sPos),\n    right(sPos)\n  ].filter(x => x != undefined && x.cellType === CellTypes.Undecided)\n  let essentialFoodPosition = randomChoice(essentialFoodCandidates)\n\n  grid[essentialFoodPosition.pos] = {\n    ...essentialFoodPosition,\n    cellType: CellTypes.Food\n  }\n\n  // add at least 1 materials within an n-manhattan-walk of a settlement, where n=size.\n  if (size >= 3) {\n    let walk = [grid[sPos]] // start at sPos\n    while (walk.length < size) {\n      let head = walk[walk.length - 1]\n      let hPos = head.pos\n      let candidates = [up(hPos), down(hPos), left(hPos), right(hPos)].filter(\n        x => x != undefined && x.cellType === CellTypes.Undecided\n      )\n      let pick = randomChoice(candidates)\n      walk.push(pick)\n    }\n    let head = walk[walk.length - 1]\n    grid[head.pos] = { ...head, cellType: CellTypes.Materials }\n  }\n\n  // for size=8, do a random n-manhattan walk from each settlement, where n=size-2, place a mountain.\n  if (size === 8) {\n    let walk = [grid[sPos]] // start at sPos\n    while (walk.length < 6) {\n      let head = walk[walk.length - 1]\n      let hPos = head.pos\n      let candidates = [up(hPos), down(hPos), left(hPos), right(hPos)].filter(\n        x => x != undefined && x.cellType === CellTypes.Undecided\n        // &&\n        // walk.filter(w => w.pos === x.pos).length === 0\n      )\n      let pick = randomChoice(candidates)\n      walk.push(pick)\n    }\n    let head = walk[walk.length - 1]\n    grid[head.pos] = { ...head, cellType: CellTypes.Mountain }\n  }\n\n  return grid\n}\n\nexport { generateGrid }\n","import { useState, useEffect } from 'react'\nimport { CellTypes } from './Properties'\nimport { generateGrid } from './GenerateGrid'\nimport { GridPositions } from './Utils'\n\nconst countActivated = grid =>\n  grid.reduce((acc, cell) => acc + (cell.activated ? 1 : 0), 0)\n\nconst getActivatedNeighbours = (pos, grid, size) => {\n  const { up, down, left, right } = GridPositions(grid, size)\n  return [up(pos), down(pos), left(pos), right(pos)].filter(\n    x => x && x.activated\n  )\n}\n\nconst checkConnected = (grid, size) => {\n  /*\n  Check if the user's cells are connected,\n  i.e. there is a single component in the graph represented by the\n  activated cells and their neighbours.\n\n  Performs a breadth first search and then checks if there are any\n  activated unvisited cells remaining.\n  */\n  let queue = []\n  let visited = {}\n  let current = null\n  const activatedCells = grid.filter(cell => cell.activated)\n\n  if (activatedCells[0]) queue.push(activatedCells[0].pos)\n  else return true\n\n  while (queue.length > 0) {\n    current = queue.shift()\n    if (!visited[current]) {\n      visited[current] = true\n      let neighbours = getActivatedNeighbours(current, grid, size)\n      for (let neighbour of neighbours) {\n        queue.push(neighbour.pos)\n      }\n    }\n  }\n\n  // are there are any active cells that do not have their pos in visited?\n  return grid.filter(cell => cell.activated && !visited[cell.pos]).length === 0\n}\n\nfunction useGrid (size) {\n  const [grid, setGrid] = useState(() => generateGrid(size))\n\n  const gridByRow = grid.reduce(\n    (rows, item) => {\n      let head = rows[rows.length - 1]\n      return head.length === size\n        ? [...rows, [item]]\n        : [...rows.slice(0, rows.length - 1), [...head, item]]\n    },\n    [[]]\n  )\n\n  const remainingActives = size - countActivated(grid)\n\n  const getPos = (x, y) => y * size + x\n\n  const updateCell = (x, y, update) => {\n    setGrid(prevGrid => {\n      return checkValid(x, y, update, prevGrid, false)\n    })\n  }\n\n  const checkValid = (x, y, update, grid, check) => {\n    const pos = getPos(x, y)\n    const target = grid[pos]\n\n    // ensure an update would not lead to a disconnected graph.\n    if (target !== undefined) {\n      let updatedGrid = [...grid]\n      updatedGrid[pos] = { ...target, ...update }\n\n      return checkConnected(updatedGrid, size)\n        ? check\n          ? true\n          : updatedGrid\n        : check\n          ? false\n          : grid\n    } else {\n      return check ? false : grid\n    }\n  }\n\n  const cellCanDeactivate = (x, y) => {\n    return checkValid(x, y, { activated: false }, grid, true)\n  }\n\n  const cellHasActivatedNeighbour = (x, y) => {\n    const pos = getPos(x, y)\n    return getActivatedNeighbours(pos, grid, size).length > 0\n  }\n\n  const clearGrid = () => {\n    setGrid(prevGrid => prevGrid.map(cell => ({ ...cell, activated: false })))\n  }\n\n  /* Message conditions */\n  let messages = []\n\n  const oneSettlementActivated =\n    grid.filter(\n      cell => cell.activated && cell.cellType === CellTypes.Settlement\n    ).length === 1\n  if (oneSettlementActivated) messages.push('✔️ one settlement')\n  else messages.push(`need one settlement (${CellTypes.Settlement})`)\n\n  if (size === 8) {\n    const mountainActivated =\n      grid.filter(\n        cell => cell.activated && cell.cellType === CellTypes.Mountain\n      ).length > 0\n    if (mountainActivated) messages.push('✔️ at least one mountain')\n    else messages.push(`need mountain (${CellTypes.Mountain})`)\n  }\n\n  /* Note conditions */\n\n  let notes = []\n\n  // how many non-activated cells are adjacent to more than one activated cell?\n\n  const { up, down, left, right } = GridPositions(grid, size)\n  const harbours = grid.filter(cell => {\n    const neighbours = [\n      up(cell.pos),\n      down(cell.pos),\n      left(cell.pos),\n      right(cell.pos)\n    ]\n    const activatedNeighbours = neighbours.filter(n => n && n.activated)\n    return !cell.activated && activatedNeighbours.length > 1\n  }).length\n  if (harbours > 0) {\n    notes.push(\n      `${harbours} harbour${harbours > 1 ? 's' : ''} (fishing possible)`\n    )\n  }\n\n  const numFoodActivated = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Food\n  ).length\n  if (numFoodActivated === 0 && harbours === 0) {\n    notes.push('food may be hard to come by.')\n  } else {\n    notes.push(`bountiful food x${numFoodActivated}`)\n  }\n\n  const numMaterialsActivated = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Materials\n  ).length\n  if (numMaterialsActivated === 0) {\n    notes.push('materials may be hard to come by.')\n  } else {\n    notes.push(`bountiful materials x${numMaterialsActivated}`)\n  }\n\n  return {\n    grid,\n    gridByRow,\n    checkConnected,\n    remainingActives,\n    updateCell,\n    cellHasActivatedNeighbour,\n    cellCanDeactivate,\n    clearGrid,\n    messages,\n    notes\n  }\n}\n\nexport { useGrid }\n","import { Cell } from './Cell'\nimport { useGrid } from './UseGrid'\nimport React from 'react'\n\nfunction Grid (props) {\n  const { islandSize } = props\n  const {\n    gridByRow,\n    remainingActives,\n    updateCell,\n    cellHasActivatedNeighbour,\n    cellCanDeactivate,\n    clearGrid,\n    messages,\n    notes\n  } = useGrid(islandSize)\n\n  return (\n    <>\n      <h2>{remainingActives} remaining</h2>\n      <table>\n        {gridByRow.map((row, colN) => {\n          return (\n            <tr>\n              {row.map((cell, rowN) => {\n                return (\n                  <td>\n                    <Cell\n                      cellType={cell.cellType}\n                      activated={cell.activated}\n                      canActivate={\n                        remainingActives > 0 &&\n                        (remainingActives === islandSize ||\n                          cellHasActivatedNeighbour(rowN, colN))\n                      }\n                      canDeactivate={cellCanDeactivate(rowN, colN)}\n                      onActivate={() =>\n                        updateCell(rowN, colN, { activated: true })\n                      }\n                      onDeactivate={() =>\n                        updateCell(rowN, colN, { activated: false })\n                      }\n                    />\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </table>\n\n      <div className={'info'}>\n        <a\n          href='#'\n          onClick={e => {\n            e.preventDefault()\n            clearGrid()\n          }}\n        >\n          clear\n        </a>\n        <ul className={'messages'}>\n          {messages.map((message, i) => (\n            <li key={`${message}${i}`}>{message}</li>\n          ))}\n        </ul>\n        {notes.length > 0 && '-'}\n        <ul className={'notes'}>\n          {notes.map((note, i) => (\n            <li key={`${note}${i}`}>{note}</li>\n          ))}\n        </ul>\n      </div>\n    </>\n  )\n}\n\nexport { Grid }\n","import React from 'react'\nimport './App.css'\nimport { Grid } from './Grid'\nimport { IslandSizes } from './Properties'\n\nfunction App () {\n  return (\n    <div className='App'>\n      {<Grid islandSize={IslandSizes.Tiny} />}\n      <hr />\n      {<Grid islandSize={IslandSizes.Small} />}\n      <hr />\n      {<Grid islandSize={IslandSizes.Medium} />}\n      <hr />\n      {<Grid islandSize={IslandSizes.Large} />}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}