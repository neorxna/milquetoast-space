{"version":3,"sources":["Properties.js","Cell.js","Utils.js","../../scattershell/src/Resources.js","GenerateGrid.js","UseGrid.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["CellTypes","IslandSizes","Cell","props","onActivate","onDeactivate","activated","cellType","harbour","canActivate","canDeactivate","noneActivated","allActivated","dragging","setDragging","cellView","blocked","click","onMouseUp","e","preventDefault","onMouseDown","onMouseOver","className","GridPositions","grid","size","_up","pos","_down","_left","undefined","_right","up","down","left","right","upright","downleft","upleft","downright","ResourceTypes","Shellfish","Fish","Pigs","Birds","BushFood","Coconuts","RootVegetables","PreciousShells","FreshWater","Flax","Bamboo","SturdyWood","FruitTrees","Guano","Succulents","FoodPerResources","WoodPerResources","randomChoice","arr","Math","floor","random","length","rand","min","max","materialResources","Object","values","filter","x","foodResources","allResources","buildCell","neighbourCells","contains","getActivatedNeighbours","checkConnected","queue","visited","current","activatedCells","cell","push","shift","neighbours","neighbour","useGrid","useState","baseCell","getPos","y","Array","fill","map","i","sPos","essentialFoodCandidates","essentialFood","console","log","randomWalkUpdate","propertiesFn","end","walk","head","candidates","fn","w","pick","pop","essentialMaterials","essentialMountain","Poisson","point","round","forEach","desertCount","noOtherMountains","nn","generateGrid","setGrid","gridByRow","reduce","rows","item","slice","maxActives","remainingActives","acc","countActivated","checkValid","update","check","target","updatedGrid","cellHasActivatedNeighbour","messages","oneSettlementActivated","lagoonWithFourNeighbours","n","settlements","s","notes","useEffect","activatedNeighbours","str","c","harbours","stuff","entries","thing","num","updateCell","prevGrid","cellCanActivate","cellCanDeactivate","clearGrid","Grid","islandSize","row","colN","rowN","message","key","Date","getTime","note","href","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eeeb970b.chunk.js","sourcesContent":["const CellTypes = {\n  Undecided: '?',\n  Food: '🌱',\n  Materials: '🛠️',\n  Settlement: '📌',\n  Grass: '🌲',\n  Lagoon: '💧',\n  Desert: '🌵',\n  Mountain: '⛰️'\n}\n\nconst IslandSizes = {\n  Tiny: 2,\n  Small: 3,\n  Medium: 5,\n  Large: 8\n}\n\nexport { CellTypes, IslandSizes }\n","import React from 'react'\nimport { CellTypes } from './Properties'\n\nfunction Cell (props) {\n  const {\n    onActivate,\n    onDeactivate,\n    activated,\n    cellType,\n    harbour,\n    canActivate,\n    canDeactivate,\n    noneActivated,\n    allActivated,\n    dragging,\n    setDragging\n  } = props\n\n  const cellView = cellType\n\n  const blocked = (!activated && !canActivate) || (activated && !canDeactivate)\n  const click = blocked\n    ? {\n      onMouseUp: e => {\n        setDragging(false)\n        e.preventDefault()\n      }\n    }\n    : {\n      onMouseDown: e => {\n        setDragging(true)\n        if (activated) onDeactivate()\n        else {\n          onActivate()\n        }\n        e.preventDefault()\n      },\n      onMouseOver: e => {\n        if (dragging) {\n          if (activated) onDeactivate()\n          else onActivate()\n        }\n      },\n      onMouseUp: e => {\n        setDragging(false)\n        e.preventDefault()\n      }\n    }\n\n  return (\n    <td\n      className={\n        (activated ? 'cell--activated' : 'cell--unactivated') +\n        (blocked ? ' cell--blocked' : '') +\n        (!canActivate ? ' cell--unactivatable' : '') +\n        (cellType === CellTypes.Settlement ? ' cell--settlement' : '') +\n        (cellType !== CellTypes.Settlement &&\n        cellType !== CellTypes.Lagoon &&\n        noneActivated\n          ? ' cell--dim'\n          : '') +\n        (harbour ? ' cell--harbour' : '') +\n        (allActivated && !harbour && !activated ? ' cell--ocean' : '')\n      }\n      {...click}\n    >\n      {harbour && <div className={`harbour harbour-${harbour}`} />}\n\n      {cellView}\n    </td>\n  )\n}\n\nexport { Cell }\n","const GridPositions = (grid, size) => {\n  const _up = pos => pos - size\n  const _down = pos => pos + size\n  const _left = pos => (pos % size === 0 ? undefined : pos - 1)\n  const _right = pos => (pos % size === size - 1 ? undefined : pos + 1)\n\n  const up = pos => grid[_up(pos)]\n  const down = pos => grid[_down(pos)]\n\n  const left = pos => (pos % size === 0 ? undefined : grid[pos - 1])\n  const right = pos => (pos % size === size - 1 ? undefined : grid[pos + 1])\n\n  const upright = pos => grid[_up(_right(pos))]\n  const downleft = pos => grid[_down(_left(pos))]\n  const upleft = pos => grid[_up(_left(pos))]\n  const downright = pos => grid[_down(_right(pos))]\n\n  return { up, down, left, right, upright, downleft, upleft, downright }\n}\n\nexport { GridPositions }\n","const ResourceTypes = {\n  Shellfish: 'shellfish',\n  Fish: 'fish',\n  Pigs: 'pigs',\n  Birds: 'birds',\n  BushFood: 'bush food',\n  Coconuts: 'coconuts',\n  RootVegetables: 'root vegetables',\n  PreciousShells: 'precious shells',\n  FreshWater: 'fresh water',\n  Flax: 'flax',\n  Bamboo: 'bamboo',\n  SturdyWood: 'sturdy wood',\n  FruitTrees: 'fruit trees',\n  Guano: 'guano',\n  Succulents: 'succulents'\n}\n\nconst IsGardenFood = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: false,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: false,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: false,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: false,\n  [ResourceTypes.FruitTrees]: true,\n  [ResourceTypes.Guano]: false\n}\n\nconst RequiresGathering = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: false,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: true,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: true,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: true,\n  [ResourceTypes.FruitTrees]: false,\n  [ResourceTypes.Guano]: false\n}\n\nconst IsDispersible = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: true,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: true,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: false,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: false,\n  [ResourceTypes.FruitTrees]: true,\n  [ResourceTypes.Guano]: true\n}\n\nconst FoodPerResources = {\n  [ResourceTypes.Shellfish]: 2,\n  [ResourceTypes.Fish]: 3,\n  [ResourceTypes.Pigs]: 2,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 3,\n  [ResourceTypes.Coconuts]: 2,\n  [ResourceTypes.RootVegetables]: 1,\n  [ResourceTypes.PreciousShells]: 0,\n  [ResourceTypes.FreshWater]: 2,\n  [ResourceTypes.Flax]: 0,\n  [ResourceTypes.Bamboo]: 1,\n  [ResourceTypes.SturdyWood]: 0,\n  [ResourceTypes.FruitTrees]: 2,\n  [ResourceTypes.Guano]: 0\n}\n\nconst WoodPerResources = {\n  [ResourceTypes.Shellfish]: 1,\n  [ResourceTypes.Fish]: 0,\n  [ResourceTypes.Pigs]: 1,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 0,\n  [ResourceTypes.Coconuts]: 2,\n  [ResourceTypes.RootVegetables]: 0,\n  [ResourceTypes.PreciousShells]: 2,\n  [ResourceTypes.FreshWater]: 0,\n  [ResourceTypes.Flax]: 3,\n  [ResourceTypes.Bamboo]: 2,\n  [ResourceTypes.SturdyWood]: 2,\n  [ResourceTypes.FruitTrees]: 1,\n  [ResourceTypes.Guano]: 2\n}\n\nconst Boons = {}\nconst Burdens = {}\n\nexport {\n  ResourceTypes,\n  FoodPerResources,\n  WoodPerResources,\n  Boons,\n  Burdens,\n  RequiresGathering,\n  IsDispersible,\n  IsGardenFood\n}\n","import { CellTypes } from './Properties'\nimport { GridPositions } from './Utils'\nimport * as Poisson from 'poisson-disk-sampling'\nimport {\n  ResourceTypes,\n  FoodPerResources,\n  WoodPerResources\n} from './scattershell-common/Resources'\n\nconst randomChoice = arr => {\n  let index = Math.floor(Math.random() * arr.length)\n  return arr[index]\n}\n\nconst rand = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n\nconst materialResources = Object.values(ResourceTypes).filter(x => {\n  return WoodPerResources[x] > 0\n})\nconst foodResources = Object.values(ResourceTypes).filter(\n  x => FoodPerResources[x] > 0\n)\nconst allResources = Object.values(ResourceTypes)\n\nconst buildCell = (cellType, neighbourCells) => {\n  let contains = []\n  if (cellType === CellTypes.Materials) {\n    contains = [\n      randomChoice(materialResources),\n      randomChoice(materialResources)\n    ]\n  } else if (cellType === CellTypes.Food) {\n    contains = [randomChoice(foodResources), randomChoice(foodResources)]\n  } else if (cellType === CellTypes.Desert) {\n    contains = [\n      randomChoice([\n        ResourceTypes.Succulents,\n        ResourceTypes.BushFood,\n        null,\n        null,\n        null\n      ])\n    ].filter(x => x != undefined)\n  } else if (cellType === CellTypes.Lagoon) {\n    contains = [\n      randomChoice([ResourceTypes.FreshWater, null]),\n      randomChoice([ResourceTypes.Fish, null])\n    ].filter(x => x != undefined)\n  } else {\n    contains = [randomChoice(allResources)]\n  }\n  return { cellType, contains }\n}\n\nconst generateGrid = size => {\n  const baseCell = { cellType: CellTypes.Undecided, activated: false }\n\n  const getPos = (x, y) => y * size + x\n\n  let grid = Array(size * size)\n    .fill({ ...baseCell })\n    .map((cell, pos) => ({ ...cell, pos }))\n\n  const {\n    up,\n    down,\n    left,\n    right,\n    upleft,\n    upright,\n    downleft,\n    downright\n  } = GridPositions(grid, size)\n\n  // add size/3 settlements\n\n  for (let i = 0; i < size / 4; i++) {\n    let x = rand(0, size - 1)\n    let y = rand(0, size - 1)\n    let cell = grid[getPos(x, y)]\n    grid[getPos(x, y)] = { ...cell, cellType: CellTypes.Settlement }\n  }\n\n  // add at least 1 food next to a settlement.\n  // find a settlement, pick a random direction that leads to another cell, place food.\n  const sPos = randomChoice(\n    grid.filter(cell => cell.cellType === CellTypes.Settlement)\n  ).pos\n  const essentialFoodCandidates = [\n    up(sPos),\n    down(sPos),\n    left(sPos),\n    right(sPos)\n  ].filter(x => x != undefined && x.cellType === CellTypes.Undecided)\n  const essentialFood = randomChoice(essentialFoodCandidates)\n\n  grid[essentialFood.pos] = {\n    ...essentialFood,\n    ...buildCell(CellTypes.Food)\n  }\n\n  console.log('added essential food', essentialFood)\n\n  const randomWalkUpdate = propertiesFn => {\n    let walk = [grid[sPos]]\n\n    let end = null\n    while (walk.length < size) {\n      let head = walk[walk.length - 1]\n      let candidates = [up, down, left, right]\n        .map(fn => fn(head.pos))\n        .filter(\n          x =>\n            x &&\n            (walk.length > 3\n              ? x.cellType === CellTypes.Undecided\n              : x.cellType !== CellTypes.Settlement &&\n                x.cellType !== CellTypes.Food) &&\n            walk.filter(w => w.pos === x.pos).length === 0\n        )\n      let pick = randomChoice(candidates)\n      if (pick) walk.push(pick)\n      else {\n        console.log('breaking')\n        break\n      }\n    }\n    end = walk.pop()\n    grid[end.pos] = {\n      ...end,\n      ...propertiesFn([up, down, left, right].map(fn => fn(end.pos)))\n    }\n    return [...walk, end]\n  }\n\n  const essentialMaterials = randomWalkUpdate(neighbours =>\n    buildCell(CellTypes.Materials, neighbours)\n  )\n  console.log('added essential materials', essentialMaterials)\n\n  if (size > 5) {\n    const essentialMountain = randomWalkUpdate(neighbours =>\n      buildCell(CellTypes.Mountain, neighbours)\n    )\n    console.log('added essential mountain', essentialMountain)\n  }\n\n  console.log('doing poisson stuff...')\n\n  const desertRate = 1.5\n  const pDesert = new Poisson([size, size], size / desertRate)\n  pDesert\n    .fill()\n    .map(point => getPos(Math.round(point[0]), Math.round(point[1])))\n    .forEach(pos => {\n      if (grid[pos] && grid[pos].cellType === CellTypes.Undecided) {\n        // clump the desert cells together on von neumann neighbourhood\n        // alternate direction of pill shapes\n        let neighbours = [\n          up,\n          down,\n          left,\n          right,\n          ...randomChoice([[upright, downleft], [downright, upleft]])\n        ].map(fn => fn(pos))\n\n        let desertCount = 0\n        for (let neighbour of neighbours) {\n          if (neighbour && neighbour.cellType === CellTypes.Undecided) {\n            grid[neighbour.pos] = {\n              ...grid[neighbour.pos],\n              ...buildCell(CellTypes.Desert)\n            }\n            desertCount += 1\n          }\n        }\n        // oasis :)\n        grid[pos] = {\n          ...grid[pos],\n          ...buildCell(desertCount === 6 ? CellTypes.Lagoon : CellTypes.Desert)\n        }\n      }\n    })\n\n  const pMountains = new Poisson([size, size], size / 4)\n  pMountains\n    .fill()\n    .map(point => getPos(Math.round(point[0]), Math.round(point[1])))\n    .forEach(pos => {\n      let noOtherMountains =\n        [left, right, up, down]\n          .map(fn => fn(pos))\n          .filter(nn => nn == undefined || nn.cellType === CellTypes.Mountain)\n          .length === 0\n\n      if (\n        grid[pos] &&\n        grid[pos].cellType === CellTypes.Undecided &&\n        noOtherMountains\n      ) {\n        grid[pos] = { ...grid[pos], ...buildCell(CellTypes.Mountain, []) } // todo\n        let neighbours = [upright(pos), downleft(pos)]\n        for (let neighbour of neighbours) {\n          if (neighbour && neighbour.cellType === CellTypes.Undecided) {\n            let others = [up, down, left, right].map(fn => fn(neighbour.pos))\n            let noOtherMountains =\n              others.filter(\n                nn => nn == undefined || nn.cellType === CellTypes.Mountain\n              ).length === 0\n            if (noOtherMountains) {\n              grid[neighbour.pos] = {\n                ...grid[neighbour.pos],\n                ...buildCell(CellTypes.Mountain, [])\n              } // todo\n            }\n          }\n        }\n      }\n    })\n\n  const pGrass = new Poisson([size, size], size / 8)\n  pGrass\n    .fill()\n    .map(point => getPos(Math.round(point[0]), Math.round(point[1])))\n    .forEach(pos => {\n      if (grid[pos] && grid[pos].cellType === CellTypes.Undecided) {\n        grid[pos] = { ...grid[pos], ...buildCell(CellTypes.Grass) }\n      }\n    })\n\n  console.log('filling remaining cells')\n\n  grid.forEach(cell => {\n    if (cell.cellType === CellTypes.Undecided) {\n      grid[cell.pos] = {\n        ...cell,\n        ...buildCell(\n          randomChoice([\n            CellTypes.Food,\n            CellTypes.Materials,\n            CellTypes.Lagoon,\n           // CellTypes.Undecided\n          ])\n        )\n      }\n    }\n  })\n\n  console.log('generated grid', grid)\n  return grid\n}\n\nexport { generateGrid }\n","import React, { useState, useEffect } from 'react'\nimport { CellTypes } from './Properties'\nimport { generateGrid } from './GenerateGrid'\nimport { GridPositions } from './Utils'\nimport { ResourceTypes } from './scattershell-common/Resources'\n\nconst countActivated = grid =>\n  grid.reduce((acc, cell) => acc + (cell.activated ? 1 : 0), 0)\n\nconst getActivatedNeighbours = (pos, grid, size) => {\n  const { up, down, left, right } = GridPositions(grid, size)\n  return [up(pos), down(pos), left(pos), right(pos)].filter(\n    x => x && x.activated\n  )\n}\n\nconst checkConnected = (grid, size) => {\n  /*\n  Check if the user's cells are connected,\n  i.e. there is a single component in the graph represented by the\n  activated cells and their neighbours.\n\n  Performs a breadth first search and then checks if there are any\n  activated unvisited cells remaining.\n  */\n  let queue = []\n  let visited = {}\n  let current = null\n  const activatedCells = grid.filter(cell => cell.activated)\n\n  if (activatedCells[0]) queue.push(activatedCells[0].pos)\n  else return true\n\n  while (queue.length > 0) {\n    current = queue.shift()\n    if (!visited[current]) {\n      visited[current] = true\n      let neighbours = getActivatedNeighbours(current, grid, size)\n      for (let neighbour of neighbours) {\n        queue.push(neighbour.pos)\n      }\n    }\n  }\n\n  // are there are any active cells that do not have their pos in visited?\n  return grid.filter(cell => cell.activated && !visited[cell.pos]).length === 0\n}\n\nfunction useGrid (size) {\n  // for (let i = 0; i < 100; i++) { generateGrid(size); }\n  const [grid, setGrid] = useState(() => generateGrid(size))\n\n  const gridByRow = grid.reduce(\n    (rows, item) => {\n      let head = rows[rows.length - 1]\n      return head.length === size\n        ? [...rows, [item]]\n        : [...rows.slice(0, rows.length - 1), [...head, item]]\n    },\n    [[]]\n  )\n\n  const maxActives = size + Math.floor(size / 2)\n  const remainingActives = maxActives - countActivated(grid)\n  const noneActivated = remainingActives === maxActives \n\n  const getPos = (x, y) => y * size + x\n\n  const updateCell = (x, y, update) => {\n    setGrid(prevGrid => {\n      return checkValid(x, y, update, prevGrid, false)\n    })\n  }\n\n  const checkValid = (x, y, update, grid, check) => {\n    const pos = getPos(x, y)\n    const target = grid[pos]\n\n    // ensure an update would not lead to a disconnected graph.\n    if (target !== undefined) {\n      let updatedGrid = [...grid]\n      updatedGrid[pos] = { ...target, ...update }\n\n      return checkConnected(updatedGrid, size)\n        ? check\n          ? true\n          : updatedGrid\n        : check\n          ? false\n          : grid\n    } else {\n      return check ? false : grid\n    }\n  }\n\n  const cellCanActivate = (x, y) =>\n    remainingActives > 0 &&\n    (noneActivated || cellHasActivatedNeighbour(x, y))\n\n  const cellCanDeactivate = (x, y) => {\n    return checkValid(x, y, { activated: false }, grid, true)\n  }\n\n  const cellHasActivatedNeighbour = (x, y) => {\n    const pos = getPos(x, y)\n    return getActivatedNeighbours(pos, grid, size).length > 0\n  }\n\n  const clearGrid = () => {\n    setGrid(prevGrid => prevGrid.map(cell => ({ ...cell, activated: false })))\n  }\n\n  /* Message conditions */\n  let messages = []\n\n  const { up, down, left, right } = GridPositions(grid, size)\n\n  const oneSettlementActivated =\n    grid.filter(\n      cell => cell.activated && cell.cellType === CellTypes.Settlement\n    ).length > 0\n  const lagoonWithFourNeighbours =\n    grid.filter(cell => {\n      if (cell.activated && cell.cellType === CellTypes.Lagoon) {\n        const activatedNeighbours = [\n          up(cell.pos),\n          down(cell.pos),\n          left(cell.pos),\n          right(cell.pos)\n        ].filter(n => n && n.activated)\n        if (activatedNeighbours.length === 4) return true\n      } else {\n        return false\n      }\n    }).length > 0\n\n  if (oneSettlementActivated || lagoonWithFourNeighbours) {\n    if (oneSettlementActivated) messages.push('✔ settlement')\n    if (lagoonWithFourNeighbours) messages.push('✔ lagoon with four neighbours')\n  } else {\n    messages.push(\n      `need settlement (${CellTypes.Settlement})${\n        size > 2 ? ' or lagoon (💧) with four neighbours' : ''\n      }`\n    )\n  }\n\n  if (size > 2) {\n    // all settlements must be adjacent to two activated cells\n    let settlements = grid.filter(\n      cell => cell.activated && cell.cellType === CellTypes.Settlement\n    )\n    let allHaveAdjacent =\n      settlements.filter(s => {\n        const activatedNeighbours = [\n          up(s.pos),\n          down(s.pos),\n          left(s.pos),\n          right(s.pos)\n        ].filter(n => n && n.activated)\n        return activatedNeighbours.length > 1\n      }).length === settlements.length && settlements.length > 0\n    if (allHaveAdjacent) {\n      messages.push('✔ settlements have at least two neighbours')\n    } else if (settlements.length > 0) {\n      messages.push('settlements need at least two neighbours')\n    }\n  }\n\n  if (size === 8) {\n    const mountainActivated =\n      grid.filter(\n        cell => cell.activated && cell.cellType === CellTypes.Mountain\n      ).length > 0\n    if (mountainActivated) messages.push('️✔ at least one mountain')\n    else messages.push(`need mountain (${CellTypes.Mountain})`)\n  }\n\n  /* Note conditions */\n\n  let notes = []\n\n  // how many non-activated cells are adjacent to more than one activated cell?\n\n  useEffect(\n    () => {\n      setGrid(grid =>\n        grid.map(cell => {\n          const { up, down, left, right } = GridPositions(grid, size)\n          const neighbours = [\n            ['u', up(cell.pos)],\n            ['d', down(cell.pos)],\n            ['l', left(cell.pos)],\n            ['r', right(cell.pos)]\n          ]\n          const activatedNeighbours = neighbours.filter(\n            n => n[1] && n[1].activated\n          )\n          return !cell.activated && activatedNeighbours.length > 1\n            ? {\n              ...cell,\n              harbour: activatedNeighbours.reduce((str, n) => str + n[0], '')\n            }\n            : { ...cell, harbour: false }\n        })\n      )\n    },\n    [grid.filter(c => c.activated).length]\n  )\n\n  const harbours = grid.filter(c => c.harbour).length\n  if (harbours > 0) {\n    notes.push(`${harbours} fishing harbour${harbours > 1 ? 's' : ''}`)\n  }\n\n  /*\n  const numFoodActivated = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Food\n  ).length\n  if (numFoodActivated === 0 && harbours === 0) {\n    notes.push('food may be hard to come by.')\n  } else if (numFoodActivated > 0) {\n    notes.push(`bountiful food x${numFoodActivated}`)\n  }\n\n  const numMaterialsActivated = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Materials\n  ).length\n  if (numMaterialsActivated === 0) {\n    notes.push('materials may be hard to come by.')\n  } else {\n    notes.push(`bountiful materials x${numMaterialsActivated}`)\n  }\n\n  const numGrasslands = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Grass\n  ).length\n  if (numGrasslands > 0) notes.push(`grasslands x${numGrasslands}`)\n\n  const numLagoons = grid.filter(\n    cell => cell.activated && cell.cellType === CellTypes.Lagoon\n  ).length\n  if (numLagoons > 0) notes.push(`lagoon x${numLagoons}`)\n*/\n\n  let stuff = {}\n  grid.forEach(cell => {\n    if (cell.activated && cell.contains && cell.contains.length > 0) {\n      cell.contains.forEach(\n        item => (stuff[item] = stuff[item] ? stuff[item] + 1 : 1)\n      )\n    }\n  })\n\n  if (Object.entries(stuff).length > 0 && harbours > 0) {\n    notes.push(<br />)\n  }\n\n  for (let [thing, num] of Object.entries(stuff)) {\n    notes.push(`${thing} ${num > 1 ? `x${num}` : ''}`)\n  }\n\n  return {\n    grid,\n    gridByRow,\n    checkConnected,\n    remainingActives,\n    noneActivated,\n    updateCell,\n    cellHasActivatedNeighbour,\n    cellCanActivate,\n    cellCanDeactivate,\n    clearGrid,\n    messages,\n    notes\n  }\n}\n\nexport { useGrid }\n","import { Cell } from './Cell'\nimport { useGrid } from './UseGrid'\nimport React, { useState } from 'react'\n\nfunction Grid (props) {\n  const { islandSize } = props\n  const {\n    gridByRow,\n    remainingActives,\n    noneActivated,\n    updateCell,\n    cellCanDeactivate,\n    cellCanActivate,\n    clearGrid,\n    messages,\n    notes\n  } = useGrid(islandSize)\n\n  const [dragging, setDragging] = useState(false)\n\n  return (\n    <div className={'game-container'}>\n      <div className={'grid-container'}>\n        <h2>{remainingActives}</h2>\n        <div className={'table-container'}>\n          <table>\n            {gridByRow.map((row, colN) => {\n              return (\n                <tr>\n                  {row.map((cell, rowN) => {\n                    return (\n                      <Cell\n                        cellType={cell.cellType}\n                        activated={cell.activated}\n                        harbour={cell.harbour}\n                        canActivate={cellCanActivate(rowN, colN)}\n                        canDeactivate={cellCanDeactivate(rowN, colN)}\n                        onActivate={() =>\n                          updateCell(rowN, colN, { activated: true })\n                        }\n                        onDeactivate={() =>\n                          updateCell(rowN, colN, { activated: false })\n                        }\n                        noneActivated={noneActivated}\n                        allActivated={remainingActives === 0}\n                        dragging={dragging}\n                        setDragging={setDragging}\n                      />\n                    )\n                  })}\n                </tr>\n              )\n            })}\n          </table>\n        </div>\n\n        <div className={'info'}>\n          <ul className={'messages'}>\n            {messages.map((message, i) => (\n              <li key={`${i}${new Date().getTime()}`}>{message}</li>\n            ))}\n          </ul>\n          <ul className={'notes'}>\n            {notes.map((note, i) => (\n              <li key={`${i}${new Date().getTime()}`}>{note}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <a\n        href='#'\n        onClick={e => {\n          e.preventDefault()\n          clearGrid()\n        }}\n      >\n        restart\n      </a>\n    </div>\n  )\n}\n\nexport { Grid }\n","import React from 'react'\nimport './App.css'\nimport { Grid } from './Grid'\nimport { IslandSizes } from './Properties'\n\nfunction App () {\n  return (\n    <div className='App'>\n      {<Grid islandSize={IslandSizes.Tiny} />}\n      {<Grid islandSize={IslandSizes.Small} />}\n      {<Grid islandSize={IslandSizes.Medium} />}\n      {<Grid islandSize={IslandSizes.Large} />}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}