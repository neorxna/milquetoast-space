{"version":3,"sources":["Theme.js","Resources.js","IslandProperties.js","Locations.js","IslandResources.js","ActionValidation.js","State.js","Actions.js","Game.js","IslandDetails.js","IslandActions.js","IslandVoyages.js","Island.js","Map.js","Engine.js","GameMeters.js","Progress.js","Messages.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Colors","Deep","Med","Shallow","Light","Outline","Green","Disabled","Gold","fa","icon","_len","arguments","length","props","Array","_key","react_default","a","createElement","index_es","Object","assign","fabricIcons","icons","chevrondown","i","chevronright","More","Cancel","Plus","checkmark","ResourceTypes","Shellfish","Fish","Pigs","Birds","BushFood","Coconuts","RootVegetables","PreciousShells","FreshWater","Flax","Bamboo","SturdyWood","FruitTrees","Guano","IsGardenFood","_IsGardenFood","defineProperty","RequiresGathering","_RequiresGathering","IsDispersible","_IsDispersible","FoodPerResources","_FoodPerResources","WoodPerResources","_WoodPerResources","IslandTypes","IslandDescriptions","_IslandDescriptions","IslandIllustrations","_IslandIllustrations","IslandMaxPopulations","_IslandMaxPopulations","DevelopmentLevel","Undeveloped","Burgeoning","Developed","HighlyDeveloped","Advanced","paths","neighbourDistance","source","filter","_ref","_ref2","slicedToArray","reduce","obj","_ref3","_ref4","b","dist","objectSpread","loc","name","type","x","y","resources","id","map","res","neighbours","keys","ScattershellLocations","Shell Cove","Great Arc","Morrigan","The Crook","Fivestone","Elder","Younger","Mother","Father","Twinstone","Birdstar","Last Hope","Island of Pearls","Obsidian Point","Gull's Rest","Old Crone","The Splinter","Afallon","The Pip","Brightreach","IslandResources","island","population","numGardens","className","foodQty","woodQty","title","concat","wasDispersed","other","requiresGathering","requiresGatheringSatisfied","isDispersible","key","repeat","validateAction","actionType","game","islandId","populationRequired","player","islands","actionCosts","ActionCosts","populationMet","met","text","toConsumableArray","food","wood","energy","foodCost","woodCost","energyCost","foodDiff","woodDiff","energyDiff","checkCosts","updateGameState","resourceChanges","islandUpdateFn","willSpend","free","previous","woodΔ","foodΔ","energyΔ","windΔ","world","wind","check","Δ","undefined","updatedPlayer","Math","min","insufficient","playerUpdate","abort","islandsUpdate","update","islandProperty","islandName","updateFn","previousIslands","arriveVoyage","fromName","voyage","toName","numPeople","NumVoyagers","previousTo","previousFrom","scatterings","toLocation","maxPopulation","bonusPopulation","totalPopulationLimit","maxPop","dispersibleResources","ActionTypes","LaunchFleet","resource","indexOf","dispersed","randomChoice","toResources","isDiscovered","worldTick","worldFn","previousWorld","day","dayOfWeek","weekOfYear","year","launchVoyage","task","fn","isBeginning","cost","Actions","numVoyagers","LaunchOutrigger","AddPerson","AddDwelling","AddSettlement","AddGarden","AddTemple","SpendEnergy","_ActionCosts","finishVoyage","destinationIsDiscovered","to","isInhospitable","successMsg","rocksMsg","getVoyageDuration","getVoyageName","_Actions","beginStateChange","foodScore","sum","woodScore","endStateChange","finishMessage","emoji","validate","getDuration","getName","State","hasSettlement","islandLocation","maxPopulationReached","numDwellings","MaxDwellings","isMaxDwellings","SettlementRequiredPeople","MaxGardens","isMaxGardens","hasTemple","floor","random","calculateResourcesPerTick","resourceType","hasGatherers","PerResources","getsGuanoBonus","total","horitculturalBonus","guanoBonus","islandsDetails","state","StartingLocation","_NumVoyagers","InitialWorldState","season","Winter","Spring","Summer","Harvest","Rainy","InitialGameState","numTreasures","initialIslandState","IslandDetails","foodPerTick","woodPerTick","developmentLevelForIsland","IslandAction","children","onActionClicked","hide","action","requirements","allRequirementsMet","reqs","Link","onClick","disabled","styles","root","isDisabled","color","IslandActionsList","doAction","VoyageChoicesList","progress","voyagableNeighbours","neighbourName","items","item","destName","Fragment","n","_objectSpread2","distance","style","marginBottom","borderTop","Island","islandActions","unexploredIslands","src","defaultScattershellMapProps","places","isActive","isBig","baseMarkerOptions","fill","fillStyle","hachureAngle","roughness","stroke","fillWeight","bowing","activePlaceOptions","strokeWidth","inactivePlaceOptions","pathOptions","sizes","_sizes","ScattershellMap","_defaultScattershellM","lineOptions","currentIsland","xOffset","yOffset","opts","righties","svgRef","useRef","renderMap","svg","rc","rough","draw","SVG","values","forEach","place","marker","markerOptions","circleOpts","circle","placeMarker","appendChild","link","font","family","size","anchor","on","setCurrentIsland","labelMarker","place1","place2","fromId","toId","line","useEffect","current","reRender","lastChild","removeChild","discoveries","entries","_ref5","ref","tickInterval","useScattershellEngine","messageProvider","progressProvider","_useState","useState","_useState2","gameState","setGameState","_useState3","_useState4","deltas","setDeltas","clearOneMessage","postMessage","add","onFinished","duration","tick","newWood","newFood","newEnergy","newWind","GameMeter","qty","interpolator","useSpring","from","config","web","span","interpolate","num","round","numeral","format","deltaView","GameMeters","ProgressStatus","ProgressStatusItem","roundedPct","ProgressIndicator","label","description","percentComplete","Messages","messages","messaging","Calendar","VERSION","intervalDuration","registerIcons","loadTheme","typography","families","default","fonts","large","fontFamily","xLarge","xxLarge","superLarge","mega","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","App","setMessages","msg","live","useMessaging","setItems","isVoyage","useProgress","_useScattershellEngin","callback","delay","savedCallback","setInterval","clearInterval","useInterval","Fabric","marginTop","Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc680dfc.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as i from '@fortawesome/free-solid-svg-icons'\nimport React from 'react'\n\nconst Colors = {\n  Deep: '#121258',\n  Med: '#5ba9ff',\n  Shallow: '#7ccbff',\n  Light: '#f3f1f1',\n  Outline: '#000d16',\n  Green: '#00b842',\n  Disabled: '#8d8d8d',\n  Gold: '#f1da37'\n}\n\nconst fa = (icon, ...props) => {\n  return <FontAwesomeIcon icon={icon} {...props} />\n}\n\nconst fabricIcons = {\n  icons: {\n    chevrondown: fa(i.faChevronDown),\n    chevronright: fa(i.faChevronRight),\n    More: fa(i.faEllipsisH),\n    Cancel: fa(i.faTimes),\n    Plus: fa(i.faPlus),\n    checkmark: fa(i.faCheck)\n  }\n}\n\nconst fabricTheme = {\n  typography: {\n    families: {\n      default: 'Open Sans'\n    }\n  },\n  fonts: {\n    large: {\n      fontFamily: 'Open Sans'\n    },\n    xLarge: {\n      fontFamily: 'Open Sans'\n    },\n    xxLarge: {\n      fontFamily: 'Open Sans'\n    },\n    superLarge: {\n      fontFamily: 'Open Sans'\n    },\n    mega: {\n      fontFamily: 'Open Sans'\n    }\n  },\n  palette: {\n    themePrimary: '#5ba9ff',\n    themeLighterAlt: '#04070a',\n    themeLighter: '#0f1b29',\n    themeLight: '#1c334d',\n    themeTertiary: '#376699',\n    themeSecondary: '#5196e0',\n    themeDarkAlt: '#6cb3ff',\n    themeDark: '#83bfff',\n    themeDarker: '#a4d0ff',\n    neutralLighterAlt: '#111157',\n    neutralLighter: '#111155',\n    neutralLight: '#101052',\n    neutralQuaternaryAlt: '#0f0f4c',\n    neutralQuaternary: '#0f0f49',\n    neutralTertiaryAlt: '#0e0e46',\n    neutralTertiary: '#f6f5f5',\n    neutralSecondary: '#f8f6f6',\n    neutralPrimaryAlt: '#f9f8f8',\n    neutralPrimary: '#f3f1f1',\n    neutralDark: '#fcfbfb',\n    black: '#fdfdfd',\n    white: '#121258'\n  }\n}\n\nexport { Colors, fabricTheme, fabricIcons }\n","const ResourceTypes = {\n  Shellfish: 'shellfish',\n  Fish: 'fish',\n  Pigs: 'pigs',\n  Birds: 'birds',\n  BushFood: 'bush food',\n  Coconuts: 'coconuts',\n  RootVegetables: 'root vegetables',\n  PreciousShells: 'precious shells',\n  FreshWater: 'fresh water',\n  Flax: 'flax',\n  Bamboo: 'bamboo',\n  SturdyWood: 'sturdy wood',\n  FruitTrees: 'fruit trees',\n  Guano: 'guano'\n}\n\nconst IsGardenFood = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: false,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: false,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: false,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: false,\n  [ResourceTypes.FruitTrees]: true,\n  [ResourceTypes.Guano]: false\n}\n\nconst RequiresGathering = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: false,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: true,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: true,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: true,\n  [ResourceTypes.FruitTrees]: false,\n  [ResourceTypes.Guano]: false\n}\n\nconst IsDispersible = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: true,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: true,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: false,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: false,\n  [ResourceTypes.FruitTrees]: true,\n  [ResourceTypes.Guano]: true\n}\n\nconst FoodPerResources = {\n  [ResourceTypes.Shellfish]: 2,\n  [ResourceTypes.Fish]: 3,\n  [ResourceTypes.Pigs]: 2,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 3,\n  [ResourceTypes.Coconuts]: 2,\n  [ResourceTypes.RootVegetables]: 1,\n  [ResourceTypes.PreciousShells]: 0,\n  [ResourceTypes.FreshWater]: 2,\n  [ResourceTypes.Flax]: 0,\n  [ResourceTypes.Bamboo]: 1,\n  [ResourceTypes.SturdyWood]: 0,\n  [ResourceTypes.FruitTrees]: 2,\n  [ResourceTypes.Guano]: 0\n}\n\nconst WoodPerResources = {\n  [ResourceTypes.Shellfish]: 1,\n  [ResourceTypes.Fish]: 0,\n  [ResourceTypes.Pigs]: 1,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 0,\n  [ResourceTypes.Coconuts]: 2,\n  [ResourceTypes.RootVegetables]: 0,\n  [ResourceTypes.PreciousShells]: 2,\n  [ResourceTypes.FreshWater]: 0,\n  [ResourceTypes.Flax]: 3,\n  [ResourceTypes.Bamboo]: 2,\n  [ResourceTypes.SturdyWood]: 2,\n  [ResourceTypes.FruitTrees]: 1,\n  [ResourceTypes.Guano]: 2\n}\n\nconst Boons = {}\nconst Burdens = {}\n\nexport {\n  ResourceTypes,\n  FoodPerResources,\n  WoodPerResources,\n  Boons,\n  Burdens,\n  RequiresGathering,\n  IsDispersible,\n  IsGardenFood\n}\n","const IslandTypes = {\n  Rocks: 'rocky',\n  Guano: 'guano',\n  Small: 'small',\n  Medium: 'medium',\n  Large: 'large'\n}\n\nconst IslandDescriptions = {\n  [IslandTypes.Rocks]:\n    'You are disappointed to find an inhospitable outcrop of rocks in the middle of the ocean.',\n  [IslandTypes.Guano]:\n    'This place is covered in guano, hospitable only to the many gulls that dwell here.',\n  [IslandTypes.Small]: 'You look out upon a modest but hospitable island.',\n  [IslandTypes.Medium]:\n    'You are relieved to find a hospitable and plentiful island.',\n  [IslandTypes.Large]:\n    'You are thankful to the gods to find a massive volcanic island, capable of sustaining a large population.'\n}\n\nconst IslandIllustrations = {\n  [IslandTypes.Rocks]: '/island_types/rock_cropped.png',\n  [IslandTypes.Guano]: '/island_types/gull3_cropped.png',\n  [IslandTypes.Small]: '/island_types/shells_cropped.png',\n  [IslandTypes.Medium]: '/island_types/coconuts_cropped.png',\n  [IslandTypes.Large]: '/island_types/volcano_cropped.png'\n}\n\nconst IslandMaxPopulations = {\n  [IslandTypes.Rocks]: 0,\n  [IslandTypes.Guano]: 5,\n  [IslandTypes.Small]: 10,\n  [IslandTypes.Medium]: 25,\n  [IslandTypes.Large]: 50\n}\n\nconst DevelopmentLevel = {\n  Undeveloped: 'undeveloped',\n  Burgeoning: 'burgeoning',\n  Developed: 'developed',\n  HighlyDeveloped: 'highly developed',\n  Advanced: 'advanced'\n}\n\nexport {\n  IslandTypes,\n  IslandDescriptions,\n  IslandIllustrations,\n  IslandMaxPopulations,\n  DevelopmentLevel\n}\n","import { IslandTypes } from './IslandProperties'\nimport { ResourceTypes } from './Resources';\n\nconst paths = [\n  ['Morrigan', 'The Crook', 16],\n  ['The Crook', 'Morrigan', 16],\n  ['Morrigan', 'Great Arc', 20],\n  ['Great Arc', 'Morrigan', 20],\n  ['Fivestone', 'The Crook', 14],\n  ['The Crook', 'Fivestone', 14],\n  ['Shell Cove', 'Great Arc', 12],\n  ['Great Arc', 'Shell Cove', 12],\n  ['The Splinter', 'Great Arc', 25],\n  ['Great Arc', 'The Splinter', 25],\n  ['Great Arc', 'The Pip', 40], // no way back!\n  ['The Pip', 'The Splinter', 15],\n  ['The Splinter', 'The Pip', 15],\n  ['Afallon', 'The Splinter', 22],\n  ['The Splinter', 'Afallon', 22],\n  ['Brightreach', 'The Splinter', 23],\n  ['The Splinter', 'Brightreach', 23],\n  ['Afallon', 'The Pip', 7],\n  ['The Pip', 'Afallon', 7],\n  ['Brightreach', 'The Pip', 13],\n  ['The Pip', 'Brightreach', 13],\n  ['Birdstar', 'The Pip', 25],\n  ['The Pip', 'Birdstar', 25],\n  ['Brightreach', 'Afallon', 12],\n  ['Afallon', 'Brightreach', 12],\n  ['Old Crone', 'Birdstar', 20],\n  ['Birdstar', 'Old Crone', 20],\n  ['Gull\\'s Rest', 'Shell Cove', 22],\n  ['Shell Cove', 'Gull\\'s Rest', 22],\n  ['Mother', 'Shell Cove', 28],\n  ['Shell Cove', 'Mother', 28],\n  ['Elder', 'Shell Cove', 30],\n  ['Shell Cove', 'Elder', 30],\n  ['Younger', 'Mother', 15],\n  ['Mother', 'Younger', 15],\n  ['Father', 'Mother', 10],\n  ['Mother', 'Father', 10],\n  ['Twinstone', 'Mother', 11],\n  ['Mother', 'Twinstone', 11],\n  ['Obsidian Point', 'Gull\\'s Rest', 13],\n  ['Gull\\'s Rest', 'Obsidian Point', 13],\n  ['Last Hope', 'Obsidian Point', 30],\n  ['Obsidian Point', 'Last Hope', 30],\n  ['Island of Pearls', 'Obsidian Point', 29],\n  ['Obsidian Point', 'Island of Pearls', 29],\n  ['Island of Pearls', 'Last Hope', 9],\n  ['Last Hope', 'Island of Pearls', 9],\n]\n\nconst neighbourDistance = source => {\n  let pathsForSource = paths.filter(([a, b, dist]) => source === a)\n  let neighbours = pathsForSource.reduce((obj, [a,b,dist]) => {\n    return {...obj, [b]: dist}\n  }, {})\n  return neighbours\n}\n\nconst loc = (name, type, x, y, resources) => ({\n  id: name,\n  name,\n  x,\n  y,\n  type,\n  resources: resources.map(res => ResourceTypes[res]),\n  neighbours: Object.keys(neighbourDistance(name)),\n  neighbourDistance: neighbourDistance(name)\n})\n\nconst ScattershellLocations = {\n  'Shell Cove': loc('Shell Cove', IslandTypes.Small, 63, 49, [\n    'PreciousShells',\n    'Fish'\n  ]),\n  'Great Arc': loc('Great Arc', IslandTypes.Large, 56, 58, [\n    'Flax',\n    'Bamboo',\n    'BushFood',\n    'SturdyWood'\n  ]),\n  'Morrigan': loc('Morrigan', IslandTypes.Medium, 46, 75, [\n    'Fish',\n    'RootVegetables',\n    'BushFood',\n    'Flax'\n  ]),\n  'The Crook': loc('The Crook', IslandTypes.Small, 34, 87, [\n    'Shellfish',\n    'Fish',\n    'PreciousShells'\n  ]),\n  Fivestone: loc('Fivestone', IslandTypes.Rocks, 23, 93, []),\n  'Elder': loc('Elder', IslandTypes.Rocks, 87, 55, []),\n  'Younger': loc('Younger', IslandTypes.Guano, 95, 48, [\n    'Guano',\n    'Birds'\n  ]),\n  Mother: loc('Mother', IslandTypes.Medium, 86, 60, [\n    'Flax',\n    'Birds',\n    'PreciousShells',\n    'BushFood'\n  ]),\n  Father: loc('Father', IslandTypes.Medium, 95, 60, [\n    'Bamboo',\n    'Fish',\n    'Pigs',\n    'SturdyWood'\n  ]),\n  'Twinstone': loc('Twinstone', IslandTypes.Rocks, 92, 70, []),\n  Birdstar: loc('Birdstar', IslandTypes.Guano, 40, 30, ['Guano', 'Birds']),\n  'Last Hope': loc('Last Hope', IslandTypes.Large, 97, 8, [\n    'Shellfish',\n    'Birds',\n    'SturdyWood',\n    'FreshWater',\n    'FruitTrees'\n  ]),\n  'Island of Pearls': loc('Island of Pearls', IslandTypes.Small, 98, 18, [\n    'PreciousShells',\n    'Shellfish',\n    'Coconuts'\n  ]),\n  'Obsidian Point': loc('Obsidian Point', IslandTypes.Rocks, 73, 19, []),\n  \"Gull's Rest\": loc(\"Gull's Rest\", IslandTypes.Guano, 70, 30, [\n    'Guano',\n    'Birds'\n  ]),\n  'Old Crone': loc('Old Crone', IslandTypes.Medium, 40, 10, [\n    'Coconuts',\n    'RootVegetables',\n    'Pigs',\n    'BushFood'\n  ]),\n  'The Splinter': loc('The Splinter', IslandTypes.Rocks, 33, 55, []),\n  Afallon: loc('Afallon', IslandTypes.Large, 14, 45, [\n    'FruitTrees',\n    'FreshWater',\n    'SturdyWood',\n    'Birds',\n    'Pigs'\n  ]),\n  'The Pip': loc('The Pip', IslandTypes.Small, 22, 47, [\n    'FruitTrees',\n    'Fish',\n    'SturdyWood'\n  ]),\n  Brightreach: loc('Brightreach', IslandTypes.Medium, 23, 35, [\n    'PreciousShells',\n    'FreshWater',\n    'Flax',\n    'Shellfish'\n  ])\n}\n\nexport { ScattershellLocations }\n","import React from 'react'\nimport {\n  FoodPerResources,\n  WoodPerResources,\n  IsDispersible,\n  RequiresGathering,\n  IsGardenFood,\n  ResourceTypes\n} from './Resources'\nimport { ScattershellLocations } from './Locations'\n\nfunction IslandResources(props) {\n  const { island } = props\n  const { resources, name, population, numGardens } = island\n  return (\n    <section className={'current-island-resources'}>\n      {resources.length === 0 ? (\n        'Nothing to use.'\n      ) : (\n        <ul>\n          {resources.map(res => {\n            const foodQty = FoodPerResources[res]\n            const woodQty = WoodPerResources[res]\n            const title = `${foodQty} food, ${woodQty} materials per day ${\n              numGardens > 0 && IsGardenFood[res]\n                ? `plus ${numGardens} food from gardens`\n                : ''\n            }`\n            const wasDispersed =\n              ScattershellLocations[island.name].resources.filter(\n                other => other === res\n              ).length === 0\n\n            const requiresGathering = RequiresGathering[res]\n            const requiresGatheringSatisfied =\n              requiresGathering && population >= 5 ? '✔' : null\n            const isDispersible = IsDispersible[res]\n            return (\n              <li title={title} key={`${res}`}>\n                <b>{res}</b> {'⚒️'.repeat(woodQty)} {'🥝'.repeat(foodQty)}{' '}\n                {numGardens > 0 && IsGardenFood[res]\n                  ? '🥬'.repeat(numGardens)\n                  : ''}\n                {requiresGathering || isDispersible ? (\n                  <ul className={'current-island-resources-details'}>\n                    <li>\n                      {requiresGathering\n                        ? '- requires 5 people to gather'\n                        : null}\n                      {requiresGatheringSatisfied}\n                    </li>\n                    <li>{isDispersible ? '- dispersible' : null}</li>\n                    <li>{wasDispersed ? '- was dispersed here' : null }</li>\n                    <li>{res===ResourceTypes.Guano ? '- will provide bonus to garden' : null}</li>\n                  </ul>\n                ) : null}\n              </li>\n            )\n          })}\n        </ul>\n      )}\n    </section>\n  )\n}\n\nexport { IslandResources }\n","import { IslandMaxPopulations } from './IslandProperties'\nimport { MaxDwellings, MaxGardens, SettlementRequiredPeople } from './Game'\nimport { ActionCosts, ActionTypes } from './Actions'\n\nfunction checkCosts(player, actionCosts) {\n  const { food, wood, energy } = player\n\n  const foodCost = actionCosts['foodΔ']\n  const woodCost = actionCosts['woodΔ']\n  const energyCost = actionCosts['energyΔ']\n\n  const foodDiff = food + foodCost\n  const woodDiff = wood + woodCost\n  const energyDiff = energy + energyCost\n\n  return [\n    foodCost == null\n      ? null\n      : foodDiff >= 0\n      ? { met: true, text: `${-foodCost} food ✔` }\n      : { met: false, text: `not enough food (need ${-foodDiff})` },\n    woodCost == null\n      ? null\n      : woodDiff >= 0\n      ? { met: true, text: `${-woodCost} materials ✔` }\n      : { met: false, text: `not enough materials (need ${-woodDiff})` },\n    energyCost == null\n      ? null\n      : energyDiff >= 0\n      ? { met: true, text: `${-energyCost} energy ✔` }\n      : { met: false, text: `not enough energy (need ${-energyDiff})` }\n  ].filter(x => x != null)\n}\n\nfunction validateAction(actionType, game, islandId, populationRequired) {\n  const { player, islands } = game\n  const island = islands[islandId]\n  const { population } = island\n\n  const actionCosts = ActionCosts[actionType]\n\n  const populationMet =\n    populationRequired == null\n      ? null\n      : population >= populationRequired\n      ? { met: true, text: `${populationRequired} people ✔` }\n      : {\n          met: false,\n          text: `not enough people (need ${populationRequired -\n            population} more)`\n        }\n\n  return [...checkCosts(player, actionCosts), populationMet].filter(\n    x => x != null\n  )\n}\n\nconst validateLaunchOutrigger = (game, islandId, task) =>\n  validateAction(ActionTypes.LaunchOutrigger, game, islandId, 2)\n\nconst validateLaunchFleet = (game, islandId, task) =>\n  task.isBeginning\n    ? [{ met: true }]\n    : validateAction(ActionTypes.LaunchFleet, game, islandId, 5)\n\nconst validateAddPerson = (game, islandId) => {\n  const { islands } = game\n  const island = islands[islandId]\n  const { type, population } = island\n  const maxPopulationReached = population === IslandMaxPopulations[type]\n  // todo settlement required\n  return [\n    ...validateAction(ActionTypes.AddPerson, game, islandId),\n    {\n      met: !maxPopulationReached,\n      text: maxPopulationReached ? 'max population reached' : ''\n    }\n  ]\n}\n\nconst validateAddDwelling = (game, islandId) => {\n  const { islands } = game\n  const island = islands[islandId]\n  const { numDwellings } = island\n  const isMaxDwellings = numDwellings === MaxDwellings\n  return [\n    ...validateAction(ActionTypes.AddDwelling, game, islandId),\n    {\n      met: !isMaxDwellings,\n      text: isMaxDwellings ? 'max dwellings built here' : ''\n    }\n  ]\n}\n\nconst validateAddSettlement = (game, islandId) =>\n  validateAction(ActionTypes.AddSettlement, game, islandId, SettlementRequiredPeople)\n\n// todo requires settlement\nconst validateAddTemple = (game, islandId) =>\n  validateAction(ActionTypes.AddTemple, game, islandId)\n\n// todo requires settlement\nconst validateAddGarden = (game, islandId) => {\n  const { islands } = game\n  const island = islands[islandId]\n  const { numGardens } = island\n  const isMaxGardens = numGardens === MaxGardens\n  return [\n    ...validateAction(ActionTypes.AddGarden, game, islandId, 5),\n    {\n      met: !isMaxGardens,\n      text: isMaxGardens ? 'max gardens planted here' : ''\n    }\n  ]\n}\n\nexport {\n  validateAddDwelling,\n  validateAddGarden,\n  validateAddPerson,\n  validateAddSettlement,\n  validateAddTemple,\n  validateLaunchFleet,\n  validateLaunchOutrigger\n}\n","import {\n  WoodPerResources,\n  FoodPerResources,\n  IsDispersible,\n  IsGardenFood\n} from './Resources'\nimport { ScattershellLocations } from './Locations'\nimport { IslandMaxPopulations } from './IslandProperties'\nimport {\n  MaxDwellings,\n  MaxGardens,\n  NumVoyagers,\n  calculateResourcesPerTick,\n  randomChoice,\n  SettlementRequiredPeople\n} from './Game'\nimport { Actions, ActionTypes, ActionCosts } from './Actions'\n\nfunction spendEnergy(id, task, fn) {\n  return previous => {\n    const { player } = previous\n    const location = ScattershellLocations[id]\n    const { resources } = location\n    const { energy, food, wood } = player\n\n    const foodScore = resources.reduce(\n      (sum, resource) => sum + FoodPerResources[resource],\n      0\n    )\n    const woodScore = resources.reduce(\n      (sum, resource) => sum + WoodPerResources[resource],\n      0\n    )\n\n    const playerUpdate = {\n      ...player,\n      food: food + foodScore * energy,\n      wood: wood + woodScore * energy,\n      energy: 0\n    }\n\n    return {\n      ...previous,\n      player: playerUpdate\n    }\n  }\n}\n\nfunction updateGameState(resourceChanges, islandUpdateFn, willSpend, free) {\n  return previous => {\n    const { woodΔ, foodΔ, energyΔ, windΔ } = resourceChanges\n    const { player, islands, world } = previous\n    const { wood, food, wind, energy } = player\n\n    // for negative Δs, only update if we have enough\n    const check = (x, Δ) => {\n      let bad = x + Δ < 0\n      return bad || Δ == undefined ? x : x + Δ\n    }\n\n    const updatedPlayer = {\n      wood: check(wood, woodΔ),\n      food: check(food, foodΔ),\n      wind: Math.min(check(wind, windΔ), 100), // 100 = max wind\n      energy: check(energy, energyΔ)\n    }\n\n    const insufficient =\n      (woodΔ && updatedPlayer.wood === wood) ||\n      (foodΔ && updatedPlayer.food === food) ||\n      (windΔ && updatedPlayer.wind === wind) ||\n      (energyΔ && updatedPlayer.energy === energy)\n\n    let playerUpdate = { ...player, ...(updatedPlayer || {}) }\n    let abort = islandUpdateFn != undefined && islandUpdateFn(islands) === false\n\n    let islandsUpdate =\n      islandUpdateFn == undefined ? islands : islandUpdateFn(islands)\n\n    if (!insufficient && willSpend != undefined && !abort) willSpend()\n    let update = {\n      ...previous,\n      player: playerUpdate,\n      islands: islandsUpdate\n    }\n\n    // if all required amounts were spent, or the txn is free, apply the update\n    return (!insufficient || free) && !abort ? update : previous\n  }\n}\n\nconst islandProperty = (islandName, updateFn) => {\n  return previousIslands => {\n    const island = previousIslands[islandName]\n    const update = updateFn(island)\n    return {\n      ...previousIslands,\n      [islandName]: {\n        ...island,\n        ...update\n      }\n    }\n  }\n}\n\nconst beginAddPerson = (islandName, task, fn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddPerson],\n    previousIslands => {\n      const island = previousIslands[islandName]\n      const { population, bonusPopulation, hasSettlement } = island\n      const islandLocation = ScattershellLocations[islandName]\n\n      const maxPopulation = IslandMaxPopulations[islandLocation.type]\n      const totalPopulationLimit = bonusPopulation + maxPopulation\n\n      return population === totalPopulationLimit || !hasSettlement\n        ? false\n        : previousIslands\n    },\n    fn\n  )\n\nconst endAddPerson = islandName =>\n  updateGameState(\n    {},\n    islandProperty(islandName, island => ({\n      population: island.population + 1\n    }))\n  )\n\n// TODO use action validators\n\nconst beginAddDwelling = (islandName, task, fn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddDwelling],\n    previousIslands => {\n      const island = previousIslands[islandName]\n      const { numDwellings, hasSettlement } = island\n\n      return numDwellings === MaxDwellings || !hasSettlement\n        ? false\n        : previousIslands\n    },\n    fn\n  )\n\nconst endAddDwelling = islandName =>\n  updateGameState(\n    {},\n    islandProperty(islandName, ({ numDwellings, bonusPopulation }) => ({\n      numDwellings: numDwellings + 1,\n      bonusPopulation: bonusPopulation + 5\n    }))\n  )\n\nconst beginAddSettlement = (islandName, task, fn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddSettlement],\n    previousIslands => {\n      const island = previousIslands[islandName]\n      const { population } = island\n      // requires N people on the island\n      return population < SettlementRequiredPeople ? false : previousIslands\n    },\n    fn\n  )\n\nconst endAddSettlement = (islandName, task) =>\n  updateGameState(\n    {},\n    islandProperty(islandName, island => ({\n      hasSettlement: true\n    }))\n  )\n\nconst beginAddTemple = (islandName, task, fn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddTemple],\n    previousIslands => {\n      const island = previousIslands[islandName]\n      const { population } = island\n      // requires 5 people on the island\n      return population < 5 ? false : previousIslands\n    },\n    fn\n  )\n\nconst endAddTemple = islandName =>\n  updateGameState(\n    {},\n    islandProperty(islandName, island => ({\n      hasTemple: true\n    }))\n  )\n\n// TODO generic begin validator\nconst beginAddGarden = (islandName, task, fn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddGarden],\n    previousIslands => {\n      // requires 3 people and not islands > 5\n      const island = previousIslands[islandName]\n      const { numGardens } = island\n      const isMaxGardens = numGardens === MaxGardens\n      return isMaxGardens ? false : previousIslands\n    },\n    fn\n  )\n\nconst endAddGarden = islandName =>\n  updateGameState(\n    {},\n    islandProperty(islandName, island => {\n      const { numGardens } = island\n      return {\n        numGardens: numGardens + 1\n      }\n    })\n  )\n/*\n  when an island is discovered via voyage, the voyaging people seed the island's population.\n  - unless the destination is a rocky island, in which case the people are lost.\n  - a fleet of people is needed to establish a settlement.\n  - a settlement allows the population to be increased by clicking 'add person'\n  - the safe choice is to launch an outrigger first to scout, then a fleet to populate \n  \n*/\nfunction arriveVoyage(fromName, voyage) {\n  const { toName, actionType } = voyage\n  const numPeople = NumVoyagers[actionType]\n  return updateGameState(\n    {},\n    previousIslands => {\n      const previousTo = previousIslands[toName]\n      const previousFrom = previousIslands[fromName] || {\n        scatterings: [],\n        resources: []\n      }\n\n      // ensure we don't go over the max population of the destination\n      const toLocation = ScattershellLocations[toName]\n      const maxPopulation = IslandMaxPopulations[toLocation.type]\n\n      const { bonusPopulation } = previousTo\n      const { resources } = previousFrom\n\n      const totalPopulationLimit = bonusPopulation + maxPopulation\n      const maxPop = previousTo.population + numPeople >= totalPopulationLimit\n\n      // if there are any dispersible resources on the island and voyage is fleet,\n      // transfer one at random to the destination island\n      // only transfer resources that don't already exist on destination\n      const dispersibleResources =\n        actionType === ActionTypes.LaunchFleet\n          ? resources.filter(\n              resource =>\n                IsDispersible[resource] &&\n                previousTo.resources.indexOf(resource) === -1\n            )\n          : []\n\n      const dispersed =\n        dispersibleResources.length > 0 ? randomChoice(dispersibleResources) : null\n\n      const toResources = [...previousTo.resources, dispersed].filter(\n        x => x != null\n      )\n\n      return {\n        ...previousIslands,\n        [toName]: {\n          ...previousTo,\n          isDiscovered: true,\n          resources: toResources,\n          scatterings: [...previousFrom.scatterings],\n          population: maxPop\n            ? previousTo.population\n            : previousTo.population + numPeople\n        }\n      }\n    },\n    null,\n    true // free\n  )\n}\n\nfunction gameTick(fn) {\n  return previous => {\n    const { player, islands } = previous\n    const { wood, food, energy, wind } = player\n\n    let foodΔ = 0,\n      woodΔ = 0,\n      energyΔ = 1,\n      windΔ = Math.floor(Math.random() * 21) - 10\n\n    // only give resources for discovered islands with at least one person\n    Object.entries(islands)\n      .filter(([id, island]) => island.isDiscovered && island.population > 0)\n      .forEach(([id, island]) => {\n        foodΔ += calculateResourcesPerTick('food', island)\n        woodΔ += calculateResourcesPerTick('wood', island)\n        foodΔ -= island.population\n        // bonus energy if island has temple\n        energyΔ += island.hasTemple ? 1 : 0\n      })\n\n    fn({ foodΔ, woodΔ, energyΔ, windΔ })\n\n    const newWood = wood + woodΔ,\n      newFood = food + foodΔ,\n      newEnergy = energy + energyΔ,\n      newWind = Math.min(100, wind + windΔ)\n\n    // don't let anything go below zero\n    return {\n      ...previous,\n      player: {\n        ...player,\n        wood: newWood < 0 ? 0 : newWood,\n        food: newFood < 0 ? 0 : newFood,\n        energy: newEnergy < 0 ? 0 : newEnergy,\n        wind: newWind < 0 ? 0 : newWind\n      }\n    }\n  }\n}\n\nconst updateWorldState = worldFn => previous => {\n  const { world } = previous\n  return {\n    ...previous,\n    world: worldFn(world)\n  }\n}\n\nconst worldTick = () =>\n  updateWorldState(previousWorld => {\n    let { day, dayOfWeek, weekOfYear, year } = previousWorld\n    return {\n      day: day + 1,\n      dayOfWeek: dayOfWeek === 7 ? 1 : dayOfWeek + 1, // 1-7\n      weekOfYear:\n        weekOfYear === 52 ? 1 : dayOfWeek === 7 ? weekOfYear + 1 : weekOfYear, // 1-52\n      year: weekOfYear === 52 ? year + 1 : year\n    }\n  })\n\nfunction launchVoyage(fromName, task, fn) {\n  const { actionType, toName, isBeginning } = task\n\n  const removePopulationFrom = previousIslands => {\n    // remove the population from source island\n    let previousFrom = previousIslands[fromName]\n    let numVoyagers = NumVoyagers[actionType]\n    let enough = previousFrom.population >= numVoyagers\n\n    // make sure we have enough people on the fromIsland\n    return enough\n      ? {\n          ...previousIslands,\n          [fromName]: {\n            ...previousFrom,\n            population: previousFrom.population - numVoyagers\n          }\n        }\n      : false\n  }\n\n  const { cost } = Actions[actionType]\n  const voyageCost = isBeginning ? {} : cost\n  const voyageUpdate = isBeginning ? x => x : removePopulationFrom\n  return updateGameState(voyageCost, voyageUpdate, fn)\n}\n\nexport {\n  gameTick,\n  worldTick,\n  arriveVoyage,\n  launchVoyage,\n  spendEnergy,\n  beginAddGarden,\n  beginAddDwelling,\n  beginAddPerson,\n  beginAddSettlement,\n  beginAddTemple,\n  endAddDwelling,\n  endAddPerson,\n  endAddSettlement,\n  endAddGarden,\n  endAddTemple\n}\n","import { ScattershellLocations } from './Locations'\nimport {\n  validateAddDwelling,\n  validateAddGarden,\n  validateAddPerson,\n  validateAddSettlement,\n  validateAddTemple,\n  validateLaunchFleet,\n  validateLaunchOutrigger\n} from './ActionValidation'\nimport * as State from './State'\nimport { IslandTypes } from './IslandProperties'\n\nconst ActionTypes = {\n  LaunchOutrigger: 'launch outrigger',\n  LaunchFleet: 'launch fleet',\n  AddPerson: 'new child',\n  AddDwelling: 'build dwelling',\n  AddSettlement: 'raise settlement',\n  AddGarden: 'plant garden',\n  AddTemple: 'build temple',\n  SpendEnergy: 'accept offerings'\n}\n\nconst ActionCosts = {\n  [ActionTypes.LaunchOutrigger]: {\n    woodΔ: -25,\n    foodΔ: -50,\n    energyΔ: -10\n  },\n  [ActionTypes.LaunchFleet]: {\n    woodΔ: -100,\n    foodΔ: -200,\n    energyΔ: -20\n  },\n  [ActionTypes.AddPerson]: {\n    foodΔ: -50,\n    energyΔ: -25\n  },\n  [ActionTypes.AddDwelling]: {\n    woodΔ: -100\n  },\n  [ActionTypes.AddSettlement]: {\n    woodΔ: -250\n  },\n  [ActionTypes.AddGarden]: {\n    woodΔ: -500\n  },\n  [ActionTypes.AddTemple]: {\n    woodΔ: -1000,\n    foodΔ: -1000,\n    energyΔ: -100\n  }\n}\n\nconst finishVoyage = (fromName, task) => {\n  const { toName, numPeople, actionType, destinationIsDiscovered } = task\n\n  const to = ScattershellLocations[toName]\n  const isInhospitable = to.type === IslandTypes.Rocks\n\n  const successMsg = destinationIsDiscovered\n    ? `The voyage disembarked safely.`\n    : `A ${to.type} island was discovered!`\n  \n  const rocksMsg = `An inhospitable outcrop of rocks was encountered. The ${numPeople} voyagers perished.`\n  const msg = `The voyage from ${fromName} arrived at ${toName}. ${\n    isInhospitable ? rocksMsg : successMsg\n  }`\n  return msg\n}\n\nconst getVoyageDuration = task => {\n  const { fromName, toName, isBeginning } = task\n  return isBeginning\n    ? 10\n    : ScattershellLocations[fromName].neighbourDistance[toName] * 10\n}\n\nconst getVoyageName = task => {\n  const {\n    actionType,\n    destinationIsDiscovered,\n    fromName,\n    toName,\n    isBeginning\n  } = task\n  return isBeginning\n    ? `Voyage to ${toName}`\n    : `Voyage from ${fromName} to ${\n        destinationIsDiscovered ? toName : 'a rumored land'\n      }`\n}\n\nconst Actions = {\n  [ActionTypes.SpendEnergy]: {\n    text: 'accept offerings',\n    beginStateChange: State.spendEnergy,\n    endStateChange: () => {},\n    finishMessage: () => {},\n    emoji: '⚡',\n    validate: () => [{ met: true }],\n    getDuration: () => {},\n    getName: () => {}\n  },\n  [ActionTypes.LaunchOutrigger]: {\n    text: 'launch outrigger',\n    beginStateChange: State.launchVoyage,\n    endStateChange: State.arriveVoyage,\n    finishMessage: finishVoyage,\n    emoji: '⛵',\n    cost: ActionCosts[ActionTypes.LaunchOutrigger],\n    validate: validateLaunchOutrigger,\n    getDuration: getVoyageDuration,\n    getName: getVoyageName\n  },\n  [ActionTypes.LaunchFleet]: {\n    text: 'launch fleet',\n    beginStateChange: State.launchVoyage,\n    endStateChange: State.arriveVoyage,\n    finishMessage: finishVoyage,\n    emoji: '⛵',\n    cost: ActionCosts[ActionTypes.LaunchFleet],\n    validate: validateLaunchFleet,\n    getDuration: getVoyageDuration,\n    getName: getVoyageName\n  },\n  [ActionTypes.AddPerson]: {\n    text: 'spawn person',\n    beginStateChange: State.beginAddPerson,\n    endStateChange: State.endAddPerson,\n    emoji: '👶',\n    finishMessage: (islandName, task) => `a child was born in ${islandName}!`,\n    cost: ActionCosts[ActionTypes.AddPerson],\n    validate: validateAddPerson,\n    getDuration: () => 20,\n    getName: task => `person`\n  },\n  [ActionTypes.AddDwelling]: {\n    text: 'build dwelling',\n    emoji: '🏠',\n    cost: ActionCosts[ActionTypes.AddDwelling],\n    beginStateChange: State.beginAddDwelling,\n    endStateChange: State.endAddDwelling,\n    finishMessage: (islandName, task) =>\n      `a dwelling was built in ${islandName}!`,\n    // todo settlement required\n    validate: validateAddDwelling,\n    getDuration: () => 20,\n    getName: task => `dwelling`\n  },\n  [ActionTypes.AddSettlement]: {\n    // todo already has settlement\n    text: 'raise settlement',\n    beginStateChange: State.beginAddSettlement,\n    endStateChange: State.endAddSettlement,\n    emoji: '🏠',\n    finishMessage: (islandName, task) =>\n      `a settlement was raised in ${islandName}!`,\n    cost: ActionCosts[ActionTypes.AddSettlement],\n    validate: validateAddSettlement,\n    getDuration: () => 40,\n    getName: task => `settlement`\n  },\n\n  [ActionTypes.AddGarden]: {\n    text: 'plant garden',\n    beginStateChange: State.beginAddGarden,\n    endStateChange: State.endAddGarden,\n    emoji: '🥬',\n    finishMessage: (islandName, task) =>\n      `a garden was planted in ${islandName}!`,\n    cost: ActionCosts[ActionTypes.AddGarden],\n    validate: validateAddGarden,\n    getDuration: () => 40,\n    getName: task => `garden`\n  },\n\n  [ActionTypes.AddTemple]: {\n    text: 'build temple',\n    emoji: '🙏',\n    beginStateChange: State.beginAddTemple,\n    endStateChange: State.endAddTemple,\n    cost: ActionCosts[ActionTypes.AddGarden],\n    finishMessage: (islandName, task) => `a temple was built in ${islandName}!`,\n    validate: validateAddTemple,\n    getDuration: () => 100,\n    getName: task => `temple`\n  }\n}\n\nexport { Actions, ActionCosts, ActionTypes }\n","import { DevelopmentLevel, IslandMaxPopulations } from './IslandProperties'\nimport { ScattershellLocations } from './Locations'\nimport {\n  WoodPerResources,\n  FoodPerResources,\n  RequiresGathering,\n  ResourceTypes,\n  IsGardenFood\n} from './Resources'\nimport { ActionTypes } from './Actions'\n\nconst randomChoice = x => x[Math.floor(Math.random() * x.length)]\nconst SettlementRequiredPeople = 2\n\nfunction developmentLevelForIsland(island) {\n  // max population reached and treasures found\n  /*if (island.numTreasures === 10 && island.hasTemple) {\n    return DevelopmentLevel.Advanced\n  }\n  if (island.hasTemple || island.numTreasures > 5) {\n    return DevelopmentLevel.HighlyDeveloped\n  }*/\n\n  const { hasTemple, numGardens, population, numDwellings } = island\n\n  if (hasTemple && numGardens === MaxGardens && numDwellings === MaxDwellings) {\n    return DevelopmentLevel.Advanced\n  }\n\n  // max population reached\n  if (population === IslandMaxPopulations[island.type]) {\n    return DevelopmentLevel.Developed\n  }\n  //max population not yet reached\n  if (population >= 5) {\n    return DevelopmentLevel.Burgeoning\n  }\n  return DevelopmentLevel.Undeveloped\n}\n\nfunction calculateResourcesPerTick(resourceType, island) {\n  const { population, resources, numGardens } = island\n  const PerResourcesForResourceType = {\n    wood: WoodPerResources,\n    food: FoodPerResources\n  }\n  const hasGatherers = population >= 5\n  const PerResources = PerResourcesForResourceType[resourceType]\n\n  // for every garden, add a point for horticultural resources\n  const getsGuanoBonus =\n    resources.filter(resource => resource === ResourceTypes.Guano).length > 0\n\n  return population === 0\n    ? 0\n    : resources.reduce((total, resource) => {\n        const horitculturalBonus = IsGardenFood[resource] ? numGardens : 0\n        const guanoBonus = horitculturalBonus > 0 && getsGuanoBonus ? 2 : 0\n        return (\n          total +\n          (!RequiresGathering[resource] ||\n          (RequiresGathering[resource] && hasGatherers)\n            ? PerResources[resource] + horitculturalBonus + guanoBonus\n            : 0)\n        )\n      }, 0)\n}\n\nconst islandsDetails = islands => {\n  const islandNames = Object.keys(ScattershellLocations)\n  return islandNames.reduce((obj, key) => {\n    const loc = ScattershellLocations[key]\n    const state = islands ? islands[key] : {}\n    return { ...obj, [key]: { ...loc, ...state } }\n  }, {})\n}\n\nconst StartingLocation = ScattershellLocations.Morrigan.name\n\nconst NumVoyagers = {\n  [ActionTypes.LaunchOutrigger]: 2,\n  [ActionTypes.LaunchFleet]: 5\n}\n\nconst Seasons = {\n  Winter: 'winter',\n  Spring: 'spring',\n  Summer: 'summer',\n  Harvest: 'harvest'\n}\n\nconst initialIslandState = islandId => ({\n  population: 0,\n  hasTemple: false,\n  hasSettlement: false,\n  isDiscovered: false,\n  scatterings: [],\n  resources: ScattershellLocations[islandId].resources,\n  numDwellings: 0,\n  numTreasures: 0,\n  bonusPopulation: 0,\n  numGardens: 0\n})\n\nconst InitialPlayerState = {\n  wood: 0,\n  food: 0,\n  wind: 0,\n  energy: 0\n}\n\nconst InitialWorldState = {\n  day: 1,\n  dayOfWeek: 1, // 1-7\n  weekOfYear: 1, // 1-52\n  season: Seasons.Rainy,\n  year: 1\n}\n\nconst InitialGameState = {\n  islands: Object.keys(ScattershellLocations).reduce(\n    (obj, islandId) => ({ ...obj, [islandId]: initialIslandState(islandId) }),\n    {}\n  ),\n  player: InitialPlayerState,\n  world: InitialWorldState\n}\n\nconst MaxDwellings = 5\nconst MaxGardens = 5\n\nexport {\n  randomChoice,\n  developmentLevelForIsland,\n  islandsDetails,\n  calculateResourcesPerTick,\n  InitialGameState,\n  MaxDwellings,\n  MaxGardens,\n  Seasons,\n  NumVoyagers,\n  StartingLocation,\n  SettlementRequiredPeople\n}\n","import React from 'react'\nimport { calculateResourcesPerTick, developmentLevelForIsland } from './Game'\nimport { IslandMaxPopulations, IslandDescriptions } from './IslandProperties'\n\nfunction IslandDetails(props) {\n  const { island } = props\n  const {\n    name,\n    type,\n    population,\n    bonusPopulation,\n    numTreasures,\n    numDwellings,\n    numGardens,\n    hasSettlement,\n    hasTemple\n  } = island\n\n  const foodPerTick = calculateResourcesPerTick('food', island)\n  const woodPerTick = calculateResourcesPerTick('wood', island)\n\n  return (\n    <section className={'current-island-info'}>\n      <h3>{name}</h3>A <b>{type} island</b>\n      <p>\n        <i>{IslandDescriptions[type]}</i>\n      </p>\n      <ul>\n        <li>\n          <b>{developmentLevelForIsland(island)}</b>\n        </li>\n        <li>\n          Providing <b>{foodPerTick}</b> food, <b>{woodPerTick}</b> materials\n          per day\n        </li>\n        {hasSettlement ? (\n          <li>\n            <b>has settlement</b>\n          </li>\n        ) : null}\n        <li>\n          <b>{population}</b>/{IslandMaxPopulations[type]}{' '}\n          {bonusPopulation > 0 ? (\n            <b className={'bonus'}>+{bonusPopulation}</b>\n          ) : null}{' '}\n          population\n        </li>\n        <li>\n          <b>{numTreasures}</b>/10 treasures\n        </li>\n        <li>\n          <b>{numDwellings}</b>/5 dwellings\n        </li>\n        <li>\n          <b>{numGardens}</b>/5 gardens\n        </li>\n        {hasTemple ? (\n          <li>\n            <b>has temple</b>\n          </li>\n        ) : null}\n      </ul>\n    </section>\n  )\n}\n\nexport { IslandDetails }\n","import React from 'react'\nimport { Link } from 'office-ui-fabric-react'\nimport { Colors } from './Theme'\nimport { ActionTypes, Actions } from './Actions'\n\nfunction IslandAction(props) {\n  const { children, actionType, onActionClicked, hide, validate } = props\n  const action = Actions[actionType]\n\n  const { emoji, text } = action\n  const requirements = validate()\n  const allRequirementsMet =\n    requirements.filter(({ met }) => met).length === requirements.length\n\n  const reqs =\n    requirements.length > 0 ? (\n      <ul className={'requirements'}>{requirements.map(({ text }) => (text ? <li>{text}</li> : null))}</ul>\n    ) : null\n\n  return hide ? null : (\n    <li>\n      {emoji}\n      <Link\n        onClick={onActionClicked}\n        disabled={!allRequirementsMet}\n        styles={props => ({\n          root: props.isDisabled ? { color: Colors.Disabled } : {}\n        })}\n      >\n        {text}\n      </Link>\n      <div className={'island-options-details'}>{children}</div>\n      {reqs}\n    </li>\n  )\n}\n\nfunction IslandActionsList(props) {\n  const { game, island, doAction } = props\n  const { name, hasSettlement } = island\n\n  /* TODO hide actions if there is an incomplete progress item for the action */\n\n  return (\n    <ul className={'island-options measure'}>\n      <IslandAction\n        actionType={ActionTypes.SpendEnergy}\n        onActionClicked={() => {\n          doAction(ActionTypes.SpendEnergy, name, {})\n        }}\n        validate={() => Actions[ActionTypes.SpendEnergy].validate(game, name, {})}\n      >\n        <p>\n          Receive a bounty of food and materials from {name} in exchange for all of your current energy.\n          {/*You will receive <b>{}</b> materials\n          and <b>{}</b> food.*/}\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        actionType={ActionTypes.AddSettlement}\n        hide={hasSettlement}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddSettlement, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddSettlement].validate(game, name, {})}\n      >\n        <p>\n          Raise a settlement on {name}. At least <b>2 people</b> need to be\n          present on the island.\n        </p>\n        <p>\n          A settlement allows new structures to be built and children to be born\n          on the island.\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        hide={!hasSettlement}\n        actionType={ActionTypes.AddPerson}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddPerson, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddPerson].validate(game, name)}\n      >\n        <p>\n          Cause a child to be born on {name}. Uses <b>1 food per day</b> after\n          the initial cost.\n        </p>\n        <p>\n          You need people to explore other islands, upgrade your development\n          level and harvest certain resources. You need at least on {name} to get resources from here.\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        hide={!hasSettlement}\n        actionType={ActionTypes.AddDwelling}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddDwelling, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddDwelling].validate(game, name)}\n      >\n        <p>\n          Build a dwelling on {name} to house more people on this island. Up to\n          five dwellings can be built.\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        actionType={ActionTypes.AddGarden}\n        hide={!hasSettlement}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddGarden, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddGarden].validate(game, name)}\n      >\n        <p>\n          Plant a garden on {name} to harvest more bonus food per\n          day. Gardens can only be planted on islands with horticultural resources (<b>root vegetables</b> and <b>fruit trees</b>).\n          Up to five gardens can be planted.\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        hide={!hasSettlement}\n        actionType={ActionTypes.AddTemple}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddTemple, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddTemple].validate(game, name)}\n      >\n        <p>\n          Build a temple to find treasures to increase the prestige of {name}. \n          Once a temple is built, bonus energy will be received per day.\n        </p>\n        {/*<h5>scattering</h5>\n        <p style={{textDecoration:'line-through'}}>\n          Building a temple will bring forth a scattering: a blessing or burden\n          that will be carried by this island and its descendants (any islands\n          that are discovered from here).\n        </p> coming soon\n        <h5>treasures</h5>\n        <p style={{textDecoration:'line-through'}}>\n          Treasures will periodically appear when a temple is built. Acquire all\n          the treasures to maximise an island's development level.\n          </p> coming soon */}\n      </IslandAction>\n    </ul>\n  )\n}\n\nexport { IslandActionsList, IslandAction }\n","import React from 'react'\nimport { Link } from 'office-ui-fabric-react'\nimport { ActionTypes, Actions } from './Actions'\nimport { Colors } from './Theme'\nimport { IslandAction } from './IslandActions'\nimport { ScattershellLocations } from './Locations'\n\nfunction VoyageChoicesList(props) {\n  const { island, islands, progress, game, doAction } = props\n  const { name, neighbours } = island\n\n  /* allow voyages to neighbours that have a population less than 5  */\n  const voyagableNeighbours = neighbours.filter(\n    neighbourName =>\n      //!islands[neighbourName].isDiscovered &&\n      islands[neighbourName].population < 5 &&\n      progress.items.filter(item => item.destName === neighbourName).length ===\n        0\n  )\n\n  return (\n    <>\n      <section className={'voyage-hints'}>\n        <p className={'hint-text measure'}>\n          <h5>Outrigger</h5>\n          If the destination island is hospitable, it will be populated with the\n          2 voyagers.\n        </p>\n        <p className={'hint-text measure'}>\n          <h5>Fleet</h5>\n          If the destination island is hospitable, it will be populated with the\n          5 voyagers. If there are any dispersible resources on this island, one\n          will be chosen at random and transferred to the destination island.\n        </p>\n      </section>\n      <ul className={'voyages'}>\n        {voyagableNeighbours.map((toName, n) => {\n          const destination = islands[toName]\n          const { isDiscovered } = destination\n          const fromName = name\n          const distance =\n            ScattershellLocations[fromName].neighbourDistance[toName]\n          return (\n            <li\n              style={{\n                marginBottom: '1em',\n                marginBottom: '1em',\n                paddingTop: '1em',\n                ...(n > 0 ? { borderTop: `1px solid ${Colors.Outline}` } : {})\n              }}\n            >\n              <h4>\n                Voyage to {isDiscovered ? toName : 'an undiscovered land'} -{' '}\n                {distance} worlds away{' '}\n                {isDiscovered ? '(already discovered)' : ''}\n              </h4>\n              <br />\n              <IslandAction\n                actionType={ActionTypes.LaunchOutrigger}\n                onActionClicked={() => {\n                  doAction(ActionTypes.LaunchOutrigger, name, {\n                    actionType: ActionTypes.LaunchOutrigger,\n                    isBeginning: false,\n                    toName,\n                    fromName\n                  })\n                }}\n                validate={() =>\n                  Actions[ActionTypes.LaunchOutrigger].validate(game, name, {})\n                }\n              />\n              <IslandAction\n                actionType={ActionTypes.LaunchFleet}\n                onActionClicked={() => {\n                  doAction(ActionTypes.LaunchFleet, name, {\n                    actionType: ActionTypes.LaunchFleet,\n                    isBeginning: false,\n                    toName,\n                    fromName\n                  })\n                }}\n                validate={() =>\n                  Actions[ActionTypes.LaunchFleet].validate(game, name, {})\n                }\n              />\n            </li>\n          )\n        })}\n      </ul>\n    </>\n  )\n}\n\nexport { VoyageChoicesList }\n","import React from 'react'\nimport './App.css'\nimport { IslandResources } from './IslandResources'\nimport { IslandIllustrations } from './IslandProperties'\nimport { IslandDetails } from './IslandDetails'\nimport { IslandActionsList } from './IslandActions'\nimport { VoyageChoicesList } from './IslandVoyages'\n\nfunction Island(props) {\n  const { game, island, islands, player, world, doAction, progress } = props\n  const { type, name, resources, isDiscovered } = island\n\n  const islandActions = (\n    <section className={'current-island-options mv2'}>\n      <IslandActionsList\n        game={game}\n        island={island}\n        player={player}\n        world={world}\n        doAction={doAction}\n      />\n    </section>\n  )\n\n  const unexploredIslands = (\n    <section className={'current-island-expeditions mv2'}>\n      <h4>Voyages from {name}</h4>\n      <VoyageChoicesList\n        island={island}\n        islands={islands}\n        game={game}\n        progress={progress}\n        doAction={doAction}\n      />\n    </section>\n  )\n\n  return (\n    <div className={'current-island mv2'}>\n      <div className={'current-island-header'}>\n        <aside className={'current-island-illustration'}>\n          <figure>\n            <img src={IslandIllustrations[type]} />\n          </figure>\n        </aside>\n        <IslandDetails island={island} />\n        <IslandResources island={island} />\n      </div>\n      {isDiscovered ? islandActions : null}\n      {isDiscovered ? unexploredIslands : null}\n    </div>\n  )\n}\n\nexport { Island }\n","import React, { useRef, useEffect } from 'react'\nimport './App.css'\nimport * as SVG from 'svg.js'\nimport rough from 'roughjs/dist/rough.umd'\nimport { Colors } from './Theme'\nimport { IslandTypes } from './IslandProperties'\nimport { islandsDetails } from './Game'\n\nconst defaultScattershellMapProps = {\n  places: [\n    { id: 'a', x: 80, y: 120, name: 'A' },\n    {\n      id: 'b',\n      x: 200,\n      y: 100,\n      name: 'B',\n      isActive: true,\n      isBig: true\n    },\n    { id: 'c', x: 150, y: 250, name: 'C', isBig: true }\n  ],\n\n  //paths: [['a', 'b'], ['b', 'c']],\n\n  paths: [],\n  baseMarkerOptions: {\n    //stroke: Colors.Outline,\n    fill: Colors.Green, //Colors.Outline,\n    fillStyle: 'solid',\n    hachureAngle: 65,\n    roughness: 2,\n    stroke: 0,\n    fillWeight: 2,\n    bowing: 2\n  },\n\n  activePlaceOptions: {\n    fill: Colors.Green,\n    stroke: Colors.Light,\n    strokeWidth: 5\n  },\n\n  inactivePlaceOptions: {},\n  pathOptions: {},\n\n  sizes: {\n    [IslandTypes.Rocks]: 5,\n    [IslandTypes.Guano]: 10,\n    [IslandTypes.Small]: 15,\n    [IslandTypes.Medium]: 20,\n    [IslandTypes.Large]: 35\n  }\n}\n\nfunction ScattershellMap(props) {\n  const {\n    islands,\n    paths,\n    baseMarkerOptions,\n    activePlaceOptions,\n    inactivePlaceOptions,\n    lineOptions,\n    sizes,\n    currentIsland // string\n  } = {\n    ...defaultScattershellMapProps,\n    ...props\n  }\n\n  const xOffset = -40,\n    yOffset = 0\n\n  const opts = baseMarkerOptions\n\n  const righties = ['The Pip', 'Elder', 'Father']\n\n  const svgRef = useRef(null)\n\n  function renderMap(svg) {\n    const rc = rough.svg(svg)\n    const draw = SVG(svg) //svg.js draw\n\n    /* draw.click(event => {\n      let x = event.clientX - draw.parent.offsetLeft,\n        y = event.clientY - draw.parent.offsetTop\n      \n        console.log(x,y)\n    })*/\n\n    const placeMarker = ({ name, x, y, type, markerOptions }) => {\n      let circleOpts = {\n        ...opts,\n        ...(name === currentIsland ? activePlaceOptions : inactivePlaceOptions),\n        ...markerOptions\n      }\n      return rc.circle(\n        x * 5 + xOffset,\n        y * 5 + yOffset,\n        sizes[type],\n        circleOpts\n      )\n    }\n    const pathMarker = (place1, place2) =>\n      rc.line(place1.x, place1.y, place2.x, place2.y, {\n        ...opts,\n        ...lineOptions,\n        stroke: Colors.Light\n      })\n\n    const labelMarker = place => {\n      draw\n        .link('javascript:;')\n        .text(place.name)\n        .fill(Colors.Light)\n        .x(\n          place.x * 5 +\n            xOffset +\n            (righties.indexOf(place.name) !== -1 ? +25 + sizes[place.type] : 0)\n        )\n        .y(\n          place.y * 5 +\n            yOffset +\n            (righties.indexOf(place.name) !== -1\n              ? -8\n              : sizes[place.type] / 2 + 1)\n        ) //(place.isBig ? 30 : 20))\n        .font({\n          family: 'Open Sans',\n          size: 16,\n          anchor: 'middle'\n        })\n        .on('click', () => {\n          props.setCurrentIsland(place.name)\n        })\n    }\n\n    Object.values(islandsDetails(islands)).forEach(place => {\n      if (place.isDiscovered) {\n        let marker = placeMarker(place)\n        svg.appendChild(marker)\n        labelMarker(place)\n      }\n    })\n\n    paths.forEach(([fromId, toId]) => {\n      let marker = pathMarker(islands[fromId], islands[toId])\n      svg.appendChild(marker)\n    })\n  }\n\n  // Render initial\n  useEffect(() => {\n    let svg = svgRef.current\n    renderMap(svg)\n  }, [svgRef.current])\n\n  const reRender = () => {\n    let svg = svgRef.current\n    if (svg) {\n      while (svg.lastChild) {\n        svg.removeChild(svg.lastChild)\n      }\n      renderMap(svg)\n    }\n  }\n\n  // Re-render when islands are discovered or current island changes\n  const discoveries = Object.entries(islands).map(\n    ([name, place]) => place.isDiscovered\n  )\n\n  useEffect(reRender, discoveries)\n  useEffect(reRender, [currentIsland])\n\n  return <svg ref={svgRef} className={'map-svg'} />\n}\n\nexport default ScattershellMap\n","import React, { useState, useEffect } from 'react'\nimport { InitialGameState, StartingLocation } from './Game'\nimport { ActionTypes, Actions } from './Actions'\nimport { gameTick, worldTick, launchVoyage } from './State'\n\nconst tickInterval = 2000\n\nfunction useScattershellEngine(messageProvider, progressProvider) {\n  const [gameState, setGameState] = useState(InitialGameState)\n  const [deltas, setDeltas] = useState({\n    woodΔ: 0,\n    foodΔ: 0,\n    energyΔ: 0,\n    windΔ: 0\n  })\n\n  const { clearOneMessage, postMessage } = messageProvider\n\n  useEffect(() => {\n    // discover the starting island on game launch\n    doAction(ActionTypes.LaunchFleet, 'Beginning', {\n      toName: StartingLocation,\n      isBeginning: true,\n      actionType: ActionTypes.LaunchFleet\n    })\n  }, [])\n\n  const tick = () => {\n    // The game loop.\n    const { player } = gameState\n    const { wind } = player\n\n    setGameState(gameTick(deltas => setDeltas(deltas)))\n    setGameState(worldTick())\n    progressProvider.tick(wind)\n    clearOneMessage()\n  }\n\n  const doAction = (actionType, islandName, task) => {\n    const action = Actions[actionType]\n    const {\n      beginStateChange,\n      endStateChange,\n      finishMessage,\n      getDuration,\n      getName\n    } = action\n    setGameState(\n      beginStateChange(islandName, task, () => {\n        progressProvider.add({\n          ...action,\n          onFinished: () => {\n            setGameState(endStateChange(islandName, task))\n            postMessage(finishMessage(islandName, task))\n          },\n          actionType,\n          duration: getDuration(task),\n          name: getName(task),\n          progress: 0\n        })\n      })\n    )\n  }\n\n  return { gameState, doAction, tick, deltas }\n}\n\nexport { useScattershellEngine, tickInterval }\n","import React from 'react'\nimport { Colors } from './Theme'\nimport { useSpring, animated } from 'react-spring'\nimport { tickInterval } from './Engine'\nimport * as numeral from 'numeral'\n\nfunction GameMeter(props) {\n  const { qty, Δ, text } = props\n  const interpolator = useSpring({\n    qty,\n    from: { qty: qty - Δ },\n    config: { duration: tickInterval }\n  })\n  function deltaView(Δ) {\n    return Δ === 0 ? null : (\n      <span\n        className={'game-meter-delta'}\n        style={{ color: Δ > 0 ? Colors.Green : 'red' }}\n      >{`${Δ > 0 ? '+' : ''}${Δ}`}</span>\n    )\n  }\n\n  return (\n    <li>\n      <h4 className={'game-meter-number'}>\n        <animated.span>\n          {interpolator.qty.interpolate(x => {\n            const num = Math.round(x)\n            return num >= 1000 ? numeral(num).format('0.0a') : num\n          })}\n        </animated.span>{' '}\n        {deltaView(Δ)}\n      </h4>{' '}\n      {text}\n    </li>\n  )\n}\n\n/*<section>\n  <h3>total scores</h3>\n  <ul>\n    <li>islands discovered</li>\n    <li>population</li>\n    <li>dwellings</li>\n    <li>treasures</li>\n    <li>temples</li>\n  <0/ul>\n</section>*/\n\nfunction GameMeters(props) {\n  const { deltas, player } = props\n  const { wood, food, wind, energy } = player\n  const { woodΔ, foodΔ, energyΔ, windΔ } = deltas\n\n  return (\n    <section className={'game-meters-container'}>\n      <ul className={'game-meters'}>\n        <GameMeter qty={food} Δ={foodΔ} text={'food 🥝'} />\n        <GameMeter qty={wood} Δ={woodΔ} text={'materials ⚒️'} />\n        <GameMeter qty={energy} Δ={energyΔ} text={'energy ⚡'} />\n        <GameMeter qty={wind} Δ={windΔ} text={'wind 💨'} />\n      </ul>\n    </section>\n  )\n}\n\nexport { GameMeters }\n","import React, { useState } from 'react'\nimport { Actions, ActionTypes } from './Actions'\nimport { ProgressIndicator } from 'office-ui-fabric-react'\n\nfunction useProgress() {\n  const [items, setItems] = useState([])\n  const tick = wind => {\n    // if any progressItems have reached their duration, trigger them\n    items\n      .filter(x => x.progress >= x.duration)\n      .forEach(item => {\n        item.onFinished(item)\n      })\n\n    // update the state of any progressItems\n    // only put back the ones that are still not ready\n    setItems(previous =>\n      previous\n        .filter(x => x.progress < x.duration)\n        .map(item => {\n          const { duration, actionType } = item\n          const isVoyage =\n            actionType === ActionTypes.LaunchFleet ||\n            actionType === ActionTypes.LaunchOutrigger\n          const progress = item.progress + 1 + (isVoyage ? (0.05 * wind) : 0)\n          return {\n            ...item,\n            progress: progress > item.duration ? item.duration : progress\n          }\n        })\n    )\n  }\n\n  const add = item => setItems(previous => [...previous, item])\n  return { items, add, tick }\n}\n\nfunction ProgressStatus(props) {\n  const { progress } = props\n  const { items } = progress\n\n  return (\n    <section className={'journeys-container'}>\n      {items.length > 0 ? (\n        <ul>\n          {items.map(item => (\n            <ProgressStatusItem {...item} />\n          ))}\n        </ul>\n      ) : null}\n    </section>\n  )\n}\n\nfunction ProgressStatusItem(props) {\n  const { name, progress, duration, actionType, destName, text, emoji } = props\n  const roundedPct = Math.round((progress / duration) * 100)\n  return (\n    <li key={`${actionType}-${destName}`}>\n      <ProgressIndicator\n        className={'progress-status-item'}\n        label={`${emoji} ${text} (${roundedPct}%)`}\n        description={name}\n        percentComplete={progress / duration}\n      />\n    </li>\n  )\n}\n\nexport { useProgress, ProgressStatus }\n","import React, { useState } from 'react'\n\nfunction useMessaging() {\n  const [messages, setMessages] = useState([])\n\n  const postMessage = msg =>\n    setMessages(previous => [...previous, { live: 10, text: msg }])\n\n  const clearOneMessage = () =>\n    setMessages(previous =>\n      previous\n        .filter(msg => msg.live > 0)\n        .map(msg => ({ ...msg, live: msg.live - 1 }))\n    )\n\n  return { postMessage, messages, clearOneMessage }\n}\n\nfunction Messages(props) {\n  const { messaging } = props\n  const { messages } = messaging\n  return (\n    <section className={'messages-container'}>\n      <ul>\n        {messages.map(({ text }) => (\n          <li key={text}>{text}</li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport { useMessaging, Messages }\n","import React from 'react'\n\nfunction Calendar(props) {\n  const { world } = props\n  const { day, dayOfWeek, weekOfYear, year } = world\n  return (\n    <section className={'calendar-container'}>\n      <p>{`day ${day}, year ${year} (week ${weekOfYear}/52)`}</p>\n    </section>\n  )\n}\n\nexport { Calendar }","import React, { useState, useRef, useEffect } from 'react'\nimport { Fabric, registerIcons, loadTheme } from 'office-ui-fabric-react'\nimport './App.css'\nimport { fabricIcons, fabricTheme, Colors } from './Theme'\n\nimport { Island } from './Island'\nimport ScattershellMap from './Map'\nimport { GameMeters } from './GameMeters'\nimport { useScattershellEngine, tickInterval } from './Engine'\nimport { StartingLocation, islandsDetails } from './Game'\nimport { ProgressStatus, useProgress } from './Progress'\nimport { Messages, useMessaging } from './Messages'\nimport { Calendar } from './Calendar'\n\nconst VERSION = '0.7'\nconst intervalDuration = tickInterval\n\nconst json = _ => JSON.stringify(_, undefined, 4)\n\nregisterIcons(fabricIcons)\nloadTheme(fabricTheme)\n\n/* https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nfunction App() {\n  const messaging = useMessaging()\n  const progress = useProgress()\n\n  const { gameState, tick, doAction, deltas } = useScattershellEngine(\n    messaging,\n    progress\n  )\n  const { world, player } = gameState\n  // the island that is currently being viewed.\n  const [currentIsland, setCurrentIsland] = useState(StartingLocation)\n\n  // Set the game loop interval\n  useInterval(tick, intervalDuration)\n\n  const islands = islandsDetails(gameState.islands)\n  return (\n    <Fabric>\n      <main className={'game'}>\n        <aside className={'left'}>\n          <h2 className={'title title-subtitle'}>sailsongs of</h2>\n          <h1 className={'title title-title'} title={VERSION}>\n            scattershell\n          </h1>\n\n          <div className={'fixed'}>\n            <GameMeters deltas={deltas} player={player} />\n            <ProgressStatus progress={progress} />\n            <Messages messaging={messaging} />\n            <Calendar world={world} />\n          </div>\n\n          <section style={{marginTop:'8em'}}>\n            <ScattershellMap\n              islands={islands}\n              currentIsland={currentIsland}\n              setCurrentIsland={setCurrentIsland}\n            />\n          </section>\n        </aside>\n\n        <section className={'right'}>\n          <Island\n            game={gameState}\n            player={player}\n            island={islands[currentIsland]}\n            islands={islands}\n            progress={progress}\n            doAction={doAction}\n          />\n        </section>\n      </main>\n    </Fabric>\n  )\n}\n\nexport default App\n\n/* scatterings\n- slower/faster travel (harness wind)\n- slower/faster harvesting of {materials|food}\n- higher/lower population cost\n- intensive agriculture / intensive foraging / intensive fishing\n- trade routes / isolation\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}