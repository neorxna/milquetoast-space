{"version":3,"sources":["Island.js","App.js","serviceWorker.js","index.js"],"names":["IslandTypes","IslandDescriptions","_IslandDescriptions","Object","defineProperty","_IslandMaxPopulations","CurrentIsland","_props","props","objectSpread","defaultIslandProps","island","react_default","a","createElement","Fragment","className","name","hasTemple","trueName","type","href","neighbours","filter","neighbour","discovered","map","neighbourDistance","onClick","launchExpedition","location","x","y","resources","Great Ark","Shellcove","Holystone","population","numTreasures","numDwellings","Island","App","interval","_useState","useState","_useState2","slicedToArray","useEffect","setInterval","console","log","clearInterval","style","padding","source","dest","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c17cad8.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport './App.css'\n\nconst IslandTypes = {\n  Rocks: 'rocky',\n  Guano: 'guano',\n  Small: 'small',\n  Medium: 'medium',\n  Large: 'large'\n}\n\nconst IslandDescriptions = {\n  [IslandTypes.Rocks]:\n    'You are disappointed to find an inhospitable outcrop of rocks in the middle of the ocean.',\n  [IslandTypes.Guano]:\n    'This place is covered in guano, hospitable only to the many gulls that dwell here.',\n  [IslandTypes.Small]: 'You look out upon a modest but hospitable island.',\n  [IslandTypes.Medium]:\n    'You are relieved to find a plentiful and hospitable island.',\n  [IslandTypes.Large]:\n    'You are glad to the gods to find a massive volcanic island, capable of sustaining a large population.'\n}\n\nconst IslandMaxPopulations = {\n  [IslandTypes.Rocks]: 0,\n  [IslandTypes.Guano]: 25,\n  [IslandTypes.Small]: 100,\n  [IslandTypes.Medium]: 500,\n  [IslandTypes.Large]: 1000\n}\n\nconst DevelopmentLevel = {\n  Undeveloped: 0,\n  Burgeoning: 1,\n  Developed: 2,\n  HighlyDeveloped: 3,\n  Advanced: 4\n}\n\nconst developmentLevel = props => {\n  // max population reached and treasures found\n  if (props.numTreasures === 10 && props.hasTemple) {\n    return DevelopmentLevel.Advanced\n  }\n  if (props.hasTemple || props.numTreasures > 5) {\n    return DevelopmentLevel.HighlyDeveloped\n  }\n  // max population reached\n  if ((props.population = IslandMaxPopulations[props.type])) {\n    return DevelopmentLevel.Developed\n  }\n  //max population not yet reached\n  if (props.population > 5) {\n    return DevelopmentLevel.Burgeoning\n  }\n  return DevelopmentLevel.Undeveloped\n}\n\nfunction CurrentIsland(_props) {\n  const props = {\n    ...defaultIslandProps,\n    ..._props\n  }\n  const expeditionChoices = () => (\n    <ul>\n      {props.neighbours\n        .filter(neighbour => !neighbour.discovered)\n        .map(neighbour => (\n          <li>\n            Launch expedition to {neighbour}\n            <br />\n            <i>({props.neighbourDistance[neighbour]} km away</i>\n            <br />\n            <ul>\n              <li>\n                <a\n                  href={''}\n                  onClick={props.launchExpedition(\n                    props.name,\n                    neighbour,\n                    'outrigger'\n                  )}\n                >\n                  Launch outrigger\n                </a>{' '}\n                <b>(25 wood, 50 food, 2 people)</b>\n              </li>\n              <li>\n                <a\n                  href={''}\n                  onClick={props.launchExpedition(\n                    props.name,\n                    neighbour,\n                    'smallFleet'\n                  )}\n                >\n                  Launch small fleet\n                </a>{' '}\n                <b>(50 wood, 250 food, 5 people)</b>\n              </li>\n              <li>\n                <a\n                  href={''}\n                  onClick={props.launchExpedition(\n                    props.name,\n                    neighbour,\n                    'largeFleet'\n                  )}\n                >\n                  Launch large fleet\n                </a>{' '}\n                <b>(100 wood, 500 food, 10 people)</b>\n              </li>\n            </ul>\n          </li>\n        ))}\n    </ul>\n  )\n\n  const islandOptions = () => (\n    <ul className={'island-options'}>\n      <li>\n        <a href=';' className={'island-options-link'}>\n          spend energy\n        </a>\n        <div className={'island-options-details'}>\n          Use your current energy on this island to foster development.\n        </div>\n      </li>\n      <li>\n        <a href=';' className={'island-options-link'}>\n          build dwelling\n        </a>\n        <div className={'island-options-details'}>\n          Build a dwelling to house more people on this island. \n          Up to five dwellings can be built on this island.\n        </div>\n      </li>\n      <li>\n        <a href=';' className={'island-options-link'}>\n          build temple\n        </a>\n        <div className={'island-options-details'}>\n          <p>\n            Build a temple to find treasures to increase the prestige of the\n            island. Can only be built on a medium or larger island.\n          </p>\n          <p>\n            Building a temple will bring forth a boon or burden for this island\n            and its descendants.\n          </p>\n        </div>\n      </li>\n    </ul>\n  )\n\n  const island = props\n  return (\n    <>\n      <section className={'mv2 measure'}>\n        <h3>{island.name}</h3>\n        <ul>\n          <li>\n            <i>{island.hasTemple ? island.trueName : 'True name unknown'}</i>\n          </li>\n          <li>\n            A <b>{island.type} island</b>\n            <br />\n            <i>{IslandDescriptions[island.type]}</i>\n          </li>\n        </ul>\n        {islandOptions()}\n      </section>\n      <section className={'mv2'}>\n        <h4>Unexplored Islands</h4>\n        <i>\n          The wind and sea whisper rumors of nearby islands waiting to be\n          discovered.\n        </i>\n        {expeditionChoices()}\n      </section>\n    </>\n  )\n}\n\nconst defaultIslandProps = {\n  name: 'Birdstar',\n  trueName: 'Artheenkwas',\n  discovered: true,\n  location: { x: 5, y: 5 },\n  type: IslandTypes.Guano,\n  resources: [],\n  neighbours: ['Great Ark', 'Shellcove', 'Holystone'],\n  neighbourDistance: {\n    'Great Ark': 359,\n    Shellcove: 28,\n    Holystone: 62\n  },\n  population: 0,\n  numTreasures: 0,\n  numDwellings: 0,\n  hasTemple: false\n}\n\nfunction Island(_props) {\n  const props = {\n    ...defaultIslandProps,\n    ..._props\n  }\n\n  return <></>\n}\n\nexport { Island, CurrentIsland }\n","import React, { useState, useRef, useEffect } from 'react'\nimport './App.css'\nimport { Island, CurrentIsland } from './Island'\n\nconst json = _ => JSON.stringify(_, undefined, 4)\n\nconst Colors = {\n  Deep: '#121258',\n  Med: '#5ba9ff',\n  Shallow: '#7ccbff',\n  Light: '#f3f1f1',\n  Outline: '#000d16'\n}\n\nfunction App() {\n  let interval = null\n\n  const [wind, setWind] = useState(0)\n  const updateWind = () => {\n    let newWind = setWind()\n  }\n\n  const gameTick = () => {\n    console.log('game tick')\n  }\n\n  useEffect(() => {\n    interval = setInterval(gameTick, 500)\n    return () => {\n      clearInterval(interval)\n    }\n  })\n\n  /*\n  const [resources, setResources] = useState(\n    Object.keys(Resources).reduce((obj, key) => ({ ...obj, [key]: 0 }), {})\n  )\n\n  function spendResource(resourceName, amount) {\n    setResources({\n      ...resources,\n      [resourceName]: resources[resourceName] - amount\n    })\n  }*/\n\n  function launchExpedition(source, dest, type) {\n    return\n  }\n\n  return (\n    <main className={'game'}>\n      <aside className={'left'}>\n        <h2 className={'title title-subtitle'}>sailsongs of</h2>\n        <h1 className={'title title-title'}>scattershell</h1>\n\n        <section>\n          <ul style={{ padding: '0px' }}>\n            <li>\n              <a href=';'>new game</a>\n            </li>\n            <li>\n              <a href=';'>save game</a>\n            </li>\n          </ul>\n        </section>\n\n        <section>\n          <h3>energy</h3>\n          <h4>{}</h4>\n        </section>\n\n        <section>\n          <h3>total resources</h3>\n          <ul>\n            <li>wood</li>\n            <li>food</li>\n          </ul>\n        </section>\n\n        <section>\n          <h3>total scores</h3>\n          <ul>\n            <li>population</li>\n            <li>dwellings</li>\n            <li>treasures</li>\n            <li>temples</li>\n          </ul>\n        </section>\n      </aside>\n\n      <section className={'right'}>\n        <Island location={{ x: 5, y: 5 }} />\n        <br />\n        <CurrentIsland launchExpedition={launchExpedition} />\n      </section>\n    </main>\n  )\n}\n\nconst ResourceTypes = {\n  Shellfish: 'shellfish',\n  Fish: 'ocean fish',\n  Pigs: 'pigs',\n  Birds: 'birds',\n  BushFood: 'bush food',\n  Coconuts: 'coconuts',\n  RootVegetables: 'root vegetables',\n  PreciousShells: 'precious shells',\n  FreshWater: 'fresh water',\n  Flax: 'flax',\n  Bamboo: 'bamboo',\n  SturdyWood: 'sturdy wood'\n}\n\nconst Resources = {\n  Wood: 'wood',\n  Food: 'food'\n}\n// TODO\n\nconst ResourceTypeMultipliers = {}\nconst Boons = {}\nconst Burdens = {}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}