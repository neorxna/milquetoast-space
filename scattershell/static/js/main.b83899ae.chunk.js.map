{"version":3,"sources":["Resources.js","Theme.js","IslandProperties.js","Game.js","Island.js","Locations.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["ResourceTypes","Shellfish","Fish","Pigs","Birds","BushFood","Coconuts","RootVegetables","PreciousShells","FreshWater","Flax","Bamboo","SturdyWood","FruitTrees","Guano","RequiresGathering","_RequiresGathering","Object","defineProperty","IsDispersable","_IsDispersable","FoodPerResources","_FoodPerResources","WoodPerResources","_WoodPerResources","Colors","Deep","Med","Shallow","Light","Outline","Green","fa","icon","_len","arguments","length","props","Array","_key","react_default","a","createElement","index_es","assign","fabricIcons","icons","chevrondown","i","chevronright","More","Cancel","Plus","checkmark","IslandTypes","Rocks","Small","Medium","Large","IslandDescriptions","_IslandDescriptions","IslandIllustrations","_IslandIllustrations","IslandMaxPopulations","_IslandMaxPopulations","DevelopmentLevel","developmentLevelForIsland","island","numTreasures","hasTemple","population","type","Actions","LaunchOutrigger","LaunchFleet","ActionCosts","_ActionCosts","woodΔ","foodΔ","energyΔ","InitialIslandState","hasSettlement","isDiscovered","scatterings","numDwellings","bonusPopulation","InitialPlayerState","wood","food","wind","energy","InitialWorldState","day","dayOfWeek","weekOfYear","season","year","MaxDwellings","VoyageChoices","islands","launchVoyage","progressItems","voyagableNeighbours","neighbours","filter","neighbourName","progressItem","destName","className","map","n","neighbour","key","concat","style","objectSpread","marginBottom","paddingTop","borderTop","neighbourDistance","Link","onClick","name","disabled","CurrentIsland","addDwelling","addPerson","spendEnergy","addSettlement","canAddPerson","canAddDwelling","canAddSettlement","islandInfo","islandResources","resources","res","unexploredIslands","src","SpendEnergy","paths","source","_ref","_ref2","slicedToArray","reduce","obj","_ref3","_ref4","b","dist","loc","x","y","id","keys","ScattershellLocations","Shell Cove","Great Arc","Morrigan","The Crook","Fivestone","Elder","Younger","Mother","Father","Twinstone","Birdstar","Last Hope","Island of Pearls","Obsidian Point","Gull's Rest","Old Crone","The Splinter","Afallon","The Pip","Brightreach","defaultScattershellMapProps","places","isActive","isBig","baseMarkerOptions","fill","fillStyle","hachureAngle","roughness","stroke","fillWeight","bowing","activePlaceOptions","strokeWidth","inactivePlaceOptions","pathOptions","sizes","_sizes","ScattershellMap","_defaultScattershellM","lineOptions","currentIsland","xOffset","yOffset","_places","opts","righties","svgRef","useRef","renderMap","svg","rc","rough","draw","SVG","values","forEach","place","marker","markerOptions","circleOpts","circle","placeMarker","appendChild","link","text","indexOf","font","family","size","anchor","on","setCurrentIsland","labelMarker","place1","place2","fromId","toId","line","useEffect","current","console","log","discoveries","entries","_ref5","reRender","lastChild","removeChild","ref","VERSION","START_LOCATION","intervalDuration","registerIcons","loadTheme","typography","families","default","fonts","large","fontFamily","xLarge","xxLarge","superLarge","mega","palette","App","_useState","useState","_useState2","_useState3","_useState4","_useState5","_useState6","messages","setMessages","_useState7","windΔ","_useState8","deltas","setDeltas","_useState9","_useState10","setProgressItems","_useState11","player","world","_useState12","gameState","setGameState","_gameState$player","_useState13","_useState14","islandsWithStates","updateGameState","resourceChanges","islandUpdateFn","willSpend","free","previous","check","Δ","undefined","Math","min","insufficient","playerUpdate","abort","islandsUpdate","worldUpdate","postMessage","msg","toConsumableArray","live","setDiscovered","voyage","fromName","toName","numPeople","actiontype","to","isInhospitable","successMsg","rocksMsg","previousIslands","previousTo","previousFrom","calculatePerTick","PerResources","hasGatherers","total","resource","isInitial","_NumVoyagers","NumVoyagers","addProgressTask","duration","progress","action","numVoyagers","callback","delay","savedCallback","setInterval","clearInterval","useInterval","worldFn","floor","random","islandLocation","newWood","newFood","newEnergy","newWind","item","previousWorld","deltaView","color","journeys","round","gameMeters","messagesView","_ref6","_gameState$world","calendarView","Fabric","title","Map","islandName","_previous$player","foodScore","sum","woodScore","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAAMA,SAAgB,CACpBC,UAAW,YACXC,KAAM,OACNC,KAAM,OACNC,MAAO,QACPC,SAAU,YACVC,SAAU,WACVC,eAAgB,kBAChBC,eAAgB,kBAChBC,WAAY,cACZC,KAAM,OACNC,OAAQ,SACRC,WAAY,cACZC,WAAY,cACZC,MAAO,UAGHC,GAAiBC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EACpBhB,EAAcC,WAAY,GADNgB,OAAAC,EAAA,EAAAD,CAAAD,EAEpBhB,EAAcE,MAAO,GAFDe,OAAAC,EAAA,EAAAD,CAAAD,EAGpBhB,EAAcG,MAAO,GAHDc,OAAAC,EAAA,EAAAD,CAAAD,EAIpBhB,EAAcI,OAAQ,GAJFa,OAAAC,EAAA,EAAAD,CAAAD,EAKpBhB,EAAcK,UAAW,GALLY,OAAAC,EAAA,EAAAD,CAAAD,EAMpBhB,EAAcM,UAAW,GANLW,OAAAC,EAAA,EAAAD,CAAAD,EAOpBhB,EAAcO,gBAAiB,GAPXU,OAAAC,EAAA,EAAAD,CAAAD,EAQpBhB,EAAcQ,gBAAiB,GARXS,OAAAC,EAAA,EAAAD,CAAAD,EASpBhB,EAAcS,YAAa,GATPQ,OAAAC,EAAA,EAAAD,CAAAD,EAUpBhB,EAAcU,MAAO,GAVDO,OAAAC,EAAA,EAAAD,CAAAD,EAWpBhB,EAAcW,QAAS,GAXHM,OAAAC,EAAA,EAAAD,CAAAD,EAYpBhB,EAAcY,YAAa,GAZPK,OAAAC,EAAA,EAAAD,CAAAD,EAapBhB,EAAca,YAAa,GAbPI,OAAAC,EAAA,EAAAD,CAAAD,EAcpBhB,EAAcc,OAAQ,GAdFE,GAiBjBG,GAAaC,EAAA,GAAAH,OAAAC,EAAA,EAAAD,CAAAG,EAChBpB,EAAcC,WAAY,GADVgB,OAAAC,EAAA,EAAAD,CAAAG,EAEhBpB,EAAcE,MAAO,GAFLe,OAAAC,EAAA,EAAAD,CAAAG,EAGhBpB,EAAcG,MAAO,GAHLc,OAAAC,EAAA,EAAAD,CAAAG,EAIhBpB,EAAcI,OAAQ,GAJNa,OAAAC,EAAA,EAAAD,CAAAG,EAKhBpB,EAAcK,UAAW,GALTY,OAAAC,EAAA,EAAAD,CAAAG,EAMhBpB,EAAcM,UAAW,GANTW,OAAAC,EAAA,EAAAD,CAAAG,EAOhBpB,EAAcO,gBAAiB,GAPfU,OAAAC,EAAA,EAAAD,CAAAG,EAQhBpB,EAAcQ,gBAAiB,GARfS,OAAAC,EAAA,EAAAD,CAAAG,EAShBpB,EAAcS,YAAa,GATXQ,OAAAC,EAAA,EAAAD,CAAAG,EAUhBpB,EAAcU,MAAO,GAVLO,OAAAC,EAAA,EAAAD,CAAAG,EAWhBpB,EAAcW,QAAS,GAXPM,OAAAC,EAAA,EAAAD,CAAAG,EAYhBpB,EAAcY,YAAa,GAZXK,OAAAC,EAAA,EAAAD,CAAAG,EAahBpB,EAAca,YAAa,GAbXI,OAAAC,EAAA,EAAAD,CAAAG,EAchBpB,EAAcc,OAAQ,GAdNM,GAiBbC,GAAgBC,EAAA,GAAAL,OAAAC,EAAA,EAAAD,CAAAK,EACnBtB,EAAcC,UAAY,GADPgB,OAAAC,EAAA,EAAAD,CAAAK,EAEnBtB,EAAcE,KAAO,GAFFe,OAAAC,EAAA,EAAAD,CAAAK,EAGnBtB,EAAcG,KAAO,GAHFc,OAAAC,EAAA,EAAAD,CAAAK,EAInBtB,EAAcI,MAAQ,GAJHa,OAAAC,EAAA,EAAAD,CAAAK,EAKnBtB,EAAcK,SAAW,GALNY,OAAAC,EAAA,EAAAD,CAAAK,EAMnBtB,EAAcM,SAAW,GANNW,OAAAC,EAAA,EAAAD,CAAAK,EAOnBtB,EAAcO,eAAiB,GAPZU,OAAAC,EAAA,EAAAD,CAAAK,EAQnBtB,EAAcQ,eAAiB,GARZS,OAAAC,EAAA,EAAAD,CAAAK,EASnBtB,EAAcS,WAAa,GATRQ,OAAAC,EAAA,EAAAD,CAAAK,EAUnBtB,EAAcU,KAAO,GAVFO,OAAAC,EAAA,EAAAD,CAAAK,EAWnBtB,EAAcW,OAAS,GAXJM,OAAAC,EAAA,EAAAD,CAAAK,EAYnBtB,EAAcY,WAAa,GAZRK,OAAAC,EAAA,EAAAD,CAAAK,EAanBtB,EAAca,WAAa,GAbRI,OAAAC,EAAA,EAAAD,CAAAK,EAcnBtB,EAAcc,MAAQ,GAdHQ,GAiBhBC,GAAgBC,EAAA,GAAAP,OAAAC,EAAA,EAAAD,CAAAO,EACnBxB,EAAcC,UAAY,GADPgB,OAAAC,EAAA,EAAAD,CAAAO,EAEnBxB,EAAcE,KAAO,GAFFe,OAAAC,EAAA,EAAAD,CAAAO,EAGnBxB,EAAcG,KAAO,GAHFc,OAAAC,EAAA,EAAAD,CAAAO,EAInBxB,EAAcI,MAAQ,GAJHa,OAAAC,EAAA,EAAAD,CAAAO,EAKnBxB,EAAcK,SAAW,GALNY,OAAAC,EAAA,EAAAD,CAAAO,EAMnBxB,EAAcM,SAAW,GANNW,OAAAC,EAAA,EAAAD,CAAAO,EAOnBxB,EAAcO,eAAiB,GAPZU,OAAAC,EAAA,EAAAD,CAAAO,EAQnBxB,EAAcQ,eAAiB,GARZS,OAAAC,EAAA,EAAAD,CAAAO,EASnBxB,EAAcS,WAAa,GATRQ,OAAAC,EAAA,EAAAD,CAAAO,EAUnBxB,EAAcU,KAAO,GAVFO,OAAAC,EAAA,EAAAD,CAAAO,EAWnBxB,EAAcW,OAAS,GAXJM,OAAAC,EAAA,EAAAD,CAAAO,EAYnBxB,EAAcY,WAAa,GAZRK,OAAAC,EAAA,EAAAD,CAAAO,EAanBxB,EAAca,WAAa,GAbRI,OAAAC,EAAA,EAAAD,CAAAO,EAcnBxB,EAAcc,MAAQ,GAdHU,mBChEhBC,EAAS,CACbC,KAAM,UACNC,IAAK,UACLC,QAAS,UACTC,MAAO,UACPC,QAAS,UACTC,MAAO,WAGHC,EAAK,SAACC,GAAmB,QAAAC,EAAAC,UAAAC,OAAVC,EAAU,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAVF,EAAUE,EAAA,GAAAJ,UAAAI,GAC7B,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD1B,OAAA2B,OAAA,CAAiBX,KAAMA,GAAUI,KAGpCQ,EAAc,CAClBC,MAAO,CACLC,YAAaf,EAAGgB,KAChBC,aAAcjB,EAAGgB,KACjBE,KAAMlB,EAAGgB,KACTG,OAAQnB,EAAGgB,KACXI,KAAMpB,EAAGgB,KACTK,UAAWrB,EAAGgB,OCxBZM,EAAc,CAClBC,MAAO,QACPzC,MAAO,QACP0C,MAAO,QACPC,OAAQ,SACRC,MAAO,SAGHC,GAAkBC,EAAA,GAAA3C,OAAAC,EAAA,EAAAD,CAAA2C,EACrBN,EAAYC,MACX,6FAFoBtC,OAAAC,EAAA,EAAAD,CAAA2C,EAGrBN,EAAYxC,MACX,sFAJoBG,OAAAC,EAAA,EAAAD,CAAA2C,EAKrBN,EAAYE,MAAQ,qDALCvC,OAAAC,EAAA,EAAAD,CAAA2C,EAMrBN,EAAYG,OACX,+DAPoBxC,OAAAC,EAAA,EAAAD,CAAA2C,EAQrBN,EAAYI,MACX,yGAToBE,GAYlBC,GAAmBC,EAAA,GAAA7C,OAAAC,EAAA,EAAAD,CAAA6C,EACtBR,EAAYC,MAAQ,0BADEtC,OAAAC,EAAA,EAAAD,CAAA6C,EAEtBR,EAAYxC,MAAQ,2BAFEG,OAAAC,EAAA,EAAAD,CAAA6C,EAGtBR,EAAYE,MAAQ,4BAHEvC,OAAAC,EAAA,EAAAD,CAAA6C,EAItBR,EAAYG,OAAS,8BAJCxC,OAAAC,EAAA,EAAAD,CAAA6C,EAKtBR,EAAYI,MAAQ,6BALEI,GAQnBC,GAAoBC,EAAA,GAAA/C,OAAAC,EAAA,EAAAD,CAAA+C,EACvBV,EAAYC,MAAQ,GADGtC,OAAAC,EAAA,EAAAD,CAAA+C,EAEvBV,EAAYxC,MAAQ,GAFGG,OAAAC,EAAA,EAAAD,CAAA+C,EAGvBV,EAAYE,MAAQ,IAHGvC,OAAAC,EAAA,EAAAD,CAAA+C,EAIvBV,EAAYG,OAAS,IAJExC,OAAAC,EAAA,EAAAD,CAAA+C,EAKvBV,EAAYI,MAAQ,KALGM,GAQpBC,EACS,cADTA,EAEQ,aAFRA,EAGO,YAHPA,EAIa,mBAJbA,EAKM,WCvCNC,EAA4B,SAAAC,GAEhC,OAA4B,KAAxBA,EAAOC,cAAuBD,EAAOE,UAChCJ,EAELE,EAAOE,WAAaF,EAAOC,aAAe,EACrCH,EAGLE,EAAOG,aAAeP,EAAqBI,EAAOI,MAC7CN,EAGLE,EAAOG,YAAc,EAChBL,EAEFA,GAGHO,EAAU,CACdC,gBAAiB,YACjBC,YAAa,SAQTC,GAAWC,EAAA,GAAA3D,OAAAC,EAAA,EAAAD,CAAA2D,EACdJ,EAAQC,gBAAkB,CACzBI,cAAQ,GACRC,cAAQ,GACRC,gBAAU,KAJG9D,OAAAC,EAAA,EAAAD,CAAA2D,EAMdJ,EAAQE,YAAc,CACrBG,cAAQ,IACRC,cAAQ,IACRC,gBAAU,KATGH,GAaXI,EAAqB,CACzBV,WAAY,EACZD,WAAW,EACXY,eAAe,EACfC,cAAc,EACdC,YAAa,GACbC,aAAc,EACdhB,aAAc,EACdiB,gBAAiB,GAGbC,EAAqB,CACzBC,KAAM,EACNC,KAAM,EACNC,KAAM,EACNC,OAAQ,GAGJC,EAAoB,CACxBC,IAAK,EACLC,UAAW,EACXC,WAAY,EACZC,OAvCO,eAwCPC,KAAM,GAGFC,EAAe,UCnDrB,SAASC,EAAc7D,GAAO,IACpB8B,EAAiD9B,EAAjD8B,OAAQgC,EAAyC9D,EAAzC8D,QAASC,EAAgC/D,EAAhC+D,aAAcC,EAAkBhE,EAAlBgE,cAMjCC,EAAsBnC,EAAOoC,WAAWC,OAC5C,SAAAC,GAAa,OAEXN,EAAQM,GAAenC,WAAa,GAGvB,IAFb+B,EAAcG,OACZ,SAAAE,GAAY,OAAIA,EAAaC,WAAaF,IAC1CrE,SAIJI,EAAAC,EAAAC,cAAA,wFAMF,OACEF,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,WACZN,EAAoBO,IAAI,SAACJ,EAAeK,GACvC,IAAMC,EAAYZ,EAAQM,GAC1B,OACEjE,EAAAC,EAAAC,cAAA,MACEsE,IAAG,gBAAAC,OAAkBR,GACrBS,MAAKjG,OAAAkG,EAAA,EAAAlG,CAAA,CACHmG,aAAc,MACdC,WAAY,OACRP,EAAI,EAAI,CAAEQ,UAAS,aAAAL,OAAexF,EAAOK,UAAc,KAL/D,oBAQmBU,EAAAC,EAAAC,cAAA,SAAIqE,EAAU7B,aAAeuB,EAAgB,kBARhE,KASEjE,EAAAC,EAAAC,cAAA,aAAKyB,EAAOoD,kBAAkBd,GAA9B,YAA0D,IACzDM,EAAU7B,aACT,uBACE,KACJ1C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CACEC,QAAS,kBACPrB,EACEjC,EAAOuD,KACPjB,EACAjC,EAAQC,kBAGZkD,UAAU,GARZ,oBAWQ,IACRnF,EAAAC,EAAAC,cAAA,8DACAF,EAAAC,EAAAC,cAAA,gGAKFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CACEC,QAAS,kBACPrB,EACEjC,EAAOuD,KACPjB,EACAjC,EAAQE,cAGZiD,UAAU,GARZ,gBAWQ,IACRnF,EAAAC,EAAAC,cAAA,4GAEsC,KAEtCF,EAAAC,EAAAC,cAAA,oOAehB,SAASkF,EAAcvF,GAAO,IAE1B8B,EAYE9B,EAZF8B,OACAgC,EAWE9D,EAXF8D,QACAC,EAUE/D,EAVF+D,aACAb,EASElD,EATFkD,KACAC,EAQEnD,EARFmD,KAGAqC,GAKExF,EAPFqD,OAOErD,EANFoD,KAMEpD,EALFwF,aACAC,EAIEzF,EAJFyF,UACAzB,EAGEhE,EAHFgE,cACA0B,EAEE1F,EAFF0F,YACAC,EACE3F,EADF2F,cAGMzD,EAA0CJ,EAA1CI,KAAMD,EAAoCH,EAApCG,WAAYoD,EAAwBvD,EAAxBuD,KAAMzC,EAAkBd,EAAlBc,cAE1BgD,EAAe3D,EAAaP,EAAqBQ,IAASiB,GAAQ,GAClE0C,EAAiB/D,EAAOiB,aAAe,GAAKG,GAAQ,IACpD4C,EAAmB5C,GAAQ,KAAOjB,GAAc,EA2HhD8D,EACJ5F,EAAAC,EAAAC,cAAA,WAASkE,UAAW,uBAClBpE,EAAAC,EAAAC,cAAA,UAAKyB,EAAOuD,MADd,KAC0BlF,EAAAC,EAAAC,cAAA,SAAIyB,EAAOI,KAAX,WACxB/B,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAIiB,EAAmBQ,EAAOI,QAEhC/B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gCACqBF,EAAAC,EAAAC,cAAA,SAAIwB,EAA0BC,KAEnD3B,EAAAC,EAAAC,cAAA,6BACkBF,EAAAC,EAAAC,cAAA,SAAIyB,EAAOc,cAAgB,MAAQ,OAErDzC,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAAA,SAAIyB,EAAOG,YADzB,IAEGP,EAAqBI,EAAOI,MAAO,IACnCJ,EAAOkB,gBAAkB,EACxB7C,EAAAC,EAAAC,cAAA,KAAGkE,UAAW,SAAd,IAAyBzC,EAAOkB,iBAEhC,IAGJ7C,EAAAC,EAAAC,cAAA,wBACaF,EAAAC,EAAAC,cAAA,SAAIyB,EAAOC,cADxB,OAGA5B,EAAAC,EAAAC,cAAA,wBACaF,EAAAC,EAAAC,cAAA,SAAIyB,EAAOiB,cADxB,MAGA5C,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAAA,SAAIyB,EAAOE,UAAY,MAAQ,SAM7CgE,EACJ7F,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,WAFF,IAEsC,IAA5ByB,EAAOmE,UAAUlG,OAAe,kBAAoB,GAC5DI,EAAAC,EAAAC,cAAA,UACGyB,EAAOmE,UAAUzB,IAAI,SAAA0B,GACpB,OACE/F,EAAAC,EAAAC,cAAA,MAAIsE,IAAG,GAAAC,OAAK9C,EAAOuD,KAAZ,KAAAT,OAAoBsB,IACzB/F,EAAAC,EAAAC,cAAA,UAAK6F,GACL/F,EAAAC,EAAAC,cAAA,aACIrB,EAAiBkH,GADrB,UACkChH,EAAiBgH,GADnD,uBAICxH,EAAkBwH,GACjB/F,EAAAC,EAAAC,cAAA,gEAEA,GAEDvB,EAAcoH,GAAO/F,EAAAC,EAAAC,cAAA,wBAAqB,QAQjD8F,EACJhG,EAAAC,EAAAC,cAAA,WAASkE,UAAW,kCAClBpE,EAAAC,EAAAC,cAAA,0BAAkByB,EAAOuD,MACzBlF,EAAAC,EAAAC,cAACwD,EAAD,CACE/B,OAAQA,EACRgC,QAASA,EACTC,aAAcA,EACdC,cAAeA,KAKrB,OACE7D,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,sBACdpE,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,yBACdpE,EAAAC,EAAAC,cAAA,SAAOkE,UAAW,+BAChBpE,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAK+F,IAAK5E,EAAoBM,EAAOI,UAGxC6D,GAEFC,EACD7F,EAAAC,EAAAC,cAAA,WAASkE,UAAW,8BA5MtBpE,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,0BACbpE,EAAAC,EAAAC,cAAA,mBAEEF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMC,QAAS,kBAAMM,EAAY5D,EAAQK,EAAQkE,eAAjD,gBAGAlG,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,0BAAhB,0KAMD3B,EAAgB,KACfzC,EAAAC,EAAAC,cAAA,yBAEEF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CACEC,QAAS,WACPO,EAAcN,IAEhBC,UAAWQ,EACXvB,UAAW,uBALb,oBASApE,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,0BACdpE,EAAAC,EAAAC,cAAA,sCAC4BF,EAAAC,EAAAC,cAAA,0BAD5B,aAC2D,IACzDF,EAAAC,EAAAC,cAAA,qBAFF,0GAKAF,EAAAC,EAAAC,cAAA,UACIyF,GAAoB5C,EAAO,IAAM,sDAA+B,IAEpE/C,EAAAC,EAAAC,cAAA,UACIyF,GAAoB7D,EAAa,EAC/B,mDACA,MAKVW,EACAzC,EAAAC,EAAAC,cAAA,yBAEEF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CACEC,QAAS,WACPK,EAAU3D,EAAOuD,OAEnBC,UAAWM,EACXrB,UAAW,uBALb,cASApE,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,0BACdpE,EAAAC,EAAAC,cAAA,KAAGkE,UAAW,WAAd,6DAC6D,IAC3DpE,EAAAC,EAAAC,cAAA,oBAFF,aAE0BF,EAAAC,EAAAC,cAAA,2BAF1B,KAIAF,EAAAC,EAAAC,cAAA,KAAGkE,UAAW,WAAd,kHAE+C,IAC7CpE,EAAAC,EAAAC,cAAA,4BAHF,QAG6BF,EAAAC,EAAAC,cAAA,4BAH7B,KAKAF,EAAAC,EAAAC,cAAA,UACIuF,GAAgBzC,EAAO,GAAK,iDAA0B,IACtDyC,GAAgBzC,GAAQ,GAAK,wDAAiC,MAxBtD,KA6BhBP,EACAzC,EAAAC,EAAAC,cAAA,yBAEEF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CACEC,QAAS,WACPI,EAAY1D,EAAOuD,OAErBC,UAAWO,EACXtB,UAAW,uBALb,kBASApE,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,0BACdpE,EAAAC,EAAAC,cAAA,0HAE+CF,EAAAC,EAAAC,cAAA,0BAF/C,MAIEwF,GAAkB3C,EAAO,IAAM,sDAA+B,IAC9D2C,GAAkB3C,GAAQ,IAAM,uDAAgC,KAlBtD,KAsBhBN,EACAzC,EAAAC,EAAAC,cAAA,yBAEEF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAMG,UAAQ,EAACf,UAAW,uBAA1B,gBAGApE,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,0BACdpE,EAAAC,EAAAC,cAAA,2FAEgBF,EAAAC,EAAAC,cAAA,sBAFhB,QAEqCF,EAAAC,EAAAC,cAAA,wBAFrC,0EAKAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,gIAIAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,8IAlBY,OAmHjB8F,GCrVP,MAAMG,EAAQ,CACZ,CAAC,WAAY,YAAa,IAC1B,CAAC,YAAa,WAAY,IAC1B,CAAC,WAAY,YAAa,IAC1B,CAAC,YAAa,WAAY,IAC1B,CAAC,YAAa,YAAa,IAC3B,CAAC,YAAa,YAAa,IAC3B,CAAC,aAAc,YAAa,IAC5B,CAAC,YAAa,aAAc,IAC5B,CAAC,eAAgB,YAAa,IAC9B,CAAC,YAAa,eAAgB,IAC9B,CAAC,UAAW,eAAgB,IAC5B,CAAC,eAAgB,UAAW,IAC5B,CAAC,UAAW,eAAgB,IAC5B,CAAC,eAAgB,UAAW,IAC5B,CAAC,cAAe,eAAgB,IAChC,CAAC,eAAgB,cAAe,IAChC,CAAC,UAAW,UAAW,GACvB,CAAC,UAAW,UAAW,GACvB,CAAC,cAAe,UAAW,IAC3B,CAAC,UAAW,cAAe,IAC3B,CAAC,WAAY,UAAW,IACxB,CAAC,UAAW,WAAY,IACxB,CAAC,cAAe,UAAW,IAC3B,CAAC,UAAW,cAAe,IAC3B,CAAC,YAAa,WAAY,IAC1B,CAAC,WAAY,YAAa,IAC1B,CAAC,cAAgB,aAAc,IAC/B,CAAC,aAAc,cAAgB,IAC/B,CAAC,SAAU,aAAc,IACzB,CAAC,aAAc,SAAU,IACzB,CAAC,QAAS,aAAc,IACxB,CAAC,aAAc,QAAS,IACxB,CAAC,UAAW,SAAU,IACtB,CAAC,SAAU,UAAW,IACtB,CAAC,SAAU,SAAU,IACrB,CAAC,SAAU,SAAU,IACrB,CAAC,YAAa,SAAU,IACxB,CAAC,SAAU,YAAa,IACxB,CAAC,iBAAkB,cAAgB,IACnC,CAAC,cAAgB,iBAAkB,IACnC,CAAC,YAAa,iBAAkB,IAChC,CAAC,iBAAkB,YAAa,IAChC,CAAC,mBAAoB,iBAAkB,IACvC,CAAC,iBAAkB,mBAAoB,IACvC,CAAC,mBAAoB,YAAa,GAClC,CAAC,YAAa,mBAAoB,IAG9BpB,EAAoB,SAAAqB,GAKxB,OAJqBD,EAAMnC,OAAO,SAAAqC,GAAA,IAAAC,EAAA7H,OAAA8H,EAAA,EAAA9H,CAAA4H,EAAA,GAAEpG,EAAFqG,EAAA,GAAAA,EAAA,GAAAA,EAAA,UAAkBF,IAAWnG,IAC/BuG,OAAO,SAACC,EAADC,GAAqB,IAAAC,EAAAlI,OAAA8H,EAAA,EAAA9H,CAAAiI,EAAA,GAAZE,GAAYD,EAAA,GAAAA,EAAA,IAAVE,EAAUF,EAAA,GAC1D,OAAOlI,OAAAkG,EAAA,EAAAlG,CAAA,GAAIgI,EAAXhI,OAAAC,EAAA,EAAAD,CAAA,GAAiBmI,EAAIC,KACpB,KAICC,EAAM,SAAC5B,EAAMnD,EAAMgF,EAAGC,EAAGlB,GAAnB,MAAkC,CAC5CmB,GAAI/B,EACJA,OACA6B,IACAC,IACAjF,OACA+D,UAAWA,EAAUzB,IAAI,SAAA0B,GAAG,OAAIvI,EAAcuI,KAC9ChC,WAAYtF,OAAOyI,KAAKnC,EAAkBG,IAC1CH,kBAAmBA,EAAkBG,KA0FxBiC,GAvFe,CAC5BC,aAAcN,EAAI,aAAchG,EAAYE,MAAO,GAAI,GAAI,CACzD,iBACA,SAEFqG,YAAaP,EAAI,YAAahG,EAAYI,MAAO,GAAI,GAAI,CACvD,OACA,SACA,WACA,iBACA,eAEFoG,SAAYR,EAAI,WAAYhG,EAAYG,OAAQ,GAAI,GAAI,CACtD,OACA,iBACA,WACA,SAEFsG,YAAaT,EAAI,YAAahG,EAAYE,MAAO,GAAI,GAAI,CACvD,YACA,OACA,mBAEFwG,UAAWV,EAAI,YAAahG,EAAYC,MAAO,GAAI,GAAI,IACvD0G,MAASX,EAAI,QAAShG,EAAYC,MAAO,GAAI,GAAI,IACjD2G,QAAWZ,EAAI,UAAWhG,EAAYxC,MAAO,GAAI,GAAI,CACnD,QACA,UAEFqJ,OAAQb,EAAI,SAAUhG,EAAYG,OAAQ,GAAI,GAAI,CAChD,OACA,QACA,iBACA,aAEF2G,OAAQd,EAAI,SAAUhG,EAAYG,OAAQ,GAAI,GAAI,CAChD,SACA,OACA,OACA,eAEF4G,UAAaf,EAAI,YAAahG,EAAYC,MAAO,GAAI,GAAI,IACzD+G,SAAUhB,EAAI,WAAYhG,EAAYxC,MAAO,GAAI,GAAI,CAAC,QAAS,UAC/DyJ,YAAajB,EAAI,YAAahG,EAAYI,MAAO,GAAI,EAAG,CACtD,YACA,OACA,QACA,aACA,eAEF8G,mBAAoBlB,EAAI,mBAAoBhG,EAAYE,MAAO,GAAI,GAAI,CACrE,iBACA,YACA,aAEFiH,iBAAkBnB,EAAI,iBAAkBhG,EAAYC,MAAO,GAAI,GAAI,IACnEmH,cAAepB,EAAI,cAAehG,EAAYxC,MAAO,GAAI,GAAI,CAC3D,QACA,UAEF6J,YAAarB,EAAI,YAAahG,EAAYG,OAAQ,GAAI,GAAI,CACxD,WACA,iBACA,OACA,aAEFmH,eAAgBtB,EAAI,eAAgBhG,EAAYC,MAAO,GAAI,GAAI,IAC/DsH,QAASvB,EAAI,UAAWhG,EAAYI,MAAO,GAAI,GAAI,CACjD,aACA,aACA,aACA,QACA,SAEFoH,UAAWxB,EAAI,UAAWhG,EAAYE,MAAO,GAAI,GAAI,CACnD,aACA,OACA,eAEFuH,YAAazB,EAAI,cAAehG,EAAYG,OAAQ,GAAI,GAAI,CAC1D,iBACA,aACA,OACA,4CCnJEuH,GAA8B,CAClCC,OAAQ,CACN,CAAExB,GAAI,IAAKF,EAAG,GAAIC,EAAG,IAAK9B,KAAM,KAChC,CACE+B,GAAI,IACJF,EAAG,IACHC,EAAG,IACH9B,KAAM,IACNwD,UAAU,EACVC,OAAO,GAET,CAAE1B,GAAI,IAAKF,EAAG,IAAKC,EAAG,IAAK9B,KAAM,IAAKyD,OAAO,IAK/CxC,MAAO,GACPyC,kBAAmB,CAEjBC,KAAM5J,EAAOM,MACbuJ,UAAW,QACXC,aAAc,GACdC,UAAW,EACXC,OAAQ,EACRC,WAAY,EACZC,OAAQ,GAGVC,mBAAoB,CAClBP,KAAM5J,EAAOM,MACb0J,OAAQhK,EAAOI,MACfgK,YAAa,GAGfC,qBAAsB,GACtBC,YAAa,GAEbC,OAAKC,EAAA,GAAAhL,OAAAC,EAAA,EAAAD,CAAAgL,EACF3I,EAAYC,MAAQ,GADlBtC,OAAAC,EAAA,EAAAD,CAAAgL,EAEF3I,EAAYxC,MAAQ,IAFlBG,OAAAC,EAAA,EAAAD,CAAAgL,EAGF3I,EAAYE,MAAQ,IAHlBvC,OAAAC,EAAA,EAAAD,CAAAgL,EAIF3I,EAAYG,OAAS,IAJnBxC,OAAAC,EAAA,EAAAD,CAAAgL,EAKF3I,EAAYI,MAAQ,IALlBuI,IAsIQC,OA7Hf,SAAyB7J,GAAO,IAAA8J,EAAAlL,OAAAkG,EAAA,EAAAlG,CAAA,GAWzB+J,GACA3I,GAVH4I,EAF4BkB,EAE5BlB,OACAtC,EAH4BwD,EAG5BxD,MACAyC,EAJ4Be,EAI5Bf,kBACAQ,EAL4BO,EAK5BP,mBACAE,EAN4BK,EAM5BL,qBACAM,EAP4BD,EAO5BC,YACAJ,EAR4BG,EAQ5BH,MACAK,EAT4BF,EAS5BE,cAMIC,GAAW,GACfC,EAAU,EAENC,EAAUvB,EACVwB,EAAOrB,EAEPsB,EAAW,CAAC,UAAW,QAAS,UAEhCC,EAASC,iBAAO,MAEtB,SAASC,EAAUC,GACjB,IAAMC,EAAKC,KAAMF,IAAIA,GACfG,EAAOC,GAAIJ,GAwDjB7L,OAAOkM,OAAOX,GAASY,QAAQ,SAAAC,GAC7B,GAAIA,EAAMnI,aAAc,CACtB,IAAIoI,EAjDY,SAAAzE,GAAyC,IAAtCnB,EAAsCmB,EAAtCnB,KAAM6B,EAAgCV,EAAhCU,EAAGC,EAA6BX,EAA7BW,EAAGjF,EAA0BsE,EAA1BtE,KAAMgJ,EAAoB1E,EAApB0E,cACnCC,EAAUvM,OAAAkG,EAAA,EAAAlG,CAAA,GACTwL,EACC/E,IAAS2E,EAAgBT,EAAqBE,EAC/CyB,GAEL,OAAOR,EAAGU,OACJ,EAAJlE,EAAQ+C,EACJ,EAAJ9C,EAAQ+C,EACRP,EAAMzH,GACNiJ,GAuCaE,CAAYL,GACzBP,EAAIa,YAAYL,GA9BA,SAAAD,GAClBJ,EACGW,KAAK,gBACLC,KAAKR,EAAM3F,MACX2D,KAAK5J,EAAOI,OACZ0H,EACW,EAAV8D,EAAM9D,EACJ+C,IACmC,IAAlCI,EAASoB,QAAQT,EAAM3F,MAAe,GAAMsE,EAAMqB,EAAM9I,MAAQ,IAEpEiF,EACW,EAAV6D,EAAM7D,EACJ+C,IACmC,IAAlCG,EAASoB,QAAQT,EAAM3F,OACnB,EACDsE,EAAMqB,EAAM9I,MAAQ,EAAI,IAE/BwJ,KAAK,CACJC,OAAQ,YACRC,KAAM,GACNC,OAAQ,WAETC,GAAG,QAAS,WACX9L,EAAM+L,iBAAiBf,EAAM3F,QAQ/B2G,CAAYhB,MAIhB1E,EAAMyE,QAAQ,SAAAtE,GAAoB,IA1CdwF,EAAQC,EA0CMrF,EAAAjI,OAAA8H,EAAA,EAAA9H,CAAA6H,EAAA,GAAlB0F,EAAkBtF,EAAA,GAAVuF,EAAUvF,EAAA,GAC5BoE,GA3CcgB,EA2CM9B,EAAQgC,GA3CND,EA2Ce/B,EAAQiC,GA1CjD1B,EAAG2B,KAAKJ,EAAO/E,EAAG+E,EAAO9E,EAAG+E,EAAOhF,EAAGgF,EAAO/E,EAA7CvI,OAAAkG,EAAA,EAAAlG,CAAA,GACKwL,EACAL,EAFL,CAGEX,OAAQhK,EAAOI,UAwCjBiL,EAAIa,YAAYL,KAKpBqB,oBAAU,WAER9B,EADUF,EAAOiC,SAEjBC,QAAQC,IAAI,yBACX,CAACnC,EAAOiC,UAGX,IAAMG,EACJ9N,OAAO+N,QAAQ/D,GAAQpE,IAAI,SAAAsC,GAAA,IAAA8F,EAAAhO,OAAA8H,EAAA,EAAA9H,CAAAkI,EAAA,UAAA8F,EAAA,GAAAA,EAAA,GAAuB/J,eAE9CgK,EAAW,WACf,IAAIpC,EAAMH,EAAOiC,QACjB,GAAI9B,EAAK,CAEP,IADA+B,QAAQC,IAAI,wBACLhC,EAAIqC,WACTrC,EAAIsC,YAAYtC,EAAIqC,WAEtBtC,EAAUC,KAOd,OAHA6B,oBAAUO,EAAUH,GACpBJ,oBAAUO,EAAU,CAAC7C,IAEd7J,EAAAC,EAAAC,cAAA,OAAK2M,IAAK1C,EAAQ/F,UAAW,aCtJhC0I,GAAU,MACVC,GAAiB5F,GAAsBG,SAASpC,KAChD8H,GAAmB,IAIzBC,YAAc5M,GACd6M,YNJoB,CAClBC,WAAY,CACVC,SAAU,CACRC,QAAS,cAGbC,MAAO,CACLC,MAAO,CACLC,WAAY,aAEdC,OAAQ,CACND,WAAY,aAEdE,QAAS,CACPF,WAAY,aAEdG,WAAY,CACVH,WAAY,aAEdI,KAAM,CACJJ,WAAY,cAGhBK,QAAS,KM8iBIC,OA1iBf,WAAe,IAAAC,EACaC,mBAAS,GADtBC,EAAAxP,OAAA8H,EAAA,EAAA9H,CAAAsP,EAAA,GAAAG,GAAAD,EAAA,GAAAA,EAAA,GAEmBD,mBAAS,IAF5BG,EAAA1P,OAAA8H,EAAA,EAAA9H,CAAAyP,EAAA,GAAAE,GAAAD,EAAA,GAAAA,EAAA,GAGmBH,mBAAS,KAH5BK,EAAA5P,OAAA8H,EAAA,EAAA9H,CAAA2P,EAAA,GAGNE,EAHMD,EAAA,GAGIE,EAHJF,EAAA,GAAAG,EAKeR,mBAAS,CACnC3L,aAAO,EACPC,aAAO,EACPC,eAAS,EACTkM,aAAO,IATIC,EAAAjQ,OAAA8H,EAAA,EAAA9H,CAAA+P,EAAA,GAKNG,EALMD,EAAA,GAKEE,EALFF,EAAA,GAAAG,EAY6Bb,mBAAS,IAZtCc,EAAArQ,OAAA8H,EAAA,EAAA9H,CAAAoQ,EAAA,GAYNhL,EAZMiL,EAAA,GAYSC,EAZTD,EAAA,GAAAE,EAaqBhB,mBAAS,CACzCrK,QAASlF,OAAOyI,KAAKC,IAAuBX,OAC1C,SAACC,EAAKjC,GAAN,OAAA/F,OAAAkG,EAAA,EAAAlG,CAAA,GAAoBgI,EAApBhI,OAAAC,EAAA,EAAAD,CAAA,GAA0B+F,EAAMhC,KAChC,IAEFyM,OAAQnM,EACRoM,MAAO/L,IAnBIgM,EAAA1Q,OAAA8H,EAAA,EAAA9H,CAAAuQ,EAAA,GAaNI,EAbMD,EAAA,GAaKE,EAbLF,EAAA,GAAAG,EAsBwBF,EAAUH,OAAvChM,EAtBKqM,EAsBLrM,KAAMF,EAtBDuM,EAsBCvM,KAAMC,EAtBPsM,EAsBOtM,KAAME,EAtBboM,EAsBapM,OAtBbqM,EAyB6BvB,mBAASjB,IAzBtCyC,EAAA/Q,OAAA8H,EAAA,EAAA9H,CAAA8Q,EAAA,GAyBN1F,EAzBM2F,EAAA,GAyBS5D,EAzBT4D,EAAA,GA2BPC,EAAoB,kBACxBhR,OAAOyI,KAAKC,IAAuBX,OACjC,SAACC,EAAKjC,GAAN,OAAA/F,OAAAkG,EAAA,EAAAlG,CAAA,GACKgI,EADLhI,OAAAC,EAAA,EAAAD,CAAA,GAEG+F,EAFH/F,OAAAkG,EAAA,EAAAlG,CAAA,GAEc0I,GAAsB3C,GAAS4K,EAAUzL,QAAQa,OAE/D,KAGJ2H,oBAAU,WAGRvI,GAAa,OAAQmJ,GAAgB/K,EAAQE,aAAa,IACzD,IAGH,IAAMwN,EAAkB,SACtBC,EACAC,EACAC,EACAC,GAEAT,EAAa,SAAAU,GAAY,IACjB1N,EAAiCsN,EAAjCtN,WAAOC,EAA0BqN,EAA1BrN,WAAOC,EAAmBoN,EAAnBpN,aAASkM,EAAUkB,EAAVlB,WAGvBuB,EAAQ,SAACjJ,EAAGkJ,GAEhB,OADUlJ,EAAIkJ,EAAI,QACCC,GAALD,EAAiBlJ,EAAIA,EAAIkJ,GAGrChB,EAAS,CACXlM,KAAMiN,EAAMD,EAASd,OAAOlM,KAAMV,GAClCW,KAAMgN,EAAMD,EAASd,OAAOjM,KAAMV,GAClCW,KAAMkN,KAAKC,IAAIJ,EAAMD,EAASd,OAAOhM,KAAMwL,GAAQ,KACnDvL,OAAQ8M,EAAMD,EAASd,OAAO/L,OAAQX,IAGpC8N,EACDhO,GAAS4M,EAAOlM,OAASgN,EAASd,OAAOlM,MACzCT,GAAS2M,EAAOjM,OAAS+M,EAASd,OAAOjM,MACzCyL,GAASQ,EAAOhM,OAAS8M,EAASd,OAAOhM,MACzCV,GAAW0M,EAAO/L,SAAW6M,EAASd,OAAO/L,OAE5CoN,EAAY7R,OAAAkG,EAAA,EAAAlG,CAAA,GAAQsR,EAASd,OAAYA,GAAU,IACnDsB,OACgBL,GAAlBN,IACqC,IAArCA,EAAeG,EAASpM,SAEtB6M,OACgBN,GAAlBN,EACIG,EAASpM,QACTiM,EAAeG,EAASpM,SAE1B8M,EAAcV,EAASb,MAW3B,OATKmB,QAA6BH,GAAbL,GAA2BU,GAAOV,IAS9CQ,IAAgBP,GAAUS,EAAiBR,EAPvC,CACXd,OAAQqB,EACR3M,QAAS6M,EACTtB,MAAOuB,MAQPC,EAAc,SAAAC,GAAG,OACrBpC,EAAY,SAAAwB,GAAQ,SAAAtL,OAAAhG,OAAAmS,EAAA,EAAAnS,CAAQsR,GAAR,CAAkB,CAAEc,KAAM,GAAIxF,KAAMsF,QAEpDG,EAAgB,SAAAC,GAAU,IAStBC,EAA4CD,EAA5CC,SAAUC,EAAkCF,EAAlCE,OAAQC,EAA0BH,EAA1BG,UAAWC,EAAeJ,EAAfI,WAC/BC,EAAKjK,GAAsB8J,GAC3BI,EAAiBD,EAAGrP,OAASjB,EAAYC,MAEzCuQ,EAAU,KAAA7M,OAAQ2M,EAAGrP,KAAX,4BACVwP,EAAQ,yDAAA9M,OAA4DyM,EAA5D,uBACRP,EAAG,OAAAlM,OAAU0M,EAAV,iBAAA1M,OAAoCuM,EAApC,gBAAAvM,OAA2DwM,EAA3D,MAAAxM,OACP4M,EAAiBE,EAAWD,GAE9BZ,EAAYC,GAEZjB,EACE,GACA,SAAA8B,GACE,IAAIC,EAAaD,EAAgBP,GAC7BS,EAAeF,EAAgBR,IAAa,CAAErO,YAAa,IAC/D,OAAOlE,OAAAkG,EAAA,EAAAlG,CAAA,GACF+S,EADL/S,OAAAC,EAAA,EAAAD,CAAA,GAEGwS,EAFHxS,OAAAkG,EAAA,EAAAlG,CAAA,GAGOgT,EAHP,CAII/O,cAAc,EACdC,YAAa+O,EAAa/O,YAC1Bb,WAAYuP,EAAiB,EAAII,EAAW3P,WAAaoP,OAI/D,MACA,IAgHES,EAAmB,SAACC,EAADvL,EAA8BwL,GAA9B,OAAAxL,EAAiBP,UAC9BU,OACR,SAACsL,EAAOC,GAAR,OACED,IACEvT,EAAkBwT,IACnBxT,EAAkBwT,IAAaF,EAC5BD,EAAaG,GACb,IACN,IAkGJ,SAASnO,GAAaoN,EAAUC,EAAQE,EAAYa,GAAW,IAAAC,EACvDC,GAAWD,EAAA,GAAAxT,OAAAC,EAAA,EAAAD,CAAAwT,EACdjQ,EAAQC,gBAAkB,GADZxD,OAAAC,EAAA,EAAAD,CAAAwT,EAEdjQ,EAAQE,YAAc,GAFR+P,GAuBXE,EAAkB,WAEtBpD,EAAiB,SAAAgB,GACf,IAAMgB,EAAS,CACbqB,SAAUJ,EACN,GAC4D,GAA5D7K,GAAsB6J,GAAUjM,kBAAkBkM,GACtDe,YACA9M,KAAM8M,EAAS,aAAAvN,OACEwM,GADF,eAAAxM,OAEIuM,EAFJ,QAAAvM,OAEmBwM,EAFnB,QAAAxM,OAEgC0M,GAC/CH,WACAC,SACAE,aACAD,UAAWgB,EAAYf,GACvBkB,SAAU,GAQZ,SAAA5N,OAAAhG,OAAAmS,EAAA,EAAAnS,CAAWsR,GAAX,CAAAtR,OAAAkG,EAAA,EAAAlG,CAAA,GAA0BsS,EAA1B,CAAkCuB,OALnB,WAEbxB,EAAcC,WAOhBiB,EACFG,IAEAzC,EACEvN,EAAYgP,GAjDa,SAAAK,GAE3B,IAAIE,EAAeF,EAAgBR,GAC/BuB,EAAcL,EAAYf,GAI9B,SAHaO,EAAa5P,YAAcyQ,IAG3B9T,OAAAkG,EAAA,EAAAlG,CAAA,GAEJ+S,EAFI/S,OAAAC,EAAA,EAAAD,CAAA,GAGNuS,EAHMvS,OAAAkG,EAAA,EAAAlG,CAAA,GAIFiT,EAJE,CAKL5P,WAAY4P,EAAa5P,WAAayQ,OAuC5CJ,IA9aR,SAAqBK,EAAUC,GAC7B,IAAMC,EAAgBtI,mBAGtB+B,oBAAU,WACRuG,EAActG,QAAUoG,GACvB,CAACA,IAGJrG,oBAAU,WAIR,GAAc,OAAVsG,EAAgB,CAClB,IAAIxL,EAAK0L,YAJX,WACED,EAActG,WAGaqG,GAC3B,OAAO,kBAAMG,cAAc3L,MAE5B,CAACwL,IAkWJI,CA7FiB,WApBQ,IAAAC,EAuBvBzD,EAAa,SAAAU,GAAY,IACfd,EAAoBc,EAApBd,OAAQtL,EAAYoM,EAAZpM,QACRZ,EAA6BkM,EAA7BlM,KAAMC,EAAuBiM,EAAvBjM,KAAME,EAAiB+L,EAAjB/L,OAAQD,EAASgM,EAAThM,KAExBX,EAAQ,EACVD,EAAQ,EAERoM,EAAQ0B,KAAK4C,MAAsB,GAAhB5C,KAAK6C,UAAiB,GAE3CvU,OAAO+N,QAAQ7I,GACZK,OAAO,SAAAsC,GAAA,IAAAI,EAAAjI,OAAA8H,EAAA,EAAA9H,CAAA6H,EAAA,UAAAI,EAAA,GAAAA,EAAA,GAA2BhE,eAClCkI,QAAQ,SAAAjE,GAAoB,IAAA8F,EAAAhO,OAAA8H,EAAA,EAAA9H,CAAAkI,EAAA,GAAlBzB,EAAkBuH,EAAA,GAAZ9K,EAAY8K,EAAA,GACvBwG,EAAiB9L,GAAsBjC,GACvC2M,EAAelQ,EAAOG,YAAc,EACxCQ,GAASqP,EACP9S,EACAoU,EACApB,GAEFxP,GAASsP,EACP5S,EACAkU,EACApB,GAEFvP,GAASX,EAAOG,aAGpB8M,EAAU,CACRvM,eACAC,eACAC,eAxBU,EAyBVkM,iBAGF,IAAMyE,EAAUnQ,EAAOV,EACvB8Q,EAAUnQ,EAAOV,EACjB8Q,EAAYlQ,EA9BA,EA+BZmQ,EAAUpQ,EAAOwL,EACjB,OAAOhQ,OAAAkG,EAAA,EAAAlG,CAAA,GACFsR,EADL,CAEEd,OAAOxQ,OAAAkG,EAAA,EAAAlG,CAAA,GACFwQ,EADC,CAEJlM,KAAMmQ,EAAU,EAAI,EAAIA,EACxBlQ,KAAMmQ,EAAU,EAAI,EAAIA,EACxBjQ,OAAQkQ,EAAY,EAAI,EAAIA,EAC5BnQ,KAAMoQ,EAAU,EAAI,EAAIA,QAM9BxP,EACGG,OAAO,SAAA+C,GAAC,OAAIA,EAAEsL,UAAYtL,EAAEqL,WAC5BxH,QAAQ,SAAA0I,GACPA,EAAKhB,WAKTvD,EAAiB,SAAAgB,GAAQ,OACvBA,EACG/L,OAAO,SAAA+C,GAAC,OAAIA,EAAEsL,SAAWtL,EAAEqL,WAC3B/N,IAAI,SAAAiP,GACH,IAAIjB,EAAWiB,EAAKjB,SAAW,EAAI,IAAOpP,EAC1C,OAAOxE,OAAAkG,EAAA,EAAAlG,CAAA,GACF6U,EADL,CAEEjB,SAAUA,EAAWiB,EAAKlB,SAAWkB,EAAKlB,SAAWC,QAzFtCS,EA8FN,SAAAS,GAAiB,IAC1BnQ,EAAqCmQ,EAArCnQ,IAAKC,EAAgCkQ,EAAhClQ,UAAWC,EAAqBiQ,EAArBjQ,WAAYE,EAAS+P,EAAT/P,KAClC,MAAO,CACLJ,IAAKA,EAAM,EACXC,UAAyB,IAAdA,EAAkB,EAAIA,EAAY,EAC7CC,WACiB,KAAfA,EAAoB,EAAkB,IAAdD,EAAkBC,EAAa,EAAIA,EAC7DE,KAAqB,KAAfF,EAAoBE,EAAO,EAAIA,IApGzC6L,EAAa,SAAAU,GAAY,IACfb,EAAUa,EAAVb,MACR,OAAOzQ,OAAAkG,EAAA,EAAAlG,CAAA,GACFsR,EADL,CAEEb,MAAO4D,EAAQ5D,OAoGnBX,EAAY,SAAAwB,GAAQ,OAClBA,EACG/L,OAAO,SAAA2M,GAAG,OAAIA,EAAIE,KAAO,IACzBxM,IAAI,SAAAsM,GAAG,OAAAlS,OAAAkG,EAAA,EAAAlG,CAAA,GAAUkS,EAAV,CAAeE,KAAMF,EAAIE,KAAO,SAKxB7D,IA/VT,IA+ZL3K,GAAiCsM,EAAjCtM,WAAOC,GAA0BqM,EAA1BrM,WAAOC,GAAmBoM,EAAnBpM,aAASkM,GAAUE,EAAVF,WACzB+E,GAAY,SAAAvD,GAAC,OACX,IAANA,EAAU,KACRjQ,EAAAC,EAAAC,cAAA,QACEkE,UAAW,mBACXM,MAAO,CAAE+O,MAAOxD,EAAI,EAAIhR,EAAOM,MAAQ,QAFzC,GAAAkF,OAGKwL,EAAI,EAAI,IAAM,IAHnBxL,OAGwBwL,KAEtByD,GACJ1T,EAAAC,EAAAC,cAAA,WAASkE,UAAW,sBACjBP,EAAcjE,OAAS,EACtBI,EAAAC,EAAAC,cAAA,UACG2D,EAAcQ,IAAI,SAAAiP,GAAQ,IACnBpO,EAA+CoO,EAA/CpO,KAAMmN,EAAyCiB,EAAzCjB,SAAUD,EAA+BkB,EAA/BlB,SAAUE,EAAqBgB,EAArBhB,OAAQnO,EAAamP,EAAbnP,SACxC,OACEnE,EAAAC,EAAAC,cAAA,MAAIsE,IAAG,WAAAC,OAAa6N,EAAb,KAAA7N,OAAuBN,IAA9B,UACKe,EADL,KACaiL,KAAKwD,MAAMtB,GADxB,MACsCD,EADtC,iBAMJ,MAGFwB,GACJ5T,EAAAC,EAAAC,cAAA,WAASkE,UAAW,yBAClBpE,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,eACbpE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,qBACZrB,EADH,IACUyQ,GAAUnR,KACd,IAHR,aAMArC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,qBACZpB,EADH,IACUwQ,GAAUlR,KACd,IAHR,QAMAtC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,qBACZnB,EADH,IACUuQ,GAAU/E,KACd,IAHR,QAMAzO,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,qBACZlB,EADH,IACYsQ,GAAUjR,KAChB,IAHR,YAUAsR,GACJ7T,EAAAC,EAAAC,cAAA,WAASkE,UAAW,sBAClBpE,EAAAC,EAAAC,cAAA,UACGoO,EAASjK,IAAI,SAAAyP,GAAA,IAAGzI,EAAHyI,EAAGzI,KAAH,OACZrL,EAAAC,EAAAC,cAAA,MAAIsE,IAAK6G,GAAOA,OA1dX0I,GAgegC3E,EAAUF,MAA/C9L,GAheK2Q,GAgeL3Q,IAAgBE,IAheXyQ,GAgeA1Q,UAheA0Q,GAgeWzQ,YAAYE,GAhevBuQ,GAgeuBvQ,KAC9BwQ,GACJhU,EAAAC,EAAAC,cAAA,WAASkE,UAAW,sBAClBpE,EAAAC,EAAAC,cAAA,gBAAAuE,OAAWrB,GAAX,WAAAqB,OAAwBjB,GAAxB,WAAAiB,OAAsCnB,GAAtC,UAIJ,OACEtD,EAAAC,EAAAC,cAAC+T,EAAA,EAAD,KACEjU,EAAAC,EAAAC,cAAA,QAAMkE,UAAW,QACfpE,EAAAC,EAAAC,cAAA,SAAOkE,UAAW,QAChBpE,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,wBAAf,gBACApE,EAAAC,EAAAC,cAAA,MAAIkE,UAAW,oBAAqB8P,MAAOpH,IAA3C,gBAeA9M,EAAAC,EAAAC,cAAA,OAAKkE,UAAW,SACbwP,GACAF,GACAG,GACAG,IAEHhU,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACiU,GAAD,CACE1L,OAAQgH,IACR5F,cAAeA,EACf+B,iBAAkBA,MAgBxB5L,EAAAC,EAAAC,cAAA,WAASkE,UAAW,SAClBpE,EAAAC,EAAAC,cAACkF,EAAD,CACEzD,OAAQ8N,IAAoB5F,GAC5BlG,QAAS8L,IACT7L,aAAcA,GACd0B,UA/YQ,SAAA8O,GAChB1E,EACE,CAAEpN,cAAQ,IACV,SAAAkP,GACE,IAAM7P,EAAS6P,EAAgB4C,GACvBtS,EAA+CH,EAA/CG,WAAYe,EAAmClB,EAAnCkB,gBAAiBJ,EAAkBd,EAAlBc,cAC/BwQ,EAAiB9L,GAAsBiN,GAK7C,QAAOtS,IAFsBe,EADPtB,EAAqB0R,EAAelR,QAGXU,IAAxChE,OAAAkG,EAAA,EAAAlG,CAAA,GAGE+S,EAHF/S,OAAAC,EAAA,EAAAD,CAAA,GAIA2V,EAJA3V,OAAAkG,EAAA,EAAAlG,CAAA,GAKIkD,EALJ,CAMCG,WAAYA,EAAa,OAInC,WACE4O,EAAW,uBAAAjM,OAAwB2P,EAAxB,SA0XP/O,YArXU,SAAA+O,GAAU,OAC5B1E,EACE,CAAErN,cAAQ,KACV,SAAAmP,GACE,IAAM7P,EAAS6P,EAAgB4C,GACvBxR,EAAiDjB,EAAjDiB,aAAcC,EAAmClB,EAAnCkB,gBAAiBJ,EAAkBd,EAAlBc,cAEvC,QAAOG,IAAiBa,IAAiBhB,IAAlChE,OAAAkG,EAAA,EAAAlG,CAAA,GAGE+S,EAHF/S,OAAAC,EAAA,EAAAD,CAAA,GAIA2V,EAJA3V,OAAAkG,EAAA,EAAAlG,CAAA,GAKIkD,EALJ,CAMCiB,aAAcA,EAAe,EAC7BC,gBAAiBA,EAAkB,OAI7C,WACE6N,EAAW,2BAAAjM,OAA4B2P,EAA5B,SAmWPpR,KAAMA,EACNC,KAAMA,EACNF,KAAMA,EACNG,OAAQA,EACRW,cAAeA,EACf0B,YA9UU,SAAA5D,GAAM,OACxB0N,EAAa,SAAAU,GAAY,IACjBjK,EAAcnE,EAAdmE,UADiBuO,EAEMtE,EAASd,OAAhC/L,EAFiBmR,EAEjBnR,OAAQF,EAFSqR,EAETrR,KAAMD,EAFGsR,EAEHtR,KAEhBuR,EAAYxO,EAAUU,OACxB,SAAC+N,EAAKxC,GAAN,OAAmBwC,EAAM1V,EAAiBkT,IAC1C,GAEEyC,EAAY1O,EAAUU,OACxB,SAAC+N,EAAKxC,GAAN,OAAmBwC,EAAMxV,EAAiBgT,IAC1C,GAGE9C,EAAMxQ,OAAAkG,EAAA,EAAAlG,CAAA,GACLsR,EAASd,OADJ,CAERjM,KAAMA,EAAOsR,EAAYpR,EACzBH,KAAMA,EAAOyR,EAAYtR,EACzBA,OAAQ,IAGV,OAAOzE,OAAAkG,EAAA,EAAAlG,CAAA,GACFsR,EADL,CAEEd,cAwTIzJ,cArWY,SAAA4O,GAAU,OAC9B1E,EACE,CAAErN,cAAQ,KACV,SAAAmP,GACE,IAAM7P,EAAS6P,EAAgB4C,GAG/B,QAFuBzS,EAAfG,WAEY,IAAbrD,OAAAkG,EAAA,EAAAlG,CAAA,GAGE+S,EAHF/S,OAAAC,EAAA,EAAAD,CAAA,GAIA2V,EAJA3V,OAAAkG,EAAA,EAAAlG,CAAA,GAKIkD,EALJ,CAMCc,eAAe,OAIzB,WACEiO,EAAW,6BAAAjM,OAA8B2P,EAA9B,eC1PCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/U,EAAAC,EAAAC,cAAC8U,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b83899ae.chunk.js","sourcesContent":["const ResourceTypes = {\n  Shellfish: 'shellfish',\n  Fish: 'fish',\n  Pigs: 'pigs',\n  Birds: 'birds',\n  BushFood: 'bush food',\n  Coconuts: 'coconuts',\n  RootVegetables: 'root vegetables',\n  PreciousShells: 'precious shells',\n  FreshWater: 'fresh water',\n  Flax: 'flax',\n  Bamboo: 'bamboo',\n  SturdyWood: 'sturdy wood',\n  FruitTrees: 'fruit trees',\n  Guano: 'guano'\n}\n\nconst RequiresGathering = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: false,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: true,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: true,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: true,\n  [ResourceTypes.FruitTrees]: false,\n  [ResourceTypes.Guano]: false\n}\n\nconst IsDispersable = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: true,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: true,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: false,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: false,\n  [ResourceTypes.FruitTrees]: true,\n  [ResourceTypes.Guano]: false\n}\n\nconst FoodPerResources = {\n  [ResourceTypes.Shellfish]: 2,\n  [ResourceTypes.Fish]: 2,\n  [ResourceTypes.Pigs]: 1,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 2,\n  [ResourceTypes.Coconuts]: 2,\n  [ResourceTypes.RootVegetables]: 1,\n  [ResourceTypes.PreciousShells]: 0,\n  [ResourceTypes.FreshWater]: 2,\n  [ResourceTypes.Flax]: 0,\n  [ResourceTypes.Bamboo]: 1,\n  [ResourceTypes.SturdyWood]: 0,\n  [ResourceTypes.FruitTrees]: 1,\n  [ResourceTypes.Guano]: 0\n}\n\nconst WoodPerResources = {\n  [ResourceTypes.Shellfish]: 1,\n  [ResourceTypes.Fish]: 0,\n  [ResourceTypes.Pigs]: 1,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 0,\n  [ResourceTypes.Coconuts]: 2,\n  [ResourceTypes.RootVegetables]: 0,\n  [ResourceTypes.PreciousShells]: 2,\n  [ResourceTypes.FreshWater]: 0,\n  [ResourceTypes.Flax]: 2,\n  [ResourceTypes.Bamboo]: 1,\n  [ResourceTypes.SturdyWood]: 2,\n  [ResourceTypes.FruitTrees]: 1,\n  [ResourceTypes.Guano]: 1\n}\n\nconst Boons = {}\nconst Burdens = {}\n\nexport {\n  ResourceTypes,\n  FoodPerResources,\n  WoodPerResources,\n  Boons,\n  Burdens,\n  RequiresGathering,\n  IsDispersable\n}\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as i from '@fortawesome/free-solid-svg-icons'\nimport React from 'react'\n\nconst Colors = {\n  Deep: '#121258',\n  Med: '#5ba9ff',\n  Shallow: '#7ccbff',\n  Light: '#f3f1f1',\n  Outline: '#000d16',\n  Green: '#00b842',\n}\n\nconst fa = (icon, ...props) => {\n  return <FontAwesomeIcon icon={icon} {...props} />\n}\n\nconst fabricIcons = {\n  icons: {\n    chevrondown: fa(i.faChevronDown),\n    chevronright: fa(i.faChevronRight),\n    More: fa(i.faEllipsisH),\n    Cancel: fa(i.faTimes),\n    Plus: fa(i.faPlus),\n    checkmark: fa(i.faCheck)\n  }\n}\n\nconst fabricTheme = {\n  typography: {\n    families: {\n      default: 'Open Sans'\n    }\n  },\n  fonts: {\n    large: {\n      fontFamily: 'Open Sans'\n    },\n    xLarge: {\n      fontFamily: 'Open Sans'\n    },\n    xxLarge: {\n      fontFamily: 'Open Sans'\n    },\n    superLarge: {\n      fontFamily: 'Open Sans'\n    },\n    mega: {\n      fontFamily: 'Open Sans'\n    }\n  },\n  palette: {}\n}\n\nexport { Colors, fabricTheme, fabricIcons }\n\n","const IslandTypes = {\n  Rocks: 'rocky',\n  Guano: 'guano',\n  Small: 'small',\n  Medium: 'medium',\n  Large: 'large'\n}\n\nconst IslandDescriptions = {\n  [IslandTypes.Rocks]:\n    'You are disappointed to find an inhospitable outcrop of rocks in the middle of the ocean.',\n  [IslandTypes.Guano]:\n    'This place is covered in guano, hospitable only to the many gulls that dwell here.',\n  [IslandTypes.Small]: 'You look out upon a modest but hospitable island.',\n  [IslandTypes.Medium]:\n    'You are relieved to find a plentiful and hospitable island.',\n  [IslandTypes.Large]:\n    'You are glad to the gods to find a massive volcanic island, capable of sustaining a large population.'\n}\n\nconst IslandIllustrations = {\n  [IslandTypes.Rocks]: '/island_types/rock.png',\n  [IslandTypes.Guano]: '/island_types/gull3.png',\n  [IslandTypes.Small]: '/island_types/shells.png',\n  [IslandTypes.Medium]: '/island_types/coconuts.png',\n  [IslandTypes.Large]: '/island_types/volcano.png'\n}\n\nconst IslandMaxPopulations = {\n  [IslandTypes.Rocks]: 0,\n  [IslandTypes.Guano]: 5,\n  [IslandTypes.Small]: 10,\n  [IslandTypes.Medium]: 50,\n  [IslandTypes.Large]: 100\n}\n\nconst DevelopmentLevel = {\n  Undeveloped: 'undeveloped',\n  Burgeoning: 'burgeoning',\n  Developed: 'developed',\n  HighlyDeveloped: 'highly developed',\n  Advanced: 'advanced'\n}\n\nexport {\n  IslandTypes,\n  IslandDescriptions,\n  IslandIllustrations,\n  IslandMaxPopulations,\n  DevelopmentLevel\n}\n","import { DevelopmentLevel, IslandMaxPopulations } from './IslandProperties'\n\nconst developmentLevelForIsland = island => {\n  // max population reached and treasures found\n  if (island.numTreasures === 10 && island.hasTemple) {\n    return DevelopmentLevel.Advanced\n  }\n  if (island.hasTemple || island.numTreasures > 5) {\n    return DevelopmentLevel.HighlyDeveloped\n  }\n  // max population reached\n  if (island.population === IslandMaxPopulations[island.type]) {\n    return DevelopmentLevel.Developed\n  }\n  //max population not yet reached\n  if (island.population >= 5) {\n    return DevelopmentLevel.Burgeoning\n  }\n  return DevelopmentLevel.Undeveloped\n}\n\nconst Actions = {\n  LaunchOutrigger: 'outrigger',\n  LaunchFleet: 'fleet'\n}\n\nconst Seasons = {\n  Rainy: 'rainy season',\n  Dry: 'dry season'\n}\n\nconst ActionCosts = {\n  [Actions.LaunchOutrigger]: {\n    woodΔ: -25,\n    foodΔ: -50,\n    energyΔ: -10\n  },\n  [Actions.LaunchFleet]: {\n    woodΔ: -100,\n    foodΔ: -200,\n    energyΔ: -20\n  }\n}\n\nconst InitialIslandState = {\n  population: 0,\n  hasTemple: false,\n  hasSettlement: false,\n  isDiscovered: false,\n  scatterings: [],\n  numDwellings: 0,\n  numTreasures: 0,\n  bonusPopulation: 0\n}\n\nconst InitialPlayerState = {\n  wood: 0,\n  food: 0,\n  wind: 0,\n  energy: 0\n}\n\nconst InitialWorldState = {\n  day: 1,\n  dayOfWeek: 1, // 1-7\n  weekOfYear: 1, // 1-52\n  season: Seasons.Rainy,\n  year: 1\n}\n\nconst MaxDwellings = 5\n\nexport {\n  Seasons,\n  developmentLevelForIsland,\n  ActionCosts,\n  Actions,\n  InitialIslandState,\n  InitialPlayerState,\n  InitialWorldState,\n  MaxDwellings\n}\n","import React from 'react'\nimport './App.css'\nimport {\n  ResourceTypes,\n  RequiresGathering,\n  FoodPerResources,\n  WoodPerResources,\n  IsDispersable\n} from './Resources'\nimport { Colors } from './Theme'\nimport {\n  IslandTypes,\n  IslandMaxPopulations,\n  IslandDescriptions,\n  IslandIllustrations\n} from './IslandProperties'\nimport { developmentLevelForIsland, Actions } from './Game'\nimport { Link } from 'office-ui-fabric-react'\n\nfunction VoyageChoices(props) {\n  const { island, islands, launchVoyage, progressItems } = props\n\n  const canLaunchOutrigger = true\n  const canLaunchFleet = true\n\n  /* allow voyages to neighbours that have a population less than 5  */\n  const voyagableNeighbours = island.neighbours.filter(\n    neighbourName =>\n      //!islands[neighbourName].isDiscovered &&\n      islands[neighbourName].population < 5 &&\n      progressItems.filter(\n        progressItem => progressItem.destName === neighbourName\n      ).length === 0\n  )\n\n  let undiscoveredMessage = (\n    <i>\n      The wind and sea whisper rumors of nearby islands waiting to be\n      discovered.\n    </i>\n  )\n\n  return (\n    <ul className={'measure'}>\n      {voyagableNeighbours.map((neighbourName, n) => {\n        const neighbour = islands[neighbourName]\n        return (\n          <li\n            key={`voyagechoice-${neighbourName}`}\n            style={{\n              marginBottom: '1em',\n              paddingTop: '1em',\n              ...(n > 0 ? { borderTop: `1px solid ${Colors.Outline}` } : {})\n            }}\n          >\n            Launch voyage to <b>{neighbour.isDiscovered ? neighbourName : 'a rumored land'}</b> -\n            <i> {island.neighbourDistance[neighbourName]} km away</i>{' '}\n            {neighbour.isDiscovered ? (\n              '(already discovered)'\n            ) : null}\n            <br />\n            <br />\n            <ul>\n              <li>\n                <Link\n                  onClick={() =>\n                    launchVoyage(\n                      island.name,\n                      neighbourName,\n                      Actions.LaunchOutrigger\n                    )\n                  }\n                  disabled={!canLaunchOutrigger}\n                >\n                  Launch outrigger\n                </Link>{' '}\n                <p>Costs 25 materials, 50 food, 10 energy, 2 people.</p>\n                <p>\n                  If the destination island is hospitable, it will be populated\n                  with the 2 voyagers.\n                </p>\n              </li>\n              <li>\n                <Link\n                  onClick={() =>\n                    launchVoyage(\n                      island.name,\n                      neighbourName,\n                      Actions.LaunchFleet\n                    )\n                  }\n                  disabled={!canLaunchFleet}\n                >\n                  Launch fleet\n                </Link>{' '}\n                <p>\n                  Costs 100 materials, 200 food, 20 energy, 5 people. Required\n                  to populate the destination island.{' '}\n                </p>\n                <p>\n                  If the destination island is hospitable, it will be populated\n                  with the 5 voyagers. If there are any dispersable resources on\n                  this island, one will be chosen at random and transferred to\n                  the destination island.\n                </p>\n              </li>\n            </ul>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nfunction CurrentIsland(props) {\n  const {\n    island,\n    islands,\n    launchVoyage,\n    wood,\n    food,\n    energy,\n    wind,\n    addDwelling,\n    addPerson,\n    progressItems,\n    spendEnergy,\n    addSettlement\n  } = props\n\n  const { type, population, name, hasSettlement } = island\n\n  const canAddPerson = population < IslandMaxPopulations[type] && food >= 50\n  const canAddDwelling = island.numDwellings < 5 && wood >= 100\n  const canAddSettlement = wood >= 250 && population >= 5\n\n  const islandOptions = () => (\n    <ul className={'island-options measure'}>\n      <li>\n        ⚡\n        <Link onClick={() => spendEnergy(island, Actions.SpendEnergy)}>\n          spend energy\n        </Link>\n        <div className={'island-options-details'}>\n          Exchange your current energy for food and materials. The bonus food\n          and materials received is the food and materials on this island\n          multiplied by the current energy.\n        </div>\n      </li>\n      {hasSettlement ? null : (\n        <li>\n          🏠\n          <Link\n            onClick={() => {\n              addSettlement(name)\n            }}\n            disabled={!canAddSettlement}\n            className={'island-options-link'}\n          >\n            build settlement\n          </Link>\n          <div className={'island-options-details'}>\n            <p>\n              Build a settlement. Costs <b>500 materials</b>. At least{' '}\n              <b>5 people</b> need to be present on the island. A settlement\n              allows you to build and add more people to the island.\n            </p>\n            <p>\n              {!canAddSettlement && wood < 250 ? '🙅‍♀️ not enough materials' : ''}\n            </p>\n            <p>\n              {!canAddSettlement && population < 5\n                ? '🙅‍♀️ 5 people required'\n                : ''}\n            </p>\n          </div>\n        </li>\n      )}\n      {!hasSettlement ? null : (\n        <li>\n          👶\n          <Link\n            onClick={() => {\n              addPerson(island.name)\n            }}\n            disabled={!canAddPerson}\n            className={'island-options-link'}\n          >\n            add person\n          </Link>\n          <div className={'island-options-details'}>\n            <p className={'measure'}>\n              Add a person to this island's population. Costs an initial{' '}\n              <b>50 food</b> and then <b>1 food per day</b>.\n            </p>\n            <p className={'measure'}>\n              You need people to explore other islands, upgrade your development\n              level, and harvest certain resources such as{' '}\n              <b>root vegetables</b> and <b>precious shells</b>.\n            </p>\n            <p>\n              {!canAddPerson && food < 50 ? '🙅‍♀️ not enough food' : ''}\n              {!canAddPerson && food >= 50 ? '🙅‍♀️ max population reached' : ''}\n            </p>\n          </div>\n        </li>\n      )}\n      {!hasSettlement ? null : (\n        <li>\n          🏠\n          <Link\n            onClick={() => {\n              addDwelling(island.name)\n            }}\n            disabled={!canAddDwelling}\n            className={'island-options-link'}\n          >\n            build dwelling\n          </Link>\n          <div className={'island-options-details'}>\n            <p>\n              Build a dwelling to house more people on this island. Up to five\n              dwellings can be built on this island. Costs <b>100 materials</b>.\n            </p>\n            {!canAddDwelling && wood < 100 ? '🙅‍♀️ not enough materials' : ''}\n            {!canAddDwelling && wood >= 100 ? '🙅‍♀️ max dwellings reached' : ''}\n          </div>\n        </li>\n      )}\n      {!hasSettlement ? null : (\n        <li>\n          🙏\n          <Link disabled className={'island-options-link'}>\n            build temple\n          </Link>\n          <div className={'island-options-details'}>\n            <p>\n              Build a temple to find treasures to increase the prestige of the\n              island. Costs <b>1000 food</b> and <b>1000 energy</b>. Once a\n              temple is built, resources will be gathered at a faster rate.\n            </p>\n            <h5>scattering</h5>\n            <p>\n              Building a temple will bring forth a scattering: a boon or burden\n              will be given to this island and its descendants.\n            </p>\n            <h5>treasures</h5>\n            <p>\n              Treasures will periodically appear when a temple is built. Acquire\n              all the treasures to maximise an island's development level.\n            </p>\n          </div>\n        </li>\n      )}\n    </ul>\n  )\n\n  const islandInfo = (\n    <section className={'current-island-info'}>\n      <h3>{island.name}</h3>A <b>{island.type} island</b>\n      <p>\n        <i>{IslandDescriptions[island.type]}</i>\n      </p>\n      <ul>\n        <li>\n          Development level: <b>{developmentLevelForIsland(island)}</b>\n        </li>\n        <li>\n          Has settlement: <b>{island.hasSettlement ? 'yes' : 'no'}</b>\n        </li>\n        <li>\n          Population: <b>{island.population}</b>/\n          {IslandMaxPopulations[island.type]}{' '}\n          {island.bonusPopulation > 0 ? (\n            <b className={'bonus'}>+{island.bonusPopulation}</b>\n          ) : (\n            ''\n          )}\n        </li>\n        <li>\n          Treasures: <b>{island.numTreasures}</b>/10\n        </li>\n        <li>\n          Dwellings: <b>{island.numDwellings}</b>/5\n        </li>\n        <li>\n          Has temple: <b>{island.hasTemple ? 'yes' : 'no'}</b>\n        </li>\n      </ul>\n    </section>\n  )\n\n  const islandResources = (\n    <section>\n      <h3>Resources on this island</h3>\n      <br /> {island.resources.length === 0 ? 'Nothing of use.' : ''}\n      <ul>\n        {island.resources.map(res => {\n          return (\n            <li key={`${island.name}_${res}`}>\n              <h5>{res}</h5>\n              <p>\n                ({FoodPerResources[res]} food, {WoodPerResources[res]} materials\n                per day)\n              </p>\n              {RequiresGathering[res] ? (\n                <p>Requires at least 5 people on the island to gather.</p>\n              ) : (\n                ''\n              )}\n              {IsDispersable[res] ? <p>Dispersable</p> : ''}\n            </li>\n          )\n        })}\n      </ul>\n    </section>\n  )\n\n  const unexploredIslands = (\n    <section className={'current-island-expeditions mv2'}>\n      <h4>Voyages from {island.name}</h4>\n      <VoyageChoices\n        island={island}\n        islands={islands}\n        launchVoyage={launchVoyage}\n        progressItems={progressItems}\n      />\n    </section>\n  )\n\n  return (\n    <div className={'current-island mv2'}>\n      <div className={'current-island-header'}>\n        <aside className={'current-island-illustration'}>\n          <figure>\n            <img src={IslandIllustrations[island.type]} />\n          </figure>\n        </aside>\n        {islandInfo}\n      </div>\n      {islandResources}\n      <section className={'current-island-options mv2'}>\n        {islandOptions()}\n      </section>\n      {unexploredIslands}\n    </div>\n  )\n}\n\nconst defaultTreasureProps = {}\n\nfunction Treasure(props) {\n  // TODO add treasure tickers in App state\n  // treasure appears for 1 week each year (a random week)\n  // increasing each time.\n  // player clicks to get the reward. can collect max 10 treasure per island.\n  // takes some time to get the reward.\n\n  const { harvestTreasure } = {\n    ...defaultTreasureProps,\n    ...props\n  }\n\n  return <Link onClick={harvestTreasure}>Harvest the rewards of treasure</Link>\n}\n\nexport { CurrentIsland }\n","import { IslandTypes } from './IslandProperties'\nimport { ResourceTypes } from './Resources';\n\nconst paths = [\n  ['Morrigan', 'The Crook', 16],\n  ['The Crook', 'Morrigan', 16],\n  ['Morrigan', 'Great Arc', 20],\n  ['Great Arc', 'Morrigan', 20],\n  ['Fivestone', 'The Crook', 14],\n  ['The Crook', 'Fivestone', 14],\n  ['Shell Cove', 'Great Arc', 12],\n  ['Great Arc', 'Shell Cove', 12],\n  ['The Splinter', 'Great Arc', 25],\n  ['Great Arc', 'The Splinter', 25],\n  ['The Pip', 'The Splinter', 15],\n  ['The Splinter', 'The Pip', 15],\n  ['Afallon', 'The Splinter', 22],\n  ['The Splinter', 'Afallon', 22],\n  ['Brightreach', 'The Splinter', 23],\n  ['The Splinter', 'Brightreach', 23],\n  ['Afallon', 'The Pip', 7],\n  ['The Pip', 'Afallon', 7],\n  ['Brightreach', 'The Pip', 13],\n  ['The Pip', 'Brightreach', 13],\n  ['Birdstar', 'The Pip', 25],\n  ['The Pip', 'Birdstar', 25],\n  ['Brightreach', 'Afallon', 12],\n  ['Afallon', 'Brightreach', 12],\n  ['Old Crone', 'Birdstar', 20],\n  ['Birdstar', 'Old Crone', 20],\n  ['Gull\\'s Rest', 'Shell Cove', 22],\n  ['Shell Cove', 'Gull\\'s Rest', 22],\n  ['Mother', 'Shell Cove', 28],\n  ['Shell Cove', 'Mother', 28],\n  ['Elder', 'Shell Cove', 30],\n  ['Shell Cove', 'Elder', 30],\n  ['Younger', 'Mother', 15],\n  ['Mother', 'Younger', 15],\n  ['Father', 'Mother', 10],\n  ['Mother', 'Father', 10],\n  ['Twinstone', 'Mother', 11],\n  ['Mother', 'Twinstone', 11],\n  ['Obsidian Point', 'Gull\\'s Rest', 13],\n  ['Gull\\'s Rest', 'Obsidian Point', 13],\n  ['Last Hope', 'Obsidian Point', 30],\n  ['Obsidian Point', 'Last Hope', 30],\n  ['Island of Pearls', 'Obsidian Point', 29],\n  ['Obsidian Point', 'Island of Pearls', 29],\n  ['Island of Pearls', 'Last Hope', 9],\n  ['Last Hope', 'Island of Pearls', 9],\n]\n\nconst neighbourDistance = source => {\n  let pathsForSource = paths.filter(([a, b, dist]) => source === a)\n  let neighbours = pathsForSource.reduce((obj, [a,b,dist]) => {\n    return {...obj, [b]: dist}\n  }, {})\n  return neighbours\n}\n\nconst loc = (name, type, x, y, resources) => ({\n  id: name,\n  name,\n  x,\n  y,\n  type,\n  resources: resources.map(res => ResourceTypes[res]),\n  neighbours: Object.keys(neighbourDistance(name)),\n  neighbourDistance: neighbourDistance(name)\n})\n\nconst ScattershellLocations = {\n  'Shell Cove': loc('Shell Cove', IslandTypes.Small, 63, 49, [\n    'PreciousShells',\n    'Fish'\n  ]),\n  'Great Arc': loc('Great Arc', IslandTypes.Large, 56, 58, [\n    'Flax',\n    'Bamboo',\n    'BushFood',\n    'RootVegetables',\n    'SturdyWood'\n  ]),\n  'Morrigan': loc('Morrigan', IslandTypes.Medium, 46, 75, [\n    'Fish',\n    'RootVegetables',\n    'BushFood',\n    'Flax'\n  ]),\n  'The Crook': loc('The Crook', IslandTypes.Small, 34, 87, [\n    'Shellfish',\n    'Fish',\n    'PreciousShells'\n  ]),\n  Fivestone: loc('Fivestone', IslandTypes.Rocks, 23, 93, []),\n  'Elder': loc('Elder', IslandTypes.Rocks, 87, 55, []),\n  'Younger': loc('Younger', IslandTypes.Guano, 95, 48, [\n    'Guano',\n    'Birds'\n  ]),\n  Mother: loc('Mother', IslandTypes.Medium, 86, 60, [\n    'Flax',\n    'Birds',\n    'PreciousShells',\n    'BushFood'\n  ]),\n  Father: loc('Father', IslandTypes.Medium, 95, 60, [\n    'Bamboo',\n    'Fish',\n    'Pigs',\n    'SturdyWood'\n  ]),\n  'Twinstone': loc('Twinstone', IslandTypes.Rocks, 92, 70, []),\n  Birdstar: loc('Birdstar', IslandTypes.Guano, 40, 30, ['Guano', 'Birds']),\n  'Last Hope': loc('Last Hope', IslandTypes.Large, 97, 8, [\n    'Shellfish',\n    'Fish',\n    'Birds',\n    'SturdyWood',\n    'FreshWater'\n  ]),\n  'Island of Pearls': loc('Island of Pearls', IslandTypes.Small, 98, 18, [\n    'PreciousShells',\n    'Shellfish',\n    'Coconuts'\n  ]),\n  'Obsidian Point': loc('Obsidian Point', IslandTypes.Rocks, 73, 19, []),\n  \"Gull's Rest\": loc(\"Gull's Rest\", IslandTypes.Guano, 70, 30, [\n    'Guano',\n    'Birds'\n  ]),\n  'Old Crone': loc('Old Crone', IslandTypes.Medium, 40, 10, [\n    'Coconuts',\n    'RootVegetables',\n    'Pigs',\n    'BushFood'\n  ]),\n  'The Splinter': loc('The Splinter', IslandTypes.Rocks, 33, 55, []),\n  Afallon: loc('Afallon', IslandTypes.Large, 14, 45, [\n    'FruitTrees',\n    'FreshWater',\n    'SturdyWood',\n    'Birds',\n    'Pigs'\n  ]),\n  'The Pip': loc('The Pip', IslandTypes.Small, 22, 47, [\n    'FruitTrees',\n    'Fish',\n    'SturdyWood'\n  ]),\n  Brightreach: loc('Brightreach', IslandTypes.Medium, 23, 35, [\n    'PreciousShells',\n    'FreshWater',\n    'Flax',\n    'Shellfish'\n  ])\n}\n\nexport default ScattershellLocations\n","import React, { useRef, useEffect } from 'react'\nimport './App.css'\nimport * as SVG from 'svg.js'\nimport rough from 'roughjs/dist/rough.umd'\nimport { Colors } from './Theme'\nimport { IslandTypes } from './IslandProperties'\n\nconst defaultScattershellMapProps = {\n  places: [\n    { id: 'a', x: 80, y: 120, name: 'A' },\n    {\n      id: 'b',\n      x: 200,\n      y: 100,\n      name: 'B',\n      isActive: true,\n      isBig: true\n    },\n    { id: 'c', x: 150, y: 250, name: 'C', isBig: true }\n  ],\n\n  //paths: [['a', 'b'], ['b', 'c']],\n\n  paths: [],\n  baseMarkerOptions: {\n    //stroke: Colors.Outline,\n    fill: Colors.Green, //Colors.Outline,\n    fillStyle: 'solid',\n    hachureAngle: 65,\n    roughness: 2,\n    stroke: 0,\n    fillWeight: 2,\n    bowing: 2\n  },\n\n  activePlaceOptions: {\n    fill: Colors.Green,\n    stroke: Colors.Light,\n    strokeWidth: 5\n  },\n\n  inactivePlaceOptions: {},\n  pathOptions: {},\n\n  sizes: {\n    [IslandTypes.Rocks]: 5,\n    [IslandTypes.Guano]: 10,\n    [IslandTypes.Small]: 15,\n    [IslandTypes.Medium]: 20,\n    [IslandTypes.Large]: 35\n  }\n}\n\nfunction ScattershellMap(props) {\n  const {\n    places,\n    paths,\n    baseMarkerOptions,\n    activePlaceOptions,\n    inactivePlaceOptions,\n    lineOptions,\n    sizes,\n    currentIsland // string\n  } = {\n    ...defaultScattershellMapProps,\n    ...props\n  }\n\n  const xOffset = -40,\n    yOffset = 0\n\n  const _places = places\n  const opts = baseMarkerOptions\n\n  const righties = ['The Pip', 'Elder', 'Father']\n\n  const svgRef = useRef(null)\n\n  function renderMap(svg) {\n    const rc = rough.svg(svg)\n    const draw = SVG(svg) //svg.js draw\n\n    /* draw.click(event => {\n      let x = event.clientX - draw.parent.offsetLeft,\n        y = event.clientY - draw.parent.offsetTop\n      \n        console.log(x,y)\n    })*/\n\n    const placeMarker = ({ name, x, y, type, markerOptions }) => {\n      let circleOpts = {\n        ...opts,\n        ...(name === currentIsland ? activePlaceOptions : inactivePlaceOptions),\n        ...markerOptions\n      }\n      return rc.circle(\n        x * 5 + xOffset,\n        y * 5 + yOffset,\n        sizes[type],\n        circleOpts\n      )\n    }\n    const pathMarker = (place1, place2) =>\n      rc.line(place1.x, place1.y, place2.x, place2.y, {\n        ...opts,\n        ...lineOptions,\n        stroke: Colors.Light\n      })\n\n    const labelMarker = place => {\n      draw\n        .link('javascript:;')\n        .text(place.name)\n        .fill(Colors.Light)\n        .x(\n          place.x * 5 +\n            xOffset +\n            (righties.indexOf(place.name) !== -1 ? +25 + sizes[place.type] : 0)\n        )\n        .y(\n          place.y * 5 +\n            yOffset +\n            (righties.indexOf(place.name) !== -1\n              ? -8\n              : sizes[place.type] / 2 + 1)\n        ) //(place.isBig ? 30 : 20))\n        .font({\n          family: 'Open Sans',\n          size: 16,\n          anchor: 'middle'\n        })\n        .on('click', () => {\n          props.setCurrentIsland(place.name)\n        })\n    }\n\n    Object.values(_places).forEach(place => {\n      if (place.isDiscovered) {\n        let marker = placeMarker(place)\n        svg.appendChild(marker)\n        labelMarker(place)\n      }\n    })\n\n    paths.forEach(([fromId, toId]) => {\n      let marker = pathMarker(_places[fromId], _places[toId])\n      svg.appendChild(marker)\n    })\n  }\n\n  // Render initial\n  useEffect(() => {\n    let svg = svgRef.current\n    renderMap(svg)\n    console.log('rendered initial map')\n  }, [svgRef.current])\n\n  // Re-render when islands are discovered or current island changes\n  const discoveries =\n    Object.entries(places).map(([name,place])=>(place.isDiscovered))\n    \n  const reRender = () => {\n    let svg = svgRef.current\n    if (svg) {\n      console.log('re-rendering the map')\n      while (svg.lastChild) {\n        svg.removeChild(svg.lastChild)\n      }\n      renderMap(svg)\n    }\n  }\n\n  useEffect(reRender, discoveries)\n  useEffect(reRender, [currentIsland])\n\n  return <svg ref={svgRef} className={'map-svg'} />\n}\n\nexport default ScattershellMap\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Fabric, registerIcons, loadTheme } from 'office-ui-fabric-react'\n\nimport './App.css'\nimport { CurrentIsland } from './Island'\nimport ScattershellLocations from './Locations'\nimport ScattershellMap from './Map'\nimport { fabricIcons, fabricTheme, Colors } from './Theme'\nimport {\n  ResourceTypes,\n  RequiresGathering,\n  FoodPerResources,\n  WoodPerResources\n} from './Resources'\nimport {\n  Seasons,\n  Actions,\n  ActionCosts,\n  InitialIslandState,\n  InitialPlayerState,\n  InitialWorldState,\n  MaxDwellings\n} from './Game'\nimport { IslandTypes, IslandMaxPopulations } from './IslandProperties'\n\nconst VERSION = '0.6'\nconst START_LOCATION = ScattershellLocations.Morrigan.name\nconst intervalDuration = 500\n\nconst json = _ => JSON.stringify(_, undefined, 4)\n\nregisterIcons(fabricIcons)\nloadTheme(fabricTheme)\n\n/* https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  const [count100, setCount100] = useState(0)\n  const [messages, setMessages] = useState([])\n\n  const [deltas, setDeltas] = useState({\n    woodΔ: 0,\n    foodΔ: 0,\n    energyΔ: 0,\n    windΔ: 0\n  })\n\n  const [progressItems, setProgressItems] = useState([])\n  const [gameState, setGameState] = useState({\n    islands: Object.keys(ScattershellLocations).reduce(\n      (obj, key) => ({ ...obj, [key]: InitialIslandState }),\n      {}\n    ),\n    player: InitialPlayerState,\n    world: InitialWorldState\n  })\n\n  const { wind, wood, food, energy } = gameState.player\n\n  // the island that is currently being viewed.\n  const [currentIsland, setCurrentIsland] = useState(START_LOCATION)\n\n  const islandsWithStates = () =>\n    Object.keys(ScattershellLocations).reduce(\n      (obj, key) => ({\n        ...obj,\n        [key]: { ...ScattershellLocations[key], ...gameState.islands[key] }\n      }),\n      {}\n    )\n\n  useEffect(() => {\n    /* Game launch */\n    // discover the starting island\n    launchVoyage('Home', START_LOCATION, Actions.LaunchFleet, true)\n  }, [])\n\n  // helper function to update nested state\n  const updateGameState = (\n    resourceChanges,\n    islandUpdateFn,\n    willSpend,\n    free\n  ) => {\n    setGameState(previous => {\n      let { woodΔ, foodΔ, energyΔ, windΔ } = resourceChanges\n\n      // for negative Δs, only update if we have enough\n      const check = (x, Δ) => {\n        let bad = x + Δ < 0\n        return bad || Δ == undefined ? x : x + Δ\n      }\n\n      let player = {\n        wood: check(previous.player.wood, woodΔ),\n        food: check(previous.player.food, foodΔ),\n        wind: Math.min(check(previous.player.wind, windΔ), 100), // 100 = max wind\n        energy: check(previous.player.energy, energyΔ)\n      }\n\n      let insufficient =\n        (woodΔ && player.wood === previous.player.wood) ||\n        (foodΔ && player.food === previous.player.food) ||\n        (windΔ && player.wind === previous.player.wind) ||\n        (energyΔ && player.energy === previous.player.energy)\n\n      let playerUpdate = { ...previous.player, ...(player || {}) }\n      let abort =\n        islandUpdateFn != undefined &&\n        islandUpdateFn(previous.islands) === false\n\n      let islandsUpdate =\n        islandUpdateFn == undefined\n          ? previous.islands\n          : islandUpdateFn(previous.islands)\n\n      let worldUpdate = previous.world\n\n      if (!insufficient && willSpend != undefined && !abort) willSpend()\n\n      let update = {\n        player: playerUpdate,\n        islands: islandsUpdate,\n        world: worldUpdate\n      }\n\n      // if all required amounts were spent, or the txn is free, apply the update\n      return (!insufficient || free) && !abort ? update : previous\n    })\n  }\n\n  const postMessage = msg =>\n    setMessages(previous => [...previous, { live: 10, text: msg }])\n\n  const setDiscovered = voyage => {\n    /*\n    when an island is discovered via voyage, the voyaging people seed the island's population.\n    - unless the destination is a rocky island, in which case the people are lost.\n    - a fleet of people is needed to establish a settlement.\n    - a settlement allows the population to be increased by clicking 'add person'\n    - the safe choice is to launch an outrigger first to scout, then a fleet to populate \n    \n    */\n    const { fromName, toName, numPeople, actiontype } = voyage\n    const to = ScattershellLocations[toName]\n    const isInhospitable = to.type === IslandTypes.Rocks\n\n    const successMsg = `A ${to.type} island was encountered!`\n    const rocksMsg = `An inhospitable outcrop of rocks was encountered. The ${numPeople} voyagers perished.`\n    const msg = `The ${actiontype} voyage from ${fromName} arrived at ${toName}. ${\n      isInhospitable ? rocksMsg : successMsg\n    }`\n    postMessage(msg)\n\n    updateGameState(\n      {},\n      previousIslands => {\n        let previousTo = previousIslands[toName]\n        let previousFrom = previousIslands[fromName] || { scatterings: [] }\n        return {\n          ...previousIslands,\n          [toName]: {\n            ...previousTo,\n            isDiscovered: true,\n            scatterings: previousFrom.scatterings,\n            population: isInhospitable ? 0 : previousTo.population + numPeople\n          }\n        }\n      },\n      null,\n      true // free\n    )\n  }\n\n  const addPerson = islandName => {\n    updateGameState(\n      { foodΔ: -50 },\n      previousIslands => {\n        const island = previousIslands[islandName]\n        const { population, bonusPopulation, hasSettlement } = island\n        const islandLocation = ScattershellLocations[islandName]\n\n        const maxPopulation = IslandMaxPopulations[islandLocation.type]\n        const totalPopulationLimit = bonusPopulation + maxPopulation\n\n        return population === totalPopulationLimit || !hasSettlement\n          ? false\n          : {\n              ...previousIslands,\n              [islandName]: {\n                ...island,\n                population: population + 1\n              }\n            }\n      },\n      () => {\n        postMessage(`a child was born in ${islandName}!`)\n      }\n    )\n  }\n\n  const addDwelling = islandName =>\n    updateGameState(\n      { woodΔ: -100 },\n      previousIslands => {\n        const island = previousIslands[islandName]\n        const { numDwellings, bonusPopulation, hasSettlement } = island\n\n        return numDwellings === MaxDwellings || !hasSettlement\n          ? false\n          : {\n              ...previousIslands,\n              [islandName]: {\n                ...island,\n                numDwellings: numDwellings + 1,\n                bonusPopulation: bonusPopulation + 5\n              }\n            }\n      },\n      () => {\n        postMessage(`a dwelling was built in ${islandName}!`)\n      }\n    )\n\n  const addSettlement = islandName =>\n    updateGameState(\n      { woodΔ: -250 },\n      previousIslands => {\n        const island = previousIslands[islandName]\n        const { population } = island\n        // requires 5 people on the island\n        return population < 5\n          ? false\n          : {\n              ...previousIslands,\n              [islandName]: {\n                ...island,\n                hasSettlement: true\n              }\n            }\n      },\n      () => {\n        postMessage(`a settlement was built in ${islandName}!`)\n      }\n    )\n\n  const spendEnergy = island =>\n    setGameState(previous => {\n      let { resources } = island\n      let { energy, food, wood } = previous.player\n\n      let foodScore = resources.reduce(\n        (sum, resource) => sum + FoodPerResources[resource],\n        0\n      )\n      let woodScore = resources.reduce(\n        (sum, resource) => sum + WoodPerResources[resource],\n        0\n      )\n\n      let player = {\n        ...previous.player,\n        food: food + foodScore * energy,\n        wood: wood + woodScore * energy,\n        energy: 0\n      }\n\n      return {\n        ...previous,\n        player\n      }\n    })\n\n  const updateWorldState = worldFn =>\n    setGameState(previous => {\n      const { world } = previous\n      return {\n        ...previous,\n        world: worldFn(world)\n      }\n    })\n\n  const calculatePerTick = (PerResources, { resources }, hasGatherers) =>\n    resources.reduce(\n      (total, resource) =>\n        total +\n        (!RequiresGathering[resource] ||\n        (RequiresGathering[resource] && hasGatherers)\n          ? PerResources[resource]\n          : 0),\n      0\n    )\n\n  const gameTick = () => {\n    // The game loop.\n\n    setGameState(previous => {\n      const { player, islands } = previous\n      const { wood, food, energy, wind } = player\n\n      let foodΔ = 0,\n        woodΔ = 0,\n        energyΔ = 1,\n        windΔ = Math.floor(Math.random() * 21) - 10\n\n      Object.entries(islands)\n        .filter(([name, island]) => island.isDiscovered)\n        .forEach(([name, island]) => {\n          let islandLocation = ScattershellLocations[name]\n          let hasGatherers = island.population >= 5\n          foodΔ += calculatePerTick(\n            FoodPerResources,\n            islandLocation,\n            hasGatherers\n          )\n          woodΔ += calculatePerTick(\n            WoodPerResources,\n            islandLocation,\n            hasGatherers\n          )\n          foodΔ -= island.population\n        })\n\n      setDeltas({\n        woodΔ,\n        foodΔ,\n        energyΔ,\n        windΔ\n      })\n\n      const newWood = wood + woodΔ,\n      newFood = food + foodΔ,\n      newEnergy = energy + energyΔ,\n      newWind = wind + windΔ\n      return {\n        ...previous,\n        player: {\n          ...player,\n          wood: newWood < 0 ? 0 : newWood,\n          food: newFood < 0 ? 0 : newFood,\n          energy: newEnergy < 0 ? 0 : newEnergy,\n          wind: newWind < 0 ? 0 : newWind\n        }\n      }\n    })\n\n    // if any progressItems have reached their duration, trigger them\n    progressItems\n      .filter(x => x.progress >= x.duration)\n      .forEach(item => {\n        item.action()\n      })\n\n    // update the state of any progressItems\n    // only put back the ones that are still not ready\n    setProgressItems(previous =>\n      previous\n        .filter(x => x.progress < x.duration)\n        .map(item => {\n          let progress = item.progress + 1 + 0.05 * wind\n          return {\n            ...item,\n            progress: progress > item.duration ? item.duration : progress\n          }\n        })\n    )\n\n    updateWorldState(previousWorld => {\n      let { day, dayOfWeek, weekOfYear, year } = previousWorld\n      return {\n        day: day + 1,\n        dayOfWeek: dayOfWeek === 7 ? 1 : dayOfWeek + 1, // 1-7\n        weekOfYear:\n          weekOfYear === 52 ? 1 : dayOfWeek === 7 ? weekOfYear + 1 : weekOfYear, // 1-52\n        year: weekOfYear === 52 ? year + 1 : year\n      }\n    })\n\n    setMessages(previous =>\n      previous\n        .filter(msg => msg.live > 0)\n        .map(msg => ({ ...msg, live: msg.live - 1 }))\n    )\n  }\n\n  // Set the game loop interval\n  useInterval(gameTick, intervalDuration)\n\n  function launchVoyage(fromName, toName, actiontype, isInitial) {\n    const NumVoyagers = {\n      [Actions.LaunchOutrigger]: 2,\n      [Actions.LaunchFleet]: 5\n    }\n\n    const removePopulationFrom = previousIslands => {\n      // remove the population\n      let previousFrom = previousIslands[fromName]\n      let numVoyagers = NumVoyagers[actiontype]\n      let enough = previousFrom.population >= numVoyagers\n\n      // make sure we have enough people on the fromIsland\n      return enough\n        ? {\n            ...previousIslands,\n            [fromName]: {\n              ...previousFrom,\n              population: previousFrom.population - numVoyagers\n            }\n          }\n        : false\n    }\n\n    const addProgressTask = () => {\n      // if spending was successful, append new task to progressItems\n      setProgressItems(previous => {\n        const voyage = {\n          duration: isInitial\n            ? 10\n            : ScattershellLocations[fromName].neighbourDistance[toName] * 10,\n          isInitial,\n          name: isInitial\n            ? `Voyage to ${toName}`\n            : `Voyage from ${fromName} to ${toName} by ${actiontype}`,\n          fromName,\n          toName,\n          actiontype,\n          numPeople: NumVoyagers[actiontype],\n          progress: 0\n        }\n\n        const action = () => {\n          //mark this island as discovered\n          setDiscovered(voyage)\n        }\n\n        return [...previous, { ...voyage, action }]\n      })\n    }\n\n    if (isInitial) {\n      addProgressTask()\n    } else {\n      updateGameState(\n        ActionCosts[actiontype],\n        removePopulationFrom,\n        addProgressTask\n      )\n    }\n  }\n\n  const { woodΔ, foodΔ, energyΔ, windΔ } = deltas\n  const deltaView = Δ =>\n    Δ === 0 ? null : (\n      <span\n        className={'game-meter-delta'}\n        style={{ color: Δ > 0 ? Colors.Green : 'red' }}\n      >{`${Δ > 0 ? '+' : ''}${Δ}`}</span>\n    )\n  const journeys = (\n    <section className={'journeys-container'}>\n      {progressItems.length > 0 ? (\n        <ul>\n          {progressItems.map(item => {\n            let { name, progress, duration, action, destName } = item\n            return (\n              <li key={`journey-${action}-${destName}`}>\n                ⛵ {name} ({Math.round(progress)} / {duration} progress)\n              </li>\n            )\n          })}\n        </ul>\n      ) : null}\n    </section>\n  )\n  const gameMeters = (\n    <section className={'game-meters-container'}>\n      <ul className={'game-meters'}>\n        <li>\n          <h4 className={'game-meter-number'}>\n            {wood} {deltaView(woodΔ)}\n          </h4>{' '}\n          materials\n        </li>\n        <li>\n          <h4 className={'game-meter-number'}>\n            {food} {deltaView(foodΔ)}\n          </h4>{' '}\n          food\n        </li>\n        <li>\n          <h4 className={'game-meter-number'}>\n            {wind} {deltaView(windΔ)}\n          </h4>{' '}\n          wind\n        </li>\n        <li>\n          <h4 className={'game-meter-number'}>\n            {energy} {deltaView(energyΔ)}\n          </h4>{' '}\n          energy\n        </li>\n      </ul>\n    </section>\n  )\n\n  const messagesView = (\n    <section className={'messages-container'}>\n      <ul>\n        {messages.map(({ text }) => (\n          <li key={text}>{text}</li>\n        ))}\n      </ul>\n    </section>\n  )\n\n  const { day, dayOfWeek, weekOfYear, year } = gameState.world\n  const calendarView = (\n    <section className={'calendar-container'}>\n      <p>{`day ${day}, year ${year} (week ${weekOfYear}/52)`}</p>\n    </section>\n  )\n\n  return (\n    <Fabric>\n      <main className={'game'}>\n        <aside className={'left'}>\n          <h2 className={'title title-subtitle'}>sailsongs of</h2>\n          <h1 className={'title title-title'} title={VERSION}>\n            scattershell\n          </h1>\n\n          {/*<section>\n          <ul style={{ padding: '0px' }}>\n            <li>\n              <a href='javascript:;'>new game</a>\n            </li>\n            <li>\n              <a href='javascript:;'>save game</a>\n            </li>\n          </ul>\n        </section>\n        */}\n          <div className={'fixed'}>\n            {gameMeters}\n            {journeys}\n            {messagesView}\n            {calendarView}\n          </div>\n          <section>\n            <ScattershellMap\n              places={islandsWithStates()}\n              currentIsland={currentIsland}\n              setCurrentIsland={setCurrentIsland}\n            />\n          </section>\n\n          {/*<section>\n          <h3>total scores</h3>\n          <ul>\n            <li>islands discovered</li>\n            <li>population</li>\n            <li>dwellings</li>\n            <li>treasures</li>\n            <li>temples</li>\n          <0/ul>\n        </section>*/}\n        </aside>\n\n        <section className={'right'}>\n          <CurrentIsland\n            island={islandsWithStates()[currentIsland]}\n            islands={islandsWithStates()}\n            launchVoyage={launchVoyage}\n            addPerson={addPerson}\n            addDwelling={addDwelling}\n            food={food}\n            wind={wind}\n            wood={wood}\n            energy={energy}\n            progressItems={progressItems}\n            spendEnergy={spendEnergy}\n            addSettlement={addSettlement}\n          />\n        </section>\n      </main>\n    </Fabric>\n  )\n}\n\nexport default App\n\n/* scatterings\n- slower/faster travel (harness wind)\n- slower/faster harvesting of {materials|food}\n- higher/lower population cost\n- intensive agriculture / intensive foraging / intensive fishing\n- trade routes / isolation\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}