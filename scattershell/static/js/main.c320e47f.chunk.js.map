{"version":3,"sources":["Resources.js","Theme.js","IslandProperties.js","Game.js","Island.js","Locations.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["ResourceTypes","Shellfish","Fish","Pigs","Birds","BushFood","Coconuts","RootVegetables","PreciousShells","FreshWater","Flax","Bamboo","SturdyWood","FruitTrees","Guano","FoodPerResources","_FoodPerResources","Object","defineProperty","WoodPerResources","_WoodPerResources","Colors","Deep","Med","Shallow","Light","Outline","Green","fa","icon","_len","arguments","length","props","Array","_key","react_default","a","createElement","index_es","assign","fabricIcons","icons","chevrondown","i","chevronright","More","Cancel","Plus","checkmark","IslandTypes","IslandDescriptions","_IslandDescriptions","IslandIllustrations","_IslandIllustrations","IslandMaxPopulations","_IslandMaxPopulations","DevelopmentLevel","developmentLevelForIsland","island","numTreasures","hasTemple","population","type","Actions","LaunchOutrigger","LaunchSmallFleet","LaunchLargeFleet","ActionCosts","_ActionCosts","woodΔ","foodΔ","energyΔ","initialIslandState","isDiscovered","boonsAndBurdens","numDwellings","defaultIslandProps","id","name","trueName","x","y","resources","neighbours","neighbourDistance","Great Ark","Shellcove","Holystone","CurrentIsland","_defaultIslandProps$p","objectSpread","islands","launchExpedition","wood","food","addDwelling","energy","wind","addPerson","progressItems","undiscoveredNeighbours","filter","neighbourName","progressItem","destName","canAddPerson","canAddDwelling","islandInfo","className","islandResources","map","res","key","concat","unexploredIslands","Fragment","neighbour","n","style","marginBottom","paddingTop","borderTop","Link","onClick","disabled","src","paths","source","_ref","_ref2","slicedToArray","reduce","obj","_ref3","_ref4","b","dist","console","log","loc","keys","ScattershellLocations","Shell Cove","Great Arc","Morrigan","The Crook","Fivestone","Elder","Younger","Mother","Father","Twinstone","Birdstar","Last Hope","Island of Pearls","Obsidian Point","Gull's Rest","Old Crone","The Splinter","Afallon","The Pip","Brightreach","defaultScattershellMapProps","places","isActive","isBig","baseMarkerOptions","fill","fillStyle","hachureAngle","roughness","stroke","fillWeight","bowing","activePlaceOptions","strokeWidth","inactivePlaceOptions","pathOptions","sizes","_sizes","ScattershellMap","_defaultScattershellM","lineOptions","currentIsland","xOffset","yOffset","_places","opts","righties","svgRef","useRef","renderMap","svg","rc","rough","draw","SVG","values","forEach","place","marker","markerOptions","circleOpts","circle","placeMarker","appendChild","link","text","indexOf","font","family","size","anchor","on","setCurrentIsland","labelMarker","place1","place2","fromId","toId","line","useEffect","current","discoveries","entries","_ref5","reRender","lastChild","removeChild","ref","registerIcons","loadTheme","typography","families","default","fonts","large","fontFamily","xLarge","xxLarge","superLarge","mega","palette","intervalDuration","App","_useState","useState","_useState2","count","setCount","_useState3","_useState4","setProgressItems","_useState5","player","_useState6","gameState","setGameState","_gameState$player","_useState7","_useState8","islandsWithStates","setDiscovered","updateGameState","resourceChanges","islandName","islandUpdate","willSpend","free","previous","windΔ","check","Δ","undefined","Math","min","insufficient","update","callback","delay","savedCallback","setInterval","clearInterval","useInterval","_ref6","_ref7","total","resource","floor","random","progress","duration","item","action","notReady","Fabric","round","Map","actiontype","toConsumableArray","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c320e47f.chunk.js","sourcesContent":["const ResourceTypes = {\n  Shellfish: 'shellfish',\n  Fish: 'fish',\n  Pigs: 'pigs',\n  Birds: 'birds',\n  BushFood: 'bush food',\n  Coconuts: 'coconuts',\n  RootVegetables: 'root vegetables',\n  PreciousShells: 'precious shells',\n  FreshWater: 'fresh water',\n  Flax: 'flax',\n  Bamboo: 'bamboo',\n  SturdyWood: 'sturdy wood',\n  FruitTrees: 'fruit trees',\n  Guano: 'guano'\n}\n\nconst FoodPerResources = {\n  [ResourceTypes.Shellfish]: 1,\n  [ResourceTypes.Fish]: 2,\n  [ResourceTypes.Pigs]: 1,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 2,\n  [ResourceTypes.Coconuts]: 1,\n  [ResourceTypes.RootVegetables]: 2,\n  [ResourceTypes.PreciousShells]: 0,\n  [ResourceTypes.FreshWater]: 2,\n  [ResourceTypes.Flax]: 0,\n  [ResourceTypes.Bamboo]: 1,\n  [ResourceTypes.SturdyWood]: 0,\n  [ResourceTypes.FruitTrees]: 1,\n  [ResourceTypes.Guano]: 0\n}\n\nconst WoodPerResources = {\n  [ResourceTypes.Shellfish]: 1,\n  [ResourceTypes.Fish]: 0,\n  [ResourceTypes.Pigs]: 1,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 0,\n  [ResourceTypes.Coconuts]: 1,\n  [ResourceTypes.RootVegetables]: 0,\n  [ResourceTypes.PreciousShells]: 2,\n  [ResourceTypes.FreshWater]: 0,\n  [ResourceTypes.Flax]: 2,\n  [ResourceTypes.Bamboo]: 1,\n  [ResourceTypes.SturdyWood]: 2,\n  [ResourceTypes.FruitTrees]: 1,\n  [ResourceTypes.Guano]: 1\n}\n\nconst Boons = {}\nconst Burdens = {}\n\nexport {\n  ResourceTypes,\n  FoodPerResources,\n  WoodPerResources,\n  Boons,\n  Burdens\n}\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as i from '@fortawesome/free-solid-svg-icons'\nimport React from 'react'\n\nconst Colors = {\n  Deep: '#121258',\n  Med: '#5ba9ff',\n  Shallow: '#7ccbff',\n  Light: '#f3f1f1',\n  Outline: '#000d16',\n  Green: '#00b842',\n}\n\nconst fa = (icon, ...props) => {\n  return <FontAwesomeIcon icon={icon} {...props} />\n}\n\nconst fabricIcons = {\n  icons: {\n    chevrondown: fa(i.faChevronDown),\n    chevronright: fa(i.faChevronRight),\n    More: fa(i.faEllipsisH),\n    Cancel: fa(i.faTimes),\n    Plus: fa(i.faPlus),\n    checkmark: fa(i.faCheck)\n  }\n}\n\nconst fabricTheme = {\n  typography: {\n    families: {\n      default: 'Open Sans'\n    }\n  },\n  fonts: {\n    large: {\n      fontFamily: 'Open Sans'\n    },\n    xLarge: {\n      fontFamily: 'Open Sans'\n    },\n    xxLarge: {\n      fontFamily: 'Open Sans'\n    },\n    superLarge: {\n      fontFamily: 'Open Sans'\n    },\n    mega: {\n      fontFamily: 'Open Sans'\n    }\n  },\n  palette: {}\n}\n\nexport { Colors, fabricTheme, fabricIcons }\n\n","const IslandTypes = {\n  Rocks: 'rocky',\n  Guano: 'guano',\n  Small: 'small',\n  Medium: 'medium',\n  Large: 'large'\n}\n\nconst IslandDescriptions = {\n  [IslandTypes.Rocks]:\n    'You are disappointed to find an inhospitable outcrop of rocks in the middle of the ocean.',\n  [IslandTypes.Guano]:\n    'This place is covered in guano, hospitable only to the many gulls that dwell here.',\n  [IslandTypes.Small]: 'You look out upon a modest but hospitable island.',\n  [IslandTypes.Medium]:\n    'You are relieved to find a plentiful and hospitable island.',\n  [IslandTypes.Large]:\n    'You are glad to the gods to find a massive volcanic island, capable of sustaining a large population.'\n}\n\nconst IslandIllustrations = {\n  [IslandTypes.Rocks]: '/island_types/rock.png',\n  [IslandTypes.Guano]: '/island_types/gull3.png',\n  [IslandTypes.Small]: '/island_types/shells.png',\n  [IslandTypes.Medium]: '/island_types/coconuts.png',\n  [IslandTypes.Large]: '/island_types/volcano.png'\n}\n\nconst IslandMaxPopulations = {\n  [IslandTypes.Rocks]: 0,\n  [IslandTypes.Guano]: 25,\n  [IslandTypes.Small]: 100,\n  [IslandTypes.Medium]: 500,\n  [IslandTypes.Large]: 1000\n}\n\nconst DevelopmentLevel = {\n  Undeveloped: 'undeveloped',\n  Burgeoning: 'burgeoning',\n  Developed: 'developed',\n  HighlyDeveloped: 'highly developed',\n  Advanced: 'advanced'\n}\n\nexport {\n  IslandTypes,\n  IslandDescriptions,\n  IslandIllustrations,\n  IslandMaxPopulations,\n  DevelopmentLevel\n}\n","import {DevelopmentLevel, IslandMaxPopulations} from './IslandProperties'\n\nconst developmentLevelForIsland = island => {\n  // max population reached and treasures found\n  if (island.numTreasures === 10 && island.hasTemple) {\n    return DevelopmentLevel.Advanced\n  }\n  if (island.hasTemple || island.numTreasures > 5) {\n    return DevelopmentLevel.HighlyDeveloped\n  }\n  // max population reached\n  if (island.population === IslandMaxPopulations[island.type]) {\n    return DevelopmentLevel.Developed\n  }\n  //max population not yet reached\n  if (island.population > 5) {\n    return DevelopmentLevel.Burgeoning\n  }\n  return DevelopmentLevel.Undeveloped\n}\n\nconst Actions = {\n  LaunchOutrigger: 'outrigger',\n  LaunchSmallFleet: 'small fleet',\n  LaunchLargeFleet: 'large fleet'\n}\n\nconst ActionCosts = {\n  [Actions.LaunchOutrigger]: {\n    woodΔ: -25,\n    foodΔ: -50,\n    energyΔ: 0\n  },\n  [Actions.LaunchSmallFleet]: {\n    woodΔ: -50,\n    foodΔ: -250,\n    energyΔ: 0\n  },\n  [Actions.LaunchLargeFleet]: {\n    woodΔ: -100,\n    foodΔ: -500,\n    energyΔ: 0\n  }\n}\n\nconst initialIslandState = {\n  population: 0,\n  hasTemple: false,\n  isDiscovered: false,\n  boonsAndBurdens: [],\n  numDwellings: 0,\n  numTreasures: 0\n}\n\n\nexport { developmentLevelForIsland, ActionCosts, Actions, initialIslandState }","import React from 'react'\nimport './App.css'\nimport { ResourceTypes, FoodPerResources, WoodPerResources } from './Resources'\nimport { Colors } from './Theme'\nimport {\n  IslandTypes,\n  IslandMaxPopulations,\n  IslandDescriptions,\n  IslandIllustrations\n} from './IslandProperties'\nimport { developmentLevelForIsland, Actions } from './Game'\nimport { Link } from 'office-ui-fabric-react'\n\nconst defaultIslandProps = {\n  id: '1',\n  name: 'Birdstar',\n  trueName: 'Artheenkwas',\n  isDiscovered: true,\n  x: 30,\n  y: 30,\n  type: IslandTypes.Guano,\n  resources: [],\n  neighbours: ['Great Ark', 'Shellcove', 'Holystone'],\n  neighbourDistance: {\n    'Great Ark': 359,\n    Shellcove: 28,\n    Holystone: 62\n  },\n  population: 0,\n  numTreasures: 0,\n  numDwellings: 0,\n  hasTemple: false\n}\n\nfunction CurrentIsland(props) {\n  const {\n    island,\n    islands,\n    launchExpedition,\n    wood,\n    food,\n    energy,\n    wind,\n    addDwelling,\n    addPerson,\n    progressItems\n  } = {\n    ...defaultIslandProps,\n    ...props\n  }\n\n  const undiscoveredNeighbours = island.neighbours.filter(\n    neighbourName =>\n      !islands[neighbourName].isDiscovered &&\n      progressItems.filter(\n        progressItem => progressItem.destName === neighbourName\n      ).length === 0\n  )\n\n  const expeditionChoices = () => (\n    <ul>\n      {undiscoveredNeighbours.map((neighbour, n) => (\n        <li\n          key={`${neighbour}`}\n          style={{\n            marginBottom: '1em',\n            paddingTop: '1em',\n            ...(n > 0 ? { borderTop: `1px solid ${Colors.Outline}` } : {})\n          }}\n        >\n          Launch expedition to <b>{neighbour}</b> -\n          <i> {island.neighbourDistance[neighbour]} km away</i>\n          <br />\n          <br />\n          <ul>\n            <li>\n              <Link\n                onClick={() =>\n                  launchExpedition(island, neighbour, Actions.LaunchOutrigger)\n                }\n              >\n                Launch outrigger\n              </Link>{' '}\n              costs 25 materials, 50 food, 10 energy.\n            </li>\n            <li>\n              <Link\n              disabled\n                onClick={() =>\n                  launchExpedition(island, neighbour, Actions.LaunchSmallFleet)\n                }\n              >\n                Launch small fleet\n              </Link>{' '}\n              costs 50 materials, 250 food, 10 energy. risks 5 people\n            </li>\n            <li>\n              <Link\n              disabled\n                onClick={() =>\n                  launchExpedition(island, neighbour, Actions.LaunchLargeFleet)\n                }\n              >\n                Launch large fleet\n              </Link>{' '}\n              costs 100 materials, 500 food, 10 energy. risks 10 people\n            </li>\n          </ul>\n        </li>\n      ))}\n    </ul>\n  )\n  const canAddPerson =\n    island.population < IslandMaxPopulations[island.type] && food >= 50\n  const canAddDwelling = island.numDwellings < 5 && wood >= 100\n\n  const islandOptions = () => (\n    <ul className={'island-options measure'}>\n      {/*<li>\n        <a href=';' className={'island-options-link'}>\n          spend energy\n        </a>\n        <div className={'island-options-details'}>\n          Use your current energy on this island to foster development.\n        </div>\n      </li>*/}\n      <li>\n        <Link\n          onClick={() => {\n            addPerson(island.name)\n          }}\n          disabled={!canAddPerson}\n          className={'island-options-link'}\n        >\n          👶 add person\n        </Link>\n        <div className={'island-options-details'}>\n          <p>\n            Add a person to this island's population. Costs <b>50 food</b>.\n          </p>\n          {!canAddPerson && food < 50 ? '🙅‍♀️ not enough food' : ''}\n          {!canAddPerson && food >= 50 ? '🙅‍♀️ max population reached' : ''}\n        </div>\n      </li>\n      <li>\n        <Link\n          onClick={() => {\n            addDwelling(island.name)\n          }}\n          disabled={!canAddDwelling}\n          className={'island-options-link'}\n        >\n          🏠 build dwelling\n        </Link>\n        <div className={'island-options-details'}>\n          <p>\n            Build a dwelling to house more people on this island. Up to five\n            dwellings can be built on this island. Costs <b>100 materials</b>.\n          </p>\n          {!canAddDwelling && wood < 100 ? '🙅‍♀️ not enough materials' : ''}\n          {!canAddDwelling && wood >= 100 ? '🙅‍♀️ max reached' : ''}\n        </div>\n      </li>\n      <li>\n        <Link disabled className={'island-options-link'}>\n          🙏 build temple\n        </Link>\n        <div className={'island-options-details'}>\n          <p>\n            Build a temple to find treasures to increase the prestige of the\n            island. Costs <b>1000 food</b> and <b>1000 energy</b>.\n          </p>\n          <p>\n            Building a temple will bring forth a boon or burden for this island\n            and its descendants.\n          </p>\n        </div>\n      </li>\n    </ul>\n  )\n\n  const islandInfo = (\n    <section className={'current-island-info'}>\n      <h3>{island.name}</h3>A <b>{island.type} island</b>\n      <p>\n        <i>{IslandDescriptions[island.type]}</i>\n      </p>\n      <ul>\n        <li>\n          Development level: <b>{developmentLevelForIsland(island)}</b>\n        </li>\n        <li>\n          Population: <b>{island.population}</b>/\n          {IslandMaxPopulations[island.type]}\n        </li>\n        <li>\n          Treasures: <b>{island.numTreasures}</b>/10\n        </li>\n        <li>\n          Dwellings: <b>{island.numDwellings}</b>/5\n        </li>\n        <li>\n          Has temple: <b>{island.hasTemple ? 'yes' : 'no'}</b>\n        </li>\n      </ul>\n    </section>\n  )\n\n  const islandResources = (\n    <section>\n      <h3>Resources on this island</h3>\n      <br /> {island.resources.length === 0 ? 'Nothing of use.' : ''}\n      <ul>\n        {island.resources.map(res => {\n          return (\n            <li key={`${island.name}_${res}`}>\n              <b>{res}</b>\n              <br />\n              <i>\n                ({FoodPerResources[res]} food, {WoodPerResources[res]} materials\n                per tick)\n              </i>\n            </li>\n          )\n        })}\n      </ul>\n    </section>\n  )\n\n  const unexploredIslands = (\n    <section className={'current-island-expeditions mv2'}>\n      <h4>Unexplored Islands</h4>\n      {undiscoveredNeighbours.length === 0 ? (\n        <i>There are no other islands nearby to discover.</i>\n      ) : (\n        <>\n          <i>\n            The wind and sea whisper rumors of nearby islands waiting to be\n            discovered.\n          </i>\n          {expeditionChoices()}\n        </>\n      )}\n    </section>\n  )\n\n  return (\n    <div className={'current-island mv2'}>\n      <div className={'current-island-header'}>\n        <aside className={'current-island-illustration'}>\n          <figure>\n            <img src={IslandIllustrations[island.type]} />\n          </figure>\n        </aside>\n        {islandInfo}\n      </div>\n      {islandResources}\n      <section className={'current-island-options mv2'}>\n        {islandOptions()}\n      </section>\n      {unexploredIslands}\n    </div>\n  )\n}\n\nconst defaultTreasureProps = {}\n\nfunction Treasure(_props) {\n  // TODO add treasure tickers in App state\n  // when ticker reaches 100, can click Treasure again to receive boon\n  const props = {\n    ...defaultTreasureProps,\n    ..._props\n  }\n  return <a>Harvest the rewards of treasure</a>\n}\n\nexport { CurrentIsland }\n","import { IslandTypes } from './IslandProperties'\nimport { ResourceTypes } from './Resources';\n\nconst paths = [\n  ['Morrigan', 'The Crook', 16],\n  ['The Crook', 'Morrigan', 16],\n  ['Morrigan', 'Great Arc', 20],\n  ['Great Arc', 'Morrigan', 20],\n  ['Fivestone', 'The Crook', 14],\n  ['The Crook', 'Fivestone', 14],\n  ['Shell Cove', 'Great Arc', 12],\n  ['Great Arc', 'Shell Cove', 12],\n  ['The Splinter', 'Great Arc', 25],\n  ['Great Arc', 'The Splinter', 25],\n  ['The Pip', 'The Splinter', 15],\n  ['The Splinter', 'The Pip', 15],\n  ['Afallon', 'The Splinter', 22],\n  ['The Splinter', 'Afallon', 22],\n  ['Brightreach', 'The Splinter', 23],\n  ['The Splinter', 'Brightreach', 23],\n  ['Afallon', 'The Pip', 7],\n  ['The Pip', 'Afallon', 7],\n  ['Brightreach', 'The Pip', 13],\n  ['The Pip', 'Brightreach', 13],\n  ['Birdstar', 'The Pip', 25],\n  ['The Pip', 'Birdstar', 25],\n  ['Brightreach', 'Afallon', 12],\n  ['Afallon', 'Brightreach', 12],\n  ['Old Crone', 'Birdstar', 20],\n  ['Birdstar', 'Old Crone', 20],\n  ['Gull\\'s Rest', 'Shell Cove', 22],\n  ['Shell Cove', 'Gull\\'s Rest', 22],\n  ['Mother', 'Shell Cove', 28],\n  ['Shell Cove', 'Mother', 28],\n  ['Elder', 'Shell Cove', 30],\n  ['Shell Cove', 'Elder', 30],\n  ['Younger', 'Mother', 15],\n  ['Mother', 'Younger', 15],\n  ['Father', 'Mother', 10],\n  ['Mother', 'Father', 10],\n  ['Twinstone', 'Mother', 11],\n  ['Mother', 'Twinstone', 11],\n  ['Obsidian Point', 'Gull\\'s Rest', 13],\n  ['Gull\\'s Rest', 'Obsidian Point', 13],\n  ['Last Hope', 'Obsidian Point', 30],\n  ['Obsidian Point', 'Last Hope', 30],\n  ['Island of Pearls', 'Obsidian Point', 29],\n  ['Obsidian Point', 'Island of Pearls', 29],\n  ['Island of Pearls', 'Last Hope', 9],\n  ['Last Hope', 'Island of Pearls', 9],\n]\n\nconst neighbourDistance = source => {\n  let pathsForSource = paths.filter(([a, b, dist]) => source === a)\n  let neighbours = pathsForSource.reduce((obj, [a,b,dist]) => {\n    return {...obj, [b]: dist}\n  }, {})\n  return neighbours\n}\nconsole.log(neighbourDistance('Last Hope'))\n\nconst loc = (name, type, x, y, resources) => ({\n  id: name,\n  name,\n  x,\n  y,\n  type,\n  resources: resources.map(res => ResourceTypes[res]),\n  neighbours: Object.keys(neighbourDistance(name)),\n  neighbourDistance: neighbourDistance(name)\n})\n\nconst ScattershellLocations = {\n  'Shell Cove': loc('Shell Cove', IslandTypes.Small, 63, 49, [\n    'PreciousShells',\n    'Fish'\n  ]),\n  'Great Arc': loc('Great Arc', IslandTypes.Large, 56, 58, [\n    'Flax',\n    'Bamboo',\n    'BushFood',\n    'RootVegetables',\n    'SturdyWood'\n  ]),\n  'Morrigan': loc('Morrigan', IslandTypes.Medium, 46, 75, [\n    'Fish',\n    'RootVegetables',\n    'BushFood',\n    'Flax'\n  ]),\n  'The Crook': loc('The Crook', IslandTypes.Small, 34, 87, [\n    'Shellfish',\n    'Fish',\n    'PreciousShells'\n  ]),\n  Fivestone: loc('Fivestone', IslandTypes.Rocks, 23, 93, []),\n  'Elder': loc('Elder', IslandTypes.Rocks, 87, 55, []),\n  'Younger': loc('Younger', IslandTypes.Guano, 95, 48, [\n    'Guano',\n    'Birds'\n  ]),\n  Mother: loc('Mother', IslandTypes.Medium, 86, 60, [\n    'Flax',\n    'Birds',\n    'PreciousShells',\n    'BushFood'\n  ]),\n  Father: loc('Father', IslandTypes.Medium, 95, 60, [\n    'Bamboo',\n    'Fish',\n    'Pigs',\n    'SturdyWood'\n  ]),\n  'Twinstone': loc('Twinstone', IslandTypes.Rocks, 92, 70, []),\n  Birdstar: loc('Birdstar', IslandTypes.Guano, 40, 30, ['Guano', 'Birds']),\n  'Last Hope': loc('Last Hope', IslandTypes.Large, 97, 8, [\n    'Shellfish',\n    'Fish',\n    'Birds',\n    'SturdyWood',\n    'FreshWater'\n  ]),\n  'Island of Pearls': loc('Island of Pearls', IslandTypes.Small, 98, 18, [\n    'PreciousShells',\n    'Shellfish',\n    'Coconuts'\n  ]),\n  'Obsidian Point': loc('Obsidian Point', IslandTypes.Rocks, 73, 19, []),\n  \"Gull's Rest\": loc(\"Gull's Rest\", IslandTypes.Guano, 70, 30, [\n    'Guano',\n    'Birds'\n  ]),\n  'Old Crone': loc('Old Crone', IslandTypes.Medium, 40, 10, [\n    'Coconuts',\n    'RootVegetables',\n    'Pigs',\n    'BushFood'\n  ]),\n  'The Splinter': loc('The Splinter', IslandTypes.Rocks, 33, 55, []),\n  Afallon: loc('Afallon', IslandTypes.Large, 14, 45, [\n    'FruitTrees',\n    'FreshWater',\n    'SturdyWood',\n    'Birds',\n    'Pigs'\n  ]),\n  'The Pip': loc('The Pip', IslandTypes.Small, 22, 47, [\n    'FruitTrees',\n    'Fish',\n    'SturdyWood'\n  ]),\n  Brightreach: loc('Brightreach', IslandTypes.Medium, 23, 35, [\n    'PreciousShells',\n    'FreshWater',\n    'Flax',\n    'Shellfish'\n  ])\n}\n\nexport default ScattershellLocations\n","import React, { useRef, useEffect } from 'react'\nimport './App.css'\nimport * as SVG from 'svg.js'\nimport rough from 'roughjs/dist/rough.umd'\nimport { Colors } from './Theme'\nimport { IslandTypes } from './IslandProperties'\n\nconst defaultScattershellMapProps = {\n  places: [\n    { id: 'a', x: 80, y: 120, name: 'A' },\n    {\n      id: 'b',\n      x: 200,\n      y: 100,\n      name: 'B',\n      isActive: true,\n      isBig: true\n    },\n    { id: 'c', x: 150, y: 250, name: 'C', isBig: true }\n  ],\n\n  //paths: [['a', 'b'], ['b', 'c']],\n\n  paths: [],\n  baseMarkerOptions: {\n    //stroke: Colors.Outline,\n    fill: Colors.Green, //Colors.Outline,\n    fillStyle: 'solid',\n    hachureAngle: 65,\n    roughness: 2,\n    stroke: 0,\n    fillWeight: 2,\n    bowing: 2\n  },\n\n  activePlaceOptions: {\n    fill: Colors.Green,\n    stroke: Colors.Light,\n    strokeWidth: 5\n  },\n\n  inactivePlaceOptions: {},\n  pathOptions: {},\n\n  sizes: {\n    [IslandTypes.Rocks]: 5,\n    [IslandTypes.Guano]: 10,\n    [IslandTypes.Small]: 15,\n    [IslandTypes.Medium]: 20,\n    [IslandTypes.Large]: 35\n  }\n}\n\nfunction ScattershellMap(props) {\n  const {\n    places,\n    paths,\n    baseMarkerOptions,\n    activePlaceOptions,\n    inactivePlaceOptions,\n    lineOptions,\n    sizes,\n    currentIsland // string\n  } = {\n    ...defaultScattershellMapProps,\n    ...props\n  }\n\n  const xOffset = -40,\n    yOffset = 0\n\n  const _places = places\n  const opts = baseMarkerOptions\n\n  const righties = ['The Pip', 'Elder', 'Father']\n\n  const svgRef = useRef(null)\n\n  function renderMap(svg) {\n    const rc = rough.svg(svg)\n    const draw = SVG(svg) //svg.js draw\n\n    /* draw.click(event => {\n      let x = event.clientX - draw.parent.offsetLeft,\n        y = event.clientY - draw.parent.offsetTop\n      \n        console.log(x,y)\n    })*/\n\n    const placeMarker = ({ name, x, y, type, markerOptions }) => {\n      let circleOpts = {\n        ...opts,\n        ...(name === currentIsland ? activePlaceOptions : inactivePlaceOptions),\n        ...markerOptions\n      }\n      return rc.circle(\n        x * 5 + xOffset,\n        y * 5 + yOffset,\n        sizes[type],\n        circleOpts\n      )\n    }\n    const pathMarker = (place1, place2) =>\n      rc.line(place1.x, place1.y, place2.x, place2.y, {\n        ...opts,\n        ...lineOptions,\n        stroke: Colors.Light\n      })\n\n    const labelMarker = place => {\n      draw\n        .link('javascript:;')\n        .text(place.name)\n        .fill(Colors.Light)\n        .x(\n          place.x * 5 +\n            xOffset +\n            (righties.indexOf(place.name) !== -1 ? +25 + sizes[place.type] : 0)\n        )\n        .y(\n          place.y * 5 +\n            yOffset +\n            (righties.indexOf(place.name) !== -1\n              ? -8\n              : sizes[place.type] / 2 + 1)\n        ) //(place.isBig ? 30 : 20))\n        .font({\n          family: 'Open Sans',\n          size: 16,\n          anchor: 'middle'\n        })\n        .on('click', () => {\n          props.setCurrentIsland(place.name)\n        })\n    }\n\n    Object.values(_places).forEach(place => {\n      if (place.isDiscovered) {\n        let marker = placeMarker(place)\n        svg.appendChild(marker)\n        labelMarker(place)\n      }\n    })\n\n    paths.forEach(([fromId, toId]) => {\n      let marker = pathMarker(_places[fromId], _places[toId])\n      svg.appendChild(marker)\n    })\n  }\n\n  // Render initial\n  useEffect(() => {\n    let svg = svgRef.current\n    renderMap(svg)\n    console.log('rendered initial map')\n  }, [svgRef.current])\n\n  // Re-render when islands are discovered or current island changes\n  const discoveries =\n    Object.entries(places).map(([name,place])=>(place.isDiscovered))\n    \n  const reRender = () => {\n    let svg = svgRef.current\n    if (svg) {\n      console.log('re-rendering the map')\n      while (svg.lastChild) {\n        svg.removeChild(svg.lastChild)\n      }\n      renderMap(svg)\n    }\n  }\n\n  useEffect(reRender, discoveries)\n  useEffect(reRender, [currentIsland])\n\n  return <svg ref={svgRef} className={'map-svg'} />\n}\n\nexport default ScattershellMap\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Fabric, registerIcons, loadTheme } from 'office-ui-fabric-react'\n\nimport './App.css'\nimport { CurrentIsland } from './Island'\nimport ScattershellLocations from './Locations'\nimport ScattershellMap from './Map'\nimport { fabricIcons, fabricTheme } from './Theme'\nimport { ResourceTypes, FoodPerResources, WoodPerResources } from './Resources'\nimport { Actions, ActionCosts, initialIslandState } from './Game'\n\nconst json = _ => JSON.stringify(_, undefined, 4)\n\nregisterIcons(fabricIcons)\nloadTheme(fabricTheme)\n\n/* island state:\n - population ( adds in exchange for food, up to numDwellings * 5 or population limit)\n - hasTemple\n - isDiscovered\n - boonsAndBurdens (when island is discovered, it gets initialised with source list)\n - numDwellings ( allows higher population. requires wood)\n - numTreasures ( slowly add over time with temple. gives food and wood bonus when clicked)\n\n global state:\n - wood ( auto increments * multipliers)\n - food (auto increments * multipliers)\n - wind (varies randomly but always > 0)\n\n island disovered: \n - set isDiscovered=true on dest\n - copy source boonsAndBurdens to dest\n - initialise with number of people (outrigger, small fleet or large fleet)\n */\n\n\nconst intervalDuration = 500\n\n/* https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  const [progressItems, setProgressItems] = useState([])\n  const [gameState, setGameState] = useState(\n    {\n      islands: Object.keys(ScattershellLocations).reduce(\n        (obj, key) => ({ ...obj, [key]: initialIslandState }),\n        {}\n      ),\n      /* Store player and islands in the same state to ensure all changes are atomic */\n      player: {\n        wood: 0,\n        food: 0,\n        wind: 0,\n        energy: 0\n      }\n    } // { islandname: islandstate, ... }\n  )\n\n  const { wind, wood, food, energy } = gameState.player\n\n  const [currentIsland, setCurrentIsland] = useState('Morrigan')\n  // the island that is currently being viewed.\n\n  const getDiscoveredIslands = () =>\n    Object.entries(gameState.islands).filter(\n      ([name, islandState]) => islandState.isDiscovered\n    )\n\n  const islandsWithStates = () =>\n    Object.keys(ScattershellLocations).reduce(\n      (obj, key) => ({\n        ...obj,\n        [key]: { ...ScattershellLocations[key], ...gameState.islands[key] }\n      }),\n      {}\n    )\n\n  useEffect(() => {\n    /* Game launch */\n    // discover the starting island\n    setDiscovered('Morrigan')\n  }, [])\n\n  // helper function to update nested state\n  const updateGameState = (\n    resourceChanges,\n    islandName,\n    islandUpdate,\n    willSpend,\n    free\n  ) => {\n    setGameState(previous => {\n      let { woodΔ, foodΔ, energyΔ, windΔ } = resourceChanges\n\n      // for negative Δs, only update if we have enough\n      const check = (x, Δ) => {\n        let bad = x + Δ < 0\n        return bad || Δ == undefined ? x : x + Δ\n      }\n\n      let player = {\n        wood: check(previous.player.wood, woodΔ),\n        food: check(previous.player.food, foodΔ),\n        wind: Math.min(check(previous.player.wind, windΔ), 100), // 100 = max wind\n        energy: check(previous.player.energy, energyΔ)\n      }\n\n      let insufficient =\n        (woodΔ && player.wood === previous.player.wood) ||\n        (foodΔ && player.food === previous.player.food) ||\n        (windΔ && player.wind === previous.player.wind) ||\n        (energyΔ && player.energy === previous.player.energy)\n\n      if (!insufficient && willSpend != undefined) willSpend()\n\n      let update = {\n        player: { ...previous.player, ...(player || {}) },\n        islands: {\n          ...previous.islands,\n          ...(islandName && islandUpdate\n            ? {\n                [islandName]: {\n                  ...previous.islands[islandName],\n                  ...islandUpdate\n                }\n              }\n            : {})\n        }\n      }\n\n      // if all required amounts were spent, or the txn is free, apply the update\n      return !insufficient || free ? update : previous\n    })\n  }\n  const setDiscovered = islandName => {\n    console.log(`discovered ${islandName}`)\n    updateGameState({}, islandName, { isDiscovered: true }, null, true)\n  }\n\n  const addPerson = islandName =>\n    updateGameState({ foodΔ: -50 }, islandName, {\n      population: gameState.islands[islandName].population + 1\n    })\n\n  const addDwelling = islandName =>\n    updateGameState({ woodΔ: -100 }, islandName, {\n      numDwellings: gameState.islands[islandName].numDwellings + 1\n    })\n\n  const calculateFoodPerTick = ({ resources }) =>\n    resources.reduce((total, resource) => total + FoodPerResources[resource], 0)\n\n  const calculateWoodPerTick = ({ resources }) =>\n    resources.reduce((total, resource) => total + WoodPerResources[resource], 0)\n\n  const gameTick = () => {\n    let foodΔ = 0,\n      woodΔ = 0,\n      energyΔ = 0,\n      windΔ = 0\n\n    // keep count\n    setCount(count === 9 ? 0 : count + 1)\n\n    // for each discovered island, add wood and food.\n    if (count === 4 || count === 9) {\n      getDiscoveredIslands().forEach(([name, island]) => {\n        foodΔ += calculateFoodPerTick(ScattershellLocations[name])\n        woodΔ += calculateWoodPerTick(ScattershellLocations[name])\n      })\n\n      // always +1 energy\n      energyΔ = 1\n\n      // wind tends positive?\n      windΔ = Math.floor(Math.random() * 21) - 10\n    }\n    // faster for upgraded islands  TODO\n    /*if (count % 3 === 0) {\n      getDiscoveredIslands()\n        .filter(([name, islandState]) => islandState.isFoodBoosted)\n        .forEach(() => {\n          setFood(food + 1)\n        })\n    }*/\n\n    // if any progressItems have reached their duration, trigger them\n    progressItems\n      .filter(x => x.progress >= x.duration)\n      .forEach(item => {\n        item.action()\n      })\n\n    // update the state of any progressItems\n    // only put back the ones that are not ready\n    let notReady = progressItems.filter(x => x.progress < x.duration)\n    setProgressItems(\n      notReady.map(item => {\n        return {\n          ...item,\n          progress: item.progress + 1 + 0.05 * wind\n        }\n      })\n    )\n\n    updateGameState({\n      woodΔ,\n      foodΔ,\n      energyΔ,\n      windΔ\n    })\n  }\n\n  // Set the game loop interval\n  useInterval(gameTick, intervalDuration)\n\n  function launchExpedition(source, destName, actiontype) {\n    // spend the resources immediately\n    updateGameState(ActionCosts[actiontype], null, null, () => {\n      // if spending was successful, append new task to progressItems\n      setProgressItems([\n        ...progressItems,\n        {\n          duration: source.neighbourDistance[destName] * 10,\n          name: `Expedition from ${\n            source.name\n          } to ${destName} via ${actiontype}`,\n          source,\n          destName,\n          action: () => {\n            //mark this island as discovered\n            setDiscovered(destName)\n          },\n          progress: 0\n        }\n      ])\n    })\n  }\n\n  return (\n    <Fabric>\n      <main className={'game'}>\n        <aside className={'left'}>\n          <h2 className={'title title-subtitle'}>sailsongs of</h2>\n          <h1 className={'title title-title'}>scattershell</h1>\n          <div>version 0.5</div>\n\n          {/*<section>\n          <ul style={{ padding: '0px' }}>\n            <li>\n              <a href='javascript:;'>new game</a>\n            </li>\n            <li>\n              <a href='javascript:;'>save game</a>\n            </li>\n          </ul>\n        </section>\n        */}\n\n          <section className={'game-meters-container'}>\n            <ul className={'game-meters'}>\n              <li>\n                <h4 className={'game-meter-number'}>{wood}</h4> materials\n              </li>\n              <li>\n                <h4 className={'game-meter-number'}>{food}</h4> food\n              </li>\n              <li>\n                <h4 className={'game-meter-number'}>{wind}</h4> wind\n              </li>\n              <li>\n                <h4 className={'game-meter-number'}>{energy}</h4> energy\n              </li>\n            </ul>\n          </section>\n\n          <section className={'journeys-container'}>\n            <h4>In progress</h4>\n            {progressItems.length > 0 ? (\n              <ul>\n                {progressItems.map(item => {\n                  let { name, progress, duration, action, destName } = item\n                  return (\n                    <li key={`journey-${action}-${destName}`}>\n                      {name} ({Math.round(progress / 10)} / {duration / 10})\n                    </li>\n                  )\n                })}\n              </ul>\n            ) : (\n              'nothing in progress'\n            )}\n          </section>\n\n          <section>\n            <ScattershellMap\n              places={islandsWithStates()}\n              currentIsland={currentIsland}\n              setCurrentIsland={setCurrentIsland}\n            />\n          </section>\n\n          {/*<section>\n          <h3>total scores</h3>\n          <ul>\n            <li>islands discovered</li>\n            <li>population</li>\n            <li>dwellings</li>\n            <li>treasures</li>\n            <li>temples</li>\n          <0/ul>\n        </section>*/}\n        </aside>\n\n        <section className={'right'}>\n          <CurrentIsland\n            island={islandsWithStates()[currentIsland]}\n            islands={islandsWithStates()}\n            launchExpedition={launchExpedition}\n            addPerson={addPerson}\n            addDwelling={addDwelling}\n            food={food}\n            wind={wind}\n            wood={wood}\n            energy={energy}\n            progressItems={progressItems}\n          />\n        </section>\n      </main>\n    </Fabric>\n  )\n}\n\nexport default App\n\n/* scatterings\n- slower/faster travel (harness wind)\n- \n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}