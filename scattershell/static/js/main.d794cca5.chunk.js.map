{"version":3,"sources":["Theme.js","Resources.js","IslandProperties.js","Locations.js","IslandResources.js","ActionValidation.js","State.js","Actions.js","Game.js","IslandDetails.js","IslandActions.js","IslandVoyages.js","Island.js","Map.js","Progress.js","LoadSave.js","Engine.js","GameMeters.js","Messages.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Colors","Deep","Med","Shallow","Light","Outline","Green","Disabled","Gold","fa","icon","_len","arguments","length","props","Array","_key","react_default","a","createElement","index_es","Object","assign","fabricIcons","icons","chevrondown","i","chevronright","More","Cancel","Plus","checkmark","ResourceTypes","Shellfish","Fish","Pigs","Birds","BushFood","Coconuts","RootVegetables","PreciousShells","FreshWater","Flax","Bamboo","SturdyWood","FruitTrees","Guano","IsGardenFood","_IsGardenFood","defineProperty","RequiresGathering","_RequiresGathering","IsDispersible","_IsDispersible","FoodPerResources","_FoodPerResources","WoodPerResources","_WoodPerResources","IslandTypes","IslandDescriptions","_IslandDescriptions","IslandIllustrations","_IslandIllustrations","IslandMaxPopulations","_IslandMaxPopulations","DevelopmentLevel","Undeveloped","Burgeoning","Developed","HighlyDeveloped","Advanced","paths","neighbourDistance","source","filter","_ref","_ref2","slicedToArray","reduce","obj","_ref3","_ref4","b","dist","objectSpread","loc","name","type","x","y","resources","id","map","res","neighbours","keys","ScattershellLocations","Shell Cove","Great Arc","Morrigan","The Crook","Fivestone","Elder","Younger","Mother","Father","Twinstone","Birdstar","Last Hope","Island of Pearls","Obsidian Point","Gull's Rest","Old Crone","The Splinter","Afallon","The Pip","Brightreach","IslandResources","island","population","numGardens","className","foodQty","woodQty","title","concat","wasDispersed","other","requiresGathering","requiresGatheringSatisfied","isDispersible","key","repeat","validateAction","actionType","game","islandId","populationRequired","player","islands","actionCosts","ActionCosts","populationMet","met","text","toConsumableArray","food","wood","energy","foodCost","woodCost","energyCost","foodDiff","woodDiff","energyDiff","checkCosts","validateLaunch","task","progressItems","isAlreadyGoing","otherItem","isSameActionType","isSameIsland","islandName","isGoingToSameDestination","toName","justStarted","progress","NumVoyagers","validateAddPerson","ActionTypes","AddPerson","bonusPopulation","hasSettlement","islandLocation","totalPopulationLimit","maxPopulationReached","progressItem","validateAddDwelling","AddDwelling","numDwellings","isMaxDwellings","MaxDwellings","validateAddSettlement","AddSettlement","inProgress","SettlementRequiredPeople","validateAddTemple","AddTemple","validateAddGarden","AddGarden","isMaxGardens","MaxGardens","hasHorticulturalResources","updateGameState","resourceChanges","islandUpdateFn","willSpend","free","previous","woodΔ","foodΔ","energyΔ","windΔ","world","wind","check","Δ","undefined","updatedPlayer","Math","min","insufficient","playerUpdate","islandUpdateFnRes","abort","islandsUpdate","update","islandProperty","updateFn","actionPermitted","validations","updateNothing","launchVoyage","isBeginning","cost","Actions","ActionValidators","permitted","numVoyagers","arriveVoyage","fromName","numPeople","toIsland","scatterings","dispersibleResources","LaunchFleet","resource","indexOf","dispersed","randomChoice","toResources","toLocation","toMaxPopulation","toTotalPopulationLimit","newPopulation","newPopulationLimited","isDiscovered","worldTick","worldFn","previousWorld","day","dayOfWeek","weekOfYear","year","LaunchOutrigger","SpendEnergy","_ActionCosts","finishVoyage","actionInstance","destinationIsDiscovered","to","isInhospitable","successMsg","rocksMsg","getVoyageDuration","getVoyageName","_Actions","beginStateChange","fn","foodScore","sum","woodScore","endStateChange","finishMessage","emoji","validate","getDuration","getName","hidden","State","willSpendFn","hasTemple","_ref5","floor","random","calculateResourcesPerTick","resourceType","hasGatherers","PerResources","getsGuanoBonus","total","horitculturalBonus","guanoBonus","islandsDetails","state","StartingLocation","_NumVoyagers","InitialWorldState","season","Winter","Spring","Summer","Harvest","Rainy","InitialGameState","numTreasures","initialIslandState","IslandDetails","foodPerTick","woodPerTick","developmentLevelForIsland","IslandAction","children","onActionClicked","hide","action","requirements","allRequirementsMet","reqs","Link","onClick","disabled","styles","root","isDisabled","color","IslandActionsList","doAction","VoyageChoicesList","voyagableNeighbours","neighbourName","Fragment","n","_objectSpread2","distance","outriggerTask","fleetTask","style","marginBottom","borderTop","Island","progressProvider","islandActions","unexploredIslands","src","defaultScattershellMapProps","places","isActive","isBig","baseMarkerOptions","fill","fillStyle","hachureAngle","roughness","stroke","fillWeight","bowing","activePlaceOptions","strokeWidth","inactivePlaceOptions","pathOptions","sizes","_sizes","ScattershellMap","_defaultScattershellM","lineOptions","currentIsland","xOffset","yOffset","opts","righties","svgRef","useRef","renderMap","svg","rc","rough","draw","SVG","values","forEach","place","marker","markerOptions","circleOpts","circle","placeMarker","appendChild","link","font","family","size","anchor","on","setCurrentIsland","labelMarker","place1","place2","fromId","toId","line","useEffect","current","reRender","lastChild","removeChild","discoveries","entries","ref","ProgressStatus","item","ProgressStatusItem","duration","destName","_Actions$actionType","roundedPct","round","description","ProgressIndicator","label","percentComplete","LoadSavePanel","loadSaveProvider","loadState","serializeState","_useState","useState","_useState2","showPanel","setShowPanel","textareaRef","value","focus","Panel","isOpen","onDismiss","PanelType","smallFixedNear","headerText","loadText","tickInterval","useScattershellEngine","messageProvider","gameState","setGameState","_useState3","_useState4","deltas","setDeltas","add","tick","onProgressItemBeginning","onProgressItemFinished","gameUpdates","updatedProgressItems","isVoyage","clearOneMessage","postMessage","loadSave","saveFile","_","decoded","lzutf8","decompressed","JSON","parse","e","console","error","json","stringify","compressed","newGame","worldTickFn","gameTickFn","_ref6","newWood","newFood","newEnergy","newWind","gameUpdate","progressTickFn","GameMeter","qty","interpolator","useSpring","from","config","web","span","interpolate","num","numeral","format","deltaView","GameMeters","Messages","messages","messaging","Calendar","VERSION","intervalDuration","registerIcons","loadTheme","typography","families","default","fonts","large","fontFamily","xLarge","xxLarge","superLarge","mega","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","App","setMessages","msg","live","useMessaging","_useScattershellEngin","callback","delay","savedCallback","setInterval","clearInterval","useInterval","Fabric","marginTop","Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d794cca5.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as i from '@fortawesome/free-solid-svg-icons'\nimport React from 'react'\n\nconst Colors = {\n  Deep: '#121258',\n  Med: '#5ba9ff',\n  Shallow: '#7ccbff',\n  Light: '#f3f1f1',\n  Outline: '#000d16',\n  Green: '#00b842',\n  Disabled: '#8d8d8d',\n  Gold: '#f1da37'\n}\n\nconst fa = (icon, ...props) => {\n  return <FontAwesomeIcon icon={icon} {...props} />\n}\n\nconst fabricIcons = {\n  icons: {\n    chevrondown: fa(i.faChevronDown),\n    chevronright: fa(i.faChevronRight),\n    More: fa(i.faEllipsisH),\n    Cancel: fa(i.faTimes),\n    Plus: fa(i.faPlus),\n    checkmark: fa(i.faCheck)\n  }\n}\n\nconst fabricTheme = {\n  typography: {\n    families: {\n      default: 'Open Sans'\n    }\n  },\n  fonts: {\n    large: {\n      fontFamily: 'Open Sans'\n    },\n    xLarge: {\n      fontFamily: 'Open Sans'\n    },\n    xxLarge: {\n      fontFamily: 'Open Sans'\n    },\n    superLarge: {\n      fontFamily: 'Open Sans'\n    },\n    mega: {\n      fontFamily: 'Open Sans'\n    }\n  },\n  palette: {\n    themePrimary: '#5ba9ff',\n    themeLighterAlt: '#04070a',\n    themeLighter: '#0f1b29',\n    themeLight: '#1c334d',\n    themeTertiary: '#376699',\n    themeSecondary: '#5196e0',\n    themeDarkAlt: '#6cb3ff',\n    themeDark: '#83bfff',\n    themeDarker: '#a4d0ff',\n    neutralLighterAlt: '#111157',\n    neutralLighter: '#111155',\n    neutralLight: '#101052',\n    neutralQuaternaryAlt: '#0f0f4c',\n    neutralQuaternary: '#0f0f49',\n    neutralTertiaryAlt: '#0e0e46',\n    neutralTertiary: '#f6f5f5',\n    neutralSecondary: '#f8f6f6',\n    neutralPrimaryAlt: '#f9f8f8',\n    neutralPrimary: '#f3f1f1',\n    neutralDark: '#fcfbfb',\n    black: '#fdfdfd',\n    white: '#121258'\n  }\n}\n\nexport { Colors, fabricTheme, fabricIcons }\n","const ResourceTypes = {\n  Shellfish: 'shellfish',\n  Fish: 'fish',\n  Pigs: 'pigs',\n  Birds: 'birds',\n  BushFood: 'bush food',\n  Coconuts: 'coconuts',\n  RootVegetables: 'root vegetables',\n  PreciousShells: 'precious shells',\n  FreshWater: 'fresh water',\n  Flax: 'flax',\n  Bamboo: 'bamboo',\n  SturdyWood: 'sturdy wood',\n  FruitTrees: 'fruit trees',\n  Guano: 'guano'\n}\n\nconst IsGardenFood = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: false,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: false,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: false,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: false,\n  [ResourceTypes.FruitTrees]: true,\n  [ResourceTypes.Guano]: false\n}\n\nconst RequiresGathering = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: false,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: true,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: true,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: true,\n  [ResourceTypes.FruitTrees]: false,\n  [ResourceTypes.Guano]: false\n}\n\nconst IsDispersible = {\n  [ResourceTypes.Shellfish]: false,\n  [ResourceTypes.Fish]: false,\n  [ResourceTypes.Pigs]: true,\n  [ResourceTypes.Birds]: false,\n  [ResourceTypes.BushFood]: false,\n  [ResourceTypes.Coconuts]: true,\n  [ResourceTypes.RootVegetables]: true,\n  [ResourceTypes.PreciousShells]: false,\n  [ResourceTypes.FreshWater]: false,\n  [ResourceTypes.Flax]: false,\n  [ResourceTypes.Bamboo]: false,\n  [ResourceTypes.SturdyWood]: false,\n  [ResourceTypes.FruitTrees]: true,\n  [ResourceTypes.Guano]: true\n}\n\nconst FoodPerResources = {\n  [ResourceTypes.Shellfish]: 2,\n  [ResourceTypes.Fish]: 3,\n  [ResourceTypes.Pigs]: 2,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 3,\n  [ResourceTypes.Coconuts]: 2,\n  [ResourceTypes.RootVegetables]: 1,\n  [ResourceTypes.PreciousShells]: 0,\n  [ResourceTypes.FreshWater]: 2,\n  [ResourceTypes.Flax]: 0,\n  [ResourceTypes.Bamboo]: 1,\n  [ResourceTypes.SturdyWood]: 0,\n  [ResourceTypes.FruitTrees]: 2,\n  [ResourceTypes.Guano]: 0\n}\n\nconst WoodPerResources = {\n  [ResourceTypes.Shellfish]: 1,\n  [ResourceTypes.Fish]: 0,\n  [ResourceTypes.Pigs]: 1,\n  [ResourceTypes.Birds]: 1,\n  [ResourceTypes.BushFood]: 0,\n  [ResourceTypes.Coconuts]: 2,\n  [ResourceTypes.RootVegetables]: 0,\n  [ResourceTypes.PreciousShells]: 2,\n  [ResourceTypes.FreshWater]: 0,\n  [ResourceTypes.Flax]: 3,\n  [ResourceTypes.Bamboo]: 2,\n  [ResourceTypes.SturdyWood]: 2,\n  [ResourceTypes.FruitTrees]: 1,\n  [ResourceTypes.Guano]: 2\n}\n\nconst Boons = {}\nconst Burdens = {}\n\nexport {\n  ResourceTypes,\n  FoodPerResources,\n  WoodPerResources,\n  Boons,\n  Burdens,\n  RequiresGathering,\n  IsDispersible,\n  IsGardenFood\n}\n","const IslandTypes = {\n  Rocks: 'rocky',\n  Guano: 'guano',\n  Small: 'small',\n  Medium: 'medium',\n  Large: 'large'\n}\n\nconst IslandDescriptions = {\n  [IslandTypes.Rocks]:\n    'You are disappointed to find an inhospitable outcrop of rocks in the middle of the ocean.',\n  [IslandTypes.Guano]:\n    'This place is covered in guano, hospitable only to the many gulls that dwell here.',\n  [IslandTypes.Small]: 'You look out upon a modest but hospitable island.',\n  [IslandTypes.Medium]:\n    'You are relieved to find a hospitable and plentiful island.',\n  [IslandTypes.Large]:\n    'You are thankful to the gods to find a massive volcanic island, capable of sustaining a large population.'\n}\n\nconst IslandIllustrations = {\n  [IslandTypes.Rocks]: '/island_types/rock_cropped.png',\n  [IslandTypes.Guano]: '/island_types/gull3_cropped.png',\n  [IslandTypes.Small]: '/island_types/shells_cropped.png',\n  [IslandTypes.Medium]: '/island_types/coconuts_cropped.png',\n  [IslandTypes.Large]: '/island_types/volcano_cropped.png'\n}\n\nconst IslandMaxPopulations = {\n  [IslandTypes.Rocks]: 0,\n  [IslandTypes.Guano]: 5,\n  [IslandTypes.Small]: 10,\n  [IslandTypes.Medium]: 25,\n  [IslandTypes.Large]: 50\n}\n\nconst DevelopmentLevel = {\n  Undeveloped: 'undeveloped',\n  Burgeoning: 'burgeoning',\n  Developed: 'developed',\n  HighlyDeveloped: 'highly developed',\n  Advanced: 'advanced'\n}\n\nexport {\n  IslandTypes,\n  IslandDescriptions,\n  IslandIllustrations,\n  IslandMaxPopulations,\n  DevelopmentLevel\n}\n","import { IslandTypes } from './IslandProperties'\nimport { ResourceTypes } from './Resources';\n\nconst paths = [\n  ['Morrigan', 'The Crook', 16],\n  ['The Crook', 'Morrigan', 16],\n  ['Morrigan', 'Great Arc', 20],\n  ['Great Arc', 'Morrigan', 20],\n  ['Fivestone', 'The Crook', 14],\n  ['The Crook', 'Fivestone', 14],\n  ['Shell Cove', 'Great Arc', 12],\n  ['Great Arc', 'Shell Cove', 12],\n  ['The Splinter', 'Great Arc', 25],\n  ['Great Arc', 'The Splinter', 25],\n  ['Great Arc', 'The Pip', 40], // no way back!\n  ['The Pip', 'The Splinter', 15],\n  ['The Splinter', 'The Pip', 15],\n  ['Afallon', 'The Splinter', 22],\n  ['The Splinter', 'Afallon', 22],\n  ['Brightreach', 'The Splinter', 23],\n  ['The Splinter', 'Brightreach', 23],\n  ['Afallon', 'The Pip', 7],\n  ['The Pip', 'Afallon', 7],\n  ['Brightreach', 'The Pip', 13],\n  ['The Pip', 'Brightreach', 13],\n  ['Birdstar', 'The Pip', 25],\n  ['The Pip', 'Birdstar', 25],\n  ['Brightreach', 'Afallon', 12],\n  ['Afallon', 'Brightreach', 12],\n  ['Old Crone', 'Birdstar', 20],\n  ['Birdstar', 'Old Crone', 20],\n  ['Gull\\'s Rest', 'Shell Cove', 22],\n  ['Shell Cove', 'Gull\\'s Rest', 22],\n  ['Mother', 'Shell Cove', 28],\n  ['Shell Cove', 'Mother', 28],\n  ['Elder', 'Shell Cove', 30],\n  ['Shell Cove', 'Elder', 30],\n  ['Younger', 'Mother', 15],\n  ['Mother', 'Younger', 15],\n  ['Father', 'Mother', 10],\n  ['Mother', 'Father', 10],\n  ['Twinstone', 'Mother', 11],\n  ['Mother', 'Twinstone', 11],\n  ['Obsidian Point', 'Gull\\'s Rest', 13],\n  ['Gull\\'s Rest', 'Obsidian Point', 13],\n  ['Last Hope', 'Obsidian Point', 30],\n  ['Obsidian Point', 'Last Hope', 30],\n  ['Island of Pearls', 'Obsidian Point', 29],\n  ['Obsidian Point', 'Island of Pearls', 29],\n  ['Island of Pearls', 'Last Hope', 9],\n  ['Last Hope', 'Island of Pearls', 9],\n]\n\nconst neighbourDistance = source => {\n  let pathsForSource = paths.filter(([a, b, dist]) => source === a)\n  let neighbours = pathsForSource.reduce((obj, [a,b,dist]) => {\n    return {...obj, [b]: dist}\n  }, {})\n  return neighbours\n}\n\nconst loc = (name, type, x, y, resources) => ({\n  id: name,\n  name,\n  x,\n  y,\n  type,\n  resources: resources.map(res => ResourceTypes[res]),\n  neighbours: Object.keys(neighbourDistance(name)),\n  neighbourDistance: neighbourDistance(name)\n})\n\nconst ScattershellLocations = {\n  'Shell Cove': loc('Shell Cove', IslandTypes.Small, 63, 49, [\n    'PreciousShells',\n    'Fish'\n  ]),\n  'Great Arc': loc('Great Arc', IslandTypes.Large, 56, 58, [\n    'Flax',\n    'Bamboo',\n    'BushFood',\n    'SturdyWood'\n  ]),\n  'Morrigan': loc('Morrigan', IslandTypes.Medium, 46, 75, [\n    'Fish',\n    'RootVegetables',\n    'BushFood',\n    'Flax'\n  ]),\n  'The Crook': loc('The Crook', IslandTypes.Small, 34, 87, [\n    'Shellfish',\n    'Fish',\n    'PreciousShells'\n  ]),\n  Fivestone: loc('Fivestone', IslandTypes.Rocks, 23, 93, []),\n  'Elder': loc('Elder', IslandTypes.Rocks, 87, 55, []),\n  'Younger': loc('Younger', IslandTypes.Guano, 95, 48, [\n    'Guano',\n    'Birds'\n  ]),\n  Mother: loc('Mother', IslandTypes.Medium, 86, 60, [\n    'Flax',\n    'Birds',\n    'PreciousShells',\n    'BushFood'\n  ]),\n  Father: loc('Father', IslandTypes.Medium, 95, 60, [\n    'Bamboo',\n    'Fish',\n    'Pigs',\n    'SturdyWood'\n  ]),\n  'Twinstone': loc('Twinstone', IslandTypes.Rocks, 92, 70, []),\n  Birdstar: loc('Birdstar', IslandTypes.Guano, 40, 30, ['Guano', 'Birds']),\n  'Last Hope': loc('Last Hope', IslandTypes.Large, 97, 8, [\n    'Shellfish',\n    'Birds',\n    'SturdyWood',\n    'FreshWater',\n    'FruitTrees'\n  ]),\n  'Island of Pearls': loc('Island of Pearls', IslandTypes.Small, 98, 18, [\n    'PreciousShells',\n    'Shellfish',\n    'Coconuts'\n  ]),\n  'Obsidian Point': loc('Obsidian Point', IslandTypes.Rocks, 73, 19, []),\n  \"Gull's Rest\": loc(\"Gull's Rest\", IslandTypes.Guano, 70, 30, [\n    'Guano',\n    'Birds'\n  ]),\n  'Old Crone': loc('Old Crone', IslandTypes.Medium, 40, 10, [\n    'Coconuts',\n    'RootVegetables',\n    'Pigs',\n    'BushFood'\n  ]),\n  'The Splinter': loc('The Splinter', IslandTypes.Rocks, 33, 55, []),\n  Afallon: loc('Afallon', IslandTypes.Large, 14, 45, [\n    'FruitTrees',\n    'FreshWater',\n    'SturdyWood',\n    'Birds',\n    'Pigs'\n  ]),\n  'The Pip': loc('The Pip', IslandTypes.Small, 22, 47, [\n    'FruitTrees',\n    'Fish',\n    'SturdyWood'\n  ]),\n  Brightreach: loc('Brightreach', IslandTypes.Medium, 23, 35, [\n    'PreciousShells',\n    'FreshWater',\n    'Flax',\n    'Shellfish'\n  ])\n}\n\nexport { ScattershellLocations }\n","import React from 'react'\nimport {\n  FoodPerResources,\n  WoodPerResources,\n  IsDispersible,\n  RequiresGathering,\n  IsGardenFood,\n  ResourceTypes\n} from './Resources'\nimport { ScattershellLocations } from './Locations'\n\nfunction IslandResources(props) {\n  const { island } = props\n  const { resources, name, population, numGardens } = island\n  return (\n    <section className={'current-island-resources'}>\n      {resources.length === 0 ? (\n        'Nothing to use.'\n      ) : (\n        <ul>\n          {resources.map(res => {\n            const foodQty = FoodPerResources[res]\n            const woodQty = WoodPerResources[res]\n            const title = `${foodQty} food, ${woodQty} materials per day ${\n              numGardens > 0 && IsGardenFood[res]\n                ? `plus ${numGardens} food from gardens`\n                : ''\n            }`\n            const wasDispersed =\n              ScattershellLocations[island.name].resources.filter(\n                other => other === res\n              ).length === 0\n\n            const requiresGathering = RequiresGathering[res]\n            const requiresGatheringSatisfied =\n              requiresGathering && population >= 5 ? '✔' : null\n            const isDispersible = IsDispersible[res]\n            return (\n              <li title={title} key={`${res}`}>\n                <b>{res}</b> {'⚒️'.repeat(woodQty)} {'🥝'.repeat(foodQty)}{' '}\n                {numGardens > 0 && IsGardenFood[res]\n                  ? '🥬'.repeat(numGardens)\n                  : ''}\n                {requiresGathering || isDispersible ? (\n                  <ul className={'current-island-resources-details'}>\n                    <li>\n                      {requiresGathering\n                        ? '- requires 5 people to gather'\n                        : null}\n                      {requiresGatheringSatisfied}\n                    </li>\n                    <li>{isDispersible ? '- dispersible' : null}</li>\n                    <li>{wasDispersed ? '- was dispersed here' : null }</li>\n                    <li>{res===ResourceTypes.Guano ? '- will provide bonus to garden' : null}</li>\n                  </ul>\n                ) : null}\n              </li>\n            )\n          })}\n        </ul>\n      )}\n    </section>\n  )\n}\n\nexport { IslandResources }\n","import { IslandMaxPopulations } from './IslandProperties'\nimport {\n  MaxDwellings,\n  MaxGardens,\n  SettlementRequiredPeople,\n  NumVoyagers\n} from './Game'\nimport { ActionCosts, ActionTypes } from './Actions'\nimport { IsGardenFood } from './Resources'\nimport { ScattershellLocations } from './Locations'\n\nfunction checkCosts(player, actionCosts) {\n  const { food, wood, energy } = player\n\n  const foodCost = actionCosts['foodΔ']\n  const woodCost = actionCosts['woodΔ']\n  const energyCost = actionCosts['energyΔ']\n\n  const foodDiff = food + foodCost\n  const woodDiff = wood + woodCost\n  const energyDiff = energy + energyCost\n\n  return [\n    foodCost == null\n      ? null\n      : foodDiff >= 0\n      ? { met: true, text: `${-foodCost} food ✔` }\n      : { met: false, text: `not enough food (need ${-foodDiff})` },\n    woodCost == null\n      ? null\n      : woodDiff >= 0\n      ? { met: true, text: `${-woodCost} materials ✔` }\n      : { met: false, text: `not enough materials (need ${-woodDiff})` },\n    energyCost == null\n      ? null\n      : energyDiff >= 0\n      ? { met: true, text: `${-energyCost} energy ✔` }\n      : { met: false, text: `not enough energy (need ${-energyDiff})` }\n  ].filter(x => x != null)\n}\n\nfunction validateAction(actionType, game, islandId, populationRequired) {\n  const { player, islands } = game\n  const island = islands[islandId]\n  const { population } = island\n\n  const actionCosts = ActionCosts[actionType]\n\n  const populationMet =\n    populationRequired == null\n      ? null\n      : population >= populationRequired\n      ? { met: true, text: `${populationRequired} people ✔` }\n      : {\n          met: false,\n          text: `not enough people (need ${populationRequired -\n            population} more)`\n        }\n\n  return [...checkCosts(player, actionCosts), populationMet].filter(\n    x => x != null\n  )\n}\n\nconst validateLaunch = (game, islandId, task) => {\n  const { progressItems, islands } = game\n  const { actionType } = task\n\n  const isAlreadyGoing =\n    progressItems.filter(otherItem => {\n      const isSameActionType = actionType === otherItem.actionType\n      const isSameIsland = islandId === otherItem.islandName\n      const isGoingToSameDestination =\n        isSameActionType && task.toName === otherItem.task.toName\n      const justStarted = otherItem.progress === 0\n      return isSameIsland && isGoingToSameDestination && !justStarted\n    }).length > 0\n\n  return [\n    ...validateAction(actionType, game, islandId, NumVoyagers[actionType]),\n    {\n      met: !isAlreadyGoing,\n      text: isAlreadyGoing ? `already voyaging` : ''\n    }\n  ]\n}\n\nconst validateAddPerson = (game, islandId) => {\n  const { islands, progressItems } = game\n  const actionType = ActionTypes.AddPerson\n  const island = islands[islandId]\n  const { population, bonusPopulation, hasSettlement } = island\n  const islandLocation = ScattershellLocations[islandId]\n\n  const maxPopulation = IslandMaxPopulations[islandLocation.type]\n  const totalPopulationLimit = bonusPopulation + maxPopulation\n\n  // include population in progress\n  const queuedPopulation = progressItems.filter(progressItem => {\n    return (\n      progressItem.actionType === actionType &&\n      progressItem.islandName === islandId\n    )\n  }).length // assumes 1 person per action\n\n  const maxPopulationReached =\n    population + queuedPopulation === totalPopulationLimit\n\n  return [\n    ...validateAction(actionType, game, islandId),\n    {\n      met: !maxPopulationReached,\n      text: maxPopulationReached ? 'max population reached' : ''\n    },\n    {\n      met: hasSettlement,\n      text: !hasSettlement ? 'no settlement' : ''\n    }\n  ]\n}\n\nconst validateAddDwelling = (game, islandId) => {\n  const actionType = ActionTypes.AddDwelling\n  const { islands, progressItems } = game\n  const island = islands[islandId]\n  const { numDwellings, hasSettlement } = island\n  const inProgress = progressItems.filter(\n    progressItem =>\n      progressItem.actionType === actionType &&\n      progressItem.islandName === islandId\n  ).length // assumes 1 dwelling per action\n\n  const isMaxDwellings = numDwellings + inProgress === MaxDwellings\n  return [\n    ...validateAction(ActionTypes.AddDwelling, game, islandId),\n    {\n      met: !isMaxDwellings,\n      text: isMaxDwellings ? 'max dwellings built here' : ''\n    },\n    {\n      met: hasSettlement,\n      text: !hasSettlement ? 'no settlement' : ''\n    }\n  ]\n}\n\nconst validateAddSettlement = (game, islandId) => {\n  const { progressItems } = game\n  const actionType = ActionTypes.AddSettlement\n  const inProgress =\n    progressItems.filter(\n      progressItem =>\n        progressItem.actionType === actionType &&\n        progressItem.islandName === islandId\n    ).length === 1\n\n  return [\n    ...validateAction(\n      ActionTypes.AddSettlement,\n      game,\n      islandId,\n      SettlementRequiredPeople\n    ),\n    {\n      met: !inProgress,\n      text: inProgress ? 'settlement in progress' : ''\n    }\n  ]\n}\n\nconst validateAddTemple = (game, islandId) => {\n  const { progressItems } = game\n  const actionType = ActionTypes.AddTemple\n  const inProgress =\n    progressItems.filter(\n      progressItem =>\n        progressItem.actionType === actionType &&\n        progressItem.islandName === islandId\n    ).length === 1\n\n  return [\n    ...validateAction(ActionTypes.AddTemple, game, islandId),\n    {\n      met: !inProgress,\n      text: inProgress ? 'temple in progress' : ''\n    }\n  ]\n}\n\n// todo requires settlement\nconst validateAddGarden = (game, islandId) => {\n  const { islands, progressItems } = game\n  const island = islands[islandId]\n  const { resources, numGardens } = island\n\n  // include any gardens in progress\n  const actionType = ActionTypes.AddGarden\n  const inProgressGardens = progressItems.filter(\n    progressItem =>\n      progressItem.actionType === actionType &&\n      progressItem.islandName === islandId\n  ).length\n\n  const isMaxGardens = numGardens + inProgressGardens === MaxGardens\n\n  // make sure the island has at least one horticultural resource\n  const hasHorticulturalResources =\n    resources.filter(res => IsGardenFood[res]).length > 0\n\n  return [\n    ...validateAction(ActionTypes.AddGarden, game, islandId, 5),\n    {\n      met: !isMaxGardens,\n      text: isMaxGardens ? 'max gardens planted here' : ''\n    },\n    {\n      met: hasHorticulturalResources,\n      text: hasHorticulturalResources\n        ? 'island has horticultural resources ✔'\n        : 'no horticultural resources here'\n    }\n  ]\n}\n\nexport {\n  validateAddDwelling,\n  validateAddGarden,\n  validateAddPerson,\n  validateAddSettlement,\n  validateAddTemple,\n  validateLaunch\n}\n","import {\n  WoodPerResources,\n  FoodPerResources,\n  IsDispersible,\n  IsGardenFood\n} from './Resources'\nimport { IslandMaxPopulations } from './IslandProperties'\nimport { ScattershellLocations } from './Locations'\nimport { NumVoyagers, calculateResourcesPerTick, randomChoice } from './Game'\nimport { Actions, ActionTypes, ActionCosts } from './Actions'\nimport * as ActionValidators from './ActionValidation'\n\nfunction spendEnergy(id, task, fn) {\n  return previous => {\n    const { player } = previous\n    const location = ScattershellLocations[id]\n    const { resources } = location\n    const { energy, food, wood } = player\n\n    const foodScore = resources.reduce(\n      (sum, resource) => sum + FoodPerResources[resource],\n      0\n    )\n    const woodScore = resources.reduce(\n      (sum, resource) => sum + WoodPerResources[resource],\n      0\n    )\n\n    const playerUpdate = {\n      ...player,\n      food: food + foodScore * energy,\n      wood: wood + woodScore * energy,\n      energy: 0\n    }\n\n    return {\n      ...previous,\n      player: playerUpdate\n    }\n  }\n}\n\nfunction updateGameState(resourceChanges, islandUpdateFn, willSpend, free) {\n  return previous => {\n    const { woodΔ, foodΔ, energyΔ, windΔ } = resourceChanges\n    const { player, islands, world } = previous\n    const { wood, food, wind, energy } = player\n\n    // for negative Δs, only update if we have enough\n    const check = (x, Δ) => {\n      let bad = x + Δ < 0\n      return bad || Δ == undefined ? x : x + Δ\n    }\n\n    const updatedPlayer = {\n      wood: check(wood, woodΔ),\n      food: check(food, foodΔ),\n      wind: Math.min(check(wind, windΔ), 100), // 100 = max wind\n      energy: check(energy, energyΔ)\n    }\n\n    const insufficient =\n      (woodΔ && updatedPlayer.wood === wood) ||\n      (foodΔ && updatedPlayer.food === food) ||\n      (windΔ && updatedPlayer.wind === wind) ||\n      (energyΔ && updatedPlayer.energy === energy)\n\n    const playerUpdate = { ...player, ...(updatedPlayer || {}) }\n    const islandUpdateFnRes =\n      islandUpdateFn != undefined && islandUpdateFn(previous)\n    const abort = islandUpdateFnRes === false\n    const islandsUpdate =\n      islandUpdateFn == undefined ? islands : islandUpdateFnRes\n\n    if (!insufficient && willSpend != undefined && !abort) willSpend()\n\n    const update = {\n      ...previous,\n      player: playerUpdate,\n      islands: islandsUpdate\n    }\n\n    // if all required amounts were spent, or the txn is free, apply the update\n    return (!insufficient || free) && !abort ? update : previous\n  }\n}\n\nconst islandProperty = (islandId, updateFn) => {\n  return game => {\n    const { islands } = game\n    const island = islands[islandId]\n    const update = updateFn(island)\n    return {\n      ...islands,\n      [islandId]: {\n        ...island,\n        ...update\n      }\n    }\n  }\n}\n\nconst actionPermitted = validations =>\n  validations.filter(({ met }) => !met).length === 0\n\nconst beginAddPerson = (islandId, task, willSpendFn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddPerson],\n    game => {\n      const validations = ActionValidators.validateAddPerson(game, islandId)\n      const permitted = actionPermitted(validations)\n      return permitted ? game.islands : false\n    },\n    willSpendFn\n  )\n\nconst endAddPerson = islandId =>\n  updateGameState(\n    {},\n    islandProperty(islandId, island => ({\n      population: island.population + 1\n    }))\n  )\n\n// TODO use action validators\n\nconst beginAddDwelling = (islandId, task, willSpendFn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddDwelling],\n    game => {\n      const validations = ActionValidators.validateAddDwelling(game, islandId)\n      const permitted = actionPermitted(validations)\n      return permitted ? game.islands : false\n    },\n    willSpendFn\n  )\n\nconst endAddDwelling = islandId =>\n  updateGameState(\n    {},\n    islandProperty(islandId, ({ numDwellings, bonusPopulation }) => ({\n      numDwellings: numDwellings + 1,\n      bonusPopulation: bonusPopulation + 5\n    }))\n  )\n\nconst beginAddSettlement = (islandId, task, willSpendFn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddSettlement],\n    game => {\n      const validations = ActionValidators.validateAddSettlement(game, islandId)\n      const permitted = actionPermitted(validations)\n      return permitted ? game.islands : false\n    },\n    willSpendFn\n  )\n\nconst endAddSettlement = (islandId, task) =>\n  updateGameState(\n    {},\n    islandProperty(islandId, island => ({\n      hasSettlement: true\n    }))\n  )\n\nconst beginAddTemple = (islandId, task, willSpendFn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddTemple],\n    game => {\n      const validations = ActionValidators.validateAddTemple(game, islandId)\n      const permitted = actionPermitted(validations)\n      return permitted ? game.islands : false\n    },\n    willSpendFn\n  )\n\nconst endAddTemple = islandId =>\n  updateGameState(\n    {},\n    islandProperty(islandId, island => ({\n      hasTemple: true\n    }))\n  )\n\nconst beginAddGarden = (islandId, task, willSpendFn) =>\n  updateGameState(\n    ActionCosts[ActionTypes.AddGarden],\n    game => {\n      const validations = ActionValidators.validateAddGarden(game, islandId)\n      const permitted = actionPermitted(validations)\n      return permitted ? game.islands : false\n    },\n    willSpendFn\n  )\n\nconst endAddGarden = islandId =>\n  updateGameState(\n    {},\n    islandProperty(islandId, island => {\n      const { numGardens } = island\n      return {\n        numGardens: numGardens + 1\n      }\n    })\n  )\n\nconst updateNothing = x => x.islands\n\nfunction launchVoyage(islandId, task) {\n  const { actionType, isBeginning } = task\n\n  const removePopulationFrom = game => {\n    const { islands } = game\n    const island = islands[islandId]\n    // make sure we can remove the population from source island\n    const validations = ActionValidators.validateLaunch(game, islandId, task)\n    const permitted = actionPermitted(validations)\n\n    const numVoyagers = NumVoyagers[actionType]\n    const islandsUpdate = {\n      ...islands,\n      [islandId]: {\n        ...island,\n        population: island.population - numVoyagers\n      }\n    }\n    return permitted ? islandsUpdate : false\n  }\n\n  const { cost } = Actions[actionType]\n  const voyageCost = isBeginning ? {} : cost\n  const voyageUpdate = isBeginning ? updateNothing : removePopulationFrom\n  return updateGameState(voyageCost, voyageUpdate)\n}\n\n/*\n  when an island is discovered via voyage, the voyaging people seed the island's population.\n  - unless the destination is a rocky island, in which case the people are lost.\n  - a fleet of people is needed to establish a settlement.\n  - a settlement allows the population to be increased by clicking 'add person'\n  - the safe choice is to launch an outrigger first to scout, then a fleet to populate \n*/\nfunction arriveVoyage(fromName, task) {\n  const { toName, actionType, isBeginning } = task\n  const numPeople = NumVoyagers[actionType]\n  return updateGameState(\n    {},\n    game => {\n      const { islands } = game\n      const toIsland = islands[toName]\n      const fromIsland = islands[fromName] || {\n        scatterings: [],\n        resources: []\n      }\n\n      // if there are any dispersible resources on the island and voyage is fleet,\n      // transfer one at random to the destination island\n      // only transfer resources that don't already exist on destination\n      const { resources } = fromIsland\n      const dispersibleResources =\n        actionType === ActionTypes.LaunchFleet\n          ? resources.filter(\n              resource =>\n                IsDispersible[resource] &&\n                toIsland.resources.indexOf(resource) === -1\n            )\n          : []\n\n      const dispersed =\n        dispersibleResources.length > 0\n          ? randomChoice(dispersibleResources)\n          : null\n\n      const toResources = [...toIsland.resources, dispersed].filter(\n        x => x != null\n      )\n\n      const toLocation = ScattershellLocations[toName]\n      const toMaxPopulation = IslandMaxPopulations[toLocation.type]\n      const toTotalPopulationLimit = toIsland.bonusPopulation + toMaxPopulation\n\n      const newPopulation = toIsland.population + numPeople\n      const newPopulationLimited =\n        newPopulation > toTotalPopulationLimit\n          ? toTotalPopulationLimit\n          : newPopulation\n\n      return {\n        ...islands,\n        [toName]: {\n          ...toIsland,\n          isDiscovered: true,\n          resources: toResources,\n          scatterings: [...toIsland.scatterings],\n          population: newPopulationLimited\n        }\n      }\n    },\n    null,\n    true // free\n  )\n}\n\nfunction gameTick(fn) {\n  return previous => {\n    const { player, islands } = previous\n    const { wood, food, energy, wind } = player\n\n    let foodΔ = 0,\n      woodΔ = 0,\n      energyΔ = 1,\n      windΔ = Math.floor(Math.random() * 21) - 10\n\n    // only give resources for discovered islands with at least one person\n    Object.entries(islands)\n      .filter(([id, island]) => island.isDiscovered && island.population > 0)\n      .forEach(([id, island]) => {\n        foodΔ += calculateResourcesPerTick('food', island)\n        woodΔ += calculateResourcesPerTick('wood', island)\n        foodΔ -= island.population\n        // bonus energy if island has temple\n        energyΔ += island.hasTemple ? 1 : 0\n      })\n\n    fn({ foodΔ, woodΔ, energyΔ, windΔ })\n\n    const newWood = wood + woodΔ,\n      newFood = food + foodΔ,\n      newEnergy = energy + energyΔ,\n      newWind = Math.min(100, wind + windΔ)\n\n    // don't let anything go below zero\n    return {\n      ...previous,\n      player: {\n        ...player,\n        wood: newWood < 0 ? 0 : newWood,\n        food: newFood < 0 ? 0 : newFood,\n        energy: newEnergy < 0 ? 0 : newEnergy,\n        wind: newWind < 0 ? 0 : newWind\n      }\n    }\n  }\n}\n\nconst updateWorldState = worldFn => previous => {\n  const { world } = previous\n  return {\n    ...previous,\n    world: worldFn(world)\n  }\n}\n\nconst worldTick = () =>\n  updateWorldState(previousWorld => {\n    let { day, dayOfWeek, weekOfYear, year } = previousWorld\n    return {\n      day: day + 1,\n      dayOfWeek: dayOfWeek === 7 ? 1 : dayOfWeek + 1, // 1-7\n      weekOfYear:\n        weekOfYear === 52 ? 1 : dayOfWeek === 7 ? weekOfYear + 1 : weekOfYear, // 1-52\n      year: weekOfYear === 52 ? year + 1 : year\n    }\n  })\n\nexport {\n  gameTick,\n  worldTick,\n  arriveVoyage,\n  launchVoyage,\n  spendEnergy,\n  beginAddGarden,\n  beginAddDwelling,\n  beginAddPerson,\n  beginAddSettlement,\n  beginAddTemple,\n  endAddDwelling,\n  endAddPerson,\n  endAddSettlement,\n  endAddGarden,\n  endAddTemple\n}\n","import { ScattershellLocations } from './Locations'\nimport {\n  validateAddDwelling,\n  validateAddGarden,\n  validateAddPerson,\n  validateAddSettlement,\n  validateAddTemple,\n  validateLaunch\n} from './ActionValidation'\nimport * as State from './State'\nimport { IslandTypes } from './IslandProperties'\n\nconst ActionTypes = {\n  LaunchOutrigger: 'outrigger voyage',\n  LaunchFleet: 'fleet voyage',\n  AddPerson: 'new child',\n  AddDwelling: 'build dwelling',\n  AddSettlement: 'raise settlement',\n  AddGarden: 'plant garden',\n  AddTemple: 'build temple',\n  SpendEnergy: 'accept offerings'\n}\n\nconst ActionCosts = {\n  [ActionTypes.LaunchOutrigger]: {\n    woodΔ: -25,\n    foodΔ: -50,\n    energyΔ: -10\n  },\n  [ActionTypes.LaunchFleet]: {\n    woodΔ: -100,\n    foodΔ: -200,\n    energyΔ: -20\n  },\n  [ActionTypes.AddPerson]: {\n    foodΔ: -50,\n    energyΔ: -25\n  },\n  [ActionTypes.AddDwelling]: {\n    woodΔ: -100\n  },\n  [ActionTypes.AddSettlement]: {\n    woodΔ: -250\n  },\n  [ActionTypes.AddGarden]: {\n    woodΔ: -500\n  },\n  [ActionTypes.AddTemple]: {\n    woodΔ: -1000,\n    foodΔ: -1000,\n    energyΔ: -100\n  }\n}\n\nconst finishVoyage = actionInstance => {\n  const { islandName, actionType, task } = actionInstance\n  const { toName, destinationIsDiscovered } = task\n  const { numPeople } = Actions[actionType]\n  const to = ScattershellLocations[toName]\n  const isInhospitable = to.type === IslandTypes.Rocks\n\n  const successMsg = destinationIsDiscovered\n    ? `The voyage disembarked safely.`\n    : `A ${to.type} island was discovered!`\n\n  const rocksMsg = `An inhospitable outcrop of rocks was encountered. The ${numPeople} voyagers perished.`\n  const msg = `The voyage from ${islandName} arrived at ${toName}. ${\n    isInhospitable ? rocksMsg : successMsg\n  }`\n  return msg\n}\n\nconst getVoyageDuration = task => {\n  const { islandName, toName, isBeginning } = task\n  return isBeginning\n    ? 10\n    : ScattershellLocations[islandName].neighbourDistance[toName] * 10\n}\n\nconst getVoyageName = task => {\n  const {\n    actionType,\n    destinationIsDiscovered,\n    islandName,\n    toName,\n    isBeginning\n  } = task\n  return isBeginning\n    ? `Voyage to ${toName}`\n    : `Voyage from ${islandName} to ${\n        destinationIsDiscovered ? toName : 'an undiscovered land'\n      }`\n}\n\nconst Actions = {\n  [ActionTypes.SpendEnergy]: {\n    text: 'accept offerings',\n    beginStateChange: State.spendEnergy,\n    endStateChange: () => {},\n    finishMessage: () => {},\n    emoji: '⚡',\n    validate: () => [{ met: true }],\n    getDuration: () => {},\n    getName: () => {},\n    hidden: true // don't show in progress\n  },\n  [ActionTypes.LaunchOutrigger]: {\n    text: 'launch outrigger',\n    beginStateChange: State.launchVoyage,\n    endStateChange: State.arriveVoyage,\n    finishMessage: finishVoyage,\n    emoji: '⛵',\n    cost: ActionCosts[ActionTypes.LaunchOutrigger],\n    validate: validateLaunch,\n    getDuration: getVoyageDuration,\n    getName: getVoyageName,\n    numPeople: 2\n  },\n  [ActionTypes.LaunchFleet]: {\n    text: 'launch fleet',\n    beginStateChange: State.launchVoyage,\n    endStateChange: State.arriveVoyage,\n    finishMessage: finishVoyage,\n    emoji: '⛵',\n    cost: ActionCosts[ActionTypes.LaunchFleet],\n    validate: validateLaunch,\n    getDuration: getVoyageDuration,\n    getName: getVoyageName,\n    numPeople: 5\n  },\n  [ActionTypes.AddPerson]: {\n    text: 'spawn person',\n    beginStateChange: State.beginAddPerson,\n    endStateChange: State.endAddPerson,\n    emoji: '👶',\n    finishMessage: ({ islandName }) => `a child was born in ${islandName}!`,\n    cost: ActionCosts[ActionTypes.AddPerson],\n    validate: validateAddPerson,\n    getDuration: () => 20,\n    getName: task => `person`\n  },\n  [ActionTypes.AddDwelling]: {\n    text: 'build dwelling',\n    emoji: '🏠',\n    cost: ActionCosts[ActionTypes.AddDwelling],\n    beginStateChange: State.beginAddDwelling,\n    endStateChange: State.endAddDwelling,\n    finishMessage: ({ islandName }) => `a dwelling was built in ${islandName}!`,\n    // todo settlement required\n    validate: validateAddDwelling,\n    getDuration: () => 20,\n    getName: task => `dwelling`\n  },\n  [ActionTypes.AddSettlement]: {\n    // todo already has settlement\n    text: 'raise settlement',\n    beginStateChange: State.beginAddSettlement,\n    endStateChange: State.endAddSettlement,\n    emoji: '🏠',\n    finishMessage: ({ islandName }) => {\n      return `a settlement was raised in ${islandName}!`\n    },\n    cost: ActionCosts[ActionTypes.AddSettlement],\n    validate: validateAddSettlement,\n    getDuration: () => 40,\n    getName: task => `settlement`\n  },\n\n  [ActionTypes.AddGarden]: {\n    text: 'plant garden',\n    beginStateChange: State.beginAddGarden,\n    endStateChange: State.endAddGarden,\n    emoji: '🥬',\n    finishMessage: ({ islandName }) => `a garden was planted in ${islandName}!`,\n    cost: ActionCosts[ActionTypes.AddGarden],\n    validate: validateAddGarden,\n    getDuration: () => 40,\n    getName: task => `garden`\n  },\n\n  [ActionTypes.AddTemple]: {\n    text: 'build temple',\n    emoji: '🙏',\n    beginStateChange: State.beginAddTemple,\n    endStateChange: State.endAddTemple,\n    cost: ActionCosts[ActionTypes.AddGarden],\n    finishMessage: ({ islandName }) => `a temple was built in ${islandName}!`,\n    validate: validateAddTemple,\n    getDuration: () => 100,\n    getName: task => `temple`\n  }\n}\n\nexport { Actions, ActionCosts, ActionTypes }\n","import { DevelopmentLevel, IslandMaxPopulations } from './IslandProperties'\nimport { ScattershellLocations } from './Locations'\nimport {\n  WoodPerResources,\n  FoodPerResources,\n  RequiresGathering,\n  ResourceTypes,\n  IsGardenFood\n} from './Resources'\nimport { ActionTypes } from './Actions'\n\nconst randomChoice = x => x[Math.floor(Math.random() * x.length)]\nconst SettlementRequiredPeople = 2\n\nfunction developmentLevelForIsland(island) {\n  // max population reached and treasures found\n  /*if (island.numTreasures === 10 && island.hasTemple) {\n    return DevelopmentLevel.Advanced\n  }\n  if (island.hasTemple || island.numTreasures > 5) {\n    return DevelopmentLevel.HighlyDeveloped\n  }*/\n\n  const { hasTemple, numGardens, population, numDwellings } = island\n\n  if (hasTemple && numGardens === MaxGardens && numDwellings === MaxDwellings) {\n    return DevelopmentLevel.Advanced\n  }\n\n  // max population reached\n  if (population === IslandMaxPopulations[island.type]) {\n    return DevelopmentLevel.Developed\n  }\n  //max population not yet reached\n  if (population >= 5) {\n    return DevelopmentLevel.Burgeoning\n  }\n  return DevelopmentLevel.Undeveloped\n}\n\nfunction calculateResourcesPerTick(resourceType, island) {\n  const { population, resources, numGardens } = island\n  const PerResourcesForResourceType = {\n    wood: WoodPerResources,\n    food: FoodPerResources\n  }\n  const hasGatherers = population >= 5\n  const PerResources = PerResourcesForResourceType[resourceType]\n\n  // for every garden, add a point for horticultural resources\n  const getsGuanoBonus =\n    resources.filter(resource => resource === ResourceTypes.Guano).length > 0\n\n  return population === 0\n    ? 0\n    : resources.reduce((total, resource) => {\n        const horitculturalBonus = IsGardenFood[resource] ? numGardens : 0\n        const guanoBonus = horitculturalBonus > 0 && getsGuanoBonus ? 2 : 0\n        return (\n          total +\n          (!RequiresGathering[resource] ||\n          (RequiresGathering[resource] && hasGatherers)\n            ? PerResources[resource] + horitculturalBonus + guanoBonus\n            : 0)\n        )\n      }, 0)\n}\n\nconst islandsDetails = islands => {\n  const islandNames = Object.keys(ScattershellLocations)\n  return islandNames.reduce((obj, key) => {\n    const loc = ScattershellLocations[key]\n    const state = islands ? islands[key] : {}\n    return { ...obj, [key]: { ...loc, ...state } }\n  }, {})\n}\n\nconst StartingLocation = ScattershellLocations.Morrigan.name\n\nconst NumVoyagers = {\n  [ActionTypes.LaunchOutrigger]: 2,\n  [ActionTypes.LaunchFleet]: 5\n}\n\nconst Seasons = {\n  Winter: 'winter',\n  Spring: 'spring',\n  Summer: 'summer',\n  Harvest: 'harvest'\n}\n\nconst initialIslandState = islandId => ({\n  population: 0,\n  hasTemple: false,\n  hasSettlement: false,\n  isDiscovered: false,\n  scatterings: [],\n  resources: ScattershellLocations[islandId].resources,\n  numDwellings: 0,\n  numTreasures: 0,\n  bonusPopulation: 0,\n  numGardens: 0\n})\n\nconst InitialPlayerState = {\n  wood: 0,\n  food: 0,\n  wind: 0,\n  energy: 0\n}\n\nconst InitialWorldState = {\n  day: 1,\n  dayOfWeek: 1, // 1-7\n  weekOfYear: 1, // 1-52\n  season: Seasons.Rainy,\n  year: 1\n}\n\nconst InitialGameState = {\n  islands: Object.keys(ScattershellLocations).reduce(\n    (obj, islandId) => ({ ...obj, [islandId]: initialIslandState(islandId) }),\n    {}\n  ),\n  player: InitialPlayerState,\n  world: InitialWorldState,\n  progressItems: []\n}\n\nconst MaxDwellings = 5\nconst MaxGardens = 5\n\nexport {\n  randomChoice,\n  developmentLevelForIsland,\n  islandsDetails,\n  calculateResourcesPerTick,\n  InitialGameState,\n  MaxDwellings,\n  MaxGardens,\n  Seasons,\n  NumVoyagers,\n  StartingLocation,\n  SettlementRequiredPeople\n}\n","import React from 'react'\nimport { calculateResourcesPerTick, developmentLevelForIsland } from './Game'\nimport { IslandMaxPopulations, IslandDescriptions } from './IslandProperties'\n\nfunction IslandDetails(props) {\n  const { island } = props\n  const {\n    name,\n    type,\n    population,\n    bonusPopulation,\n    numTreasures,\n    numDwellings,\n    numGardens,\n    hasSettlement,\n    hasTemple\n  } = island\n\n  const foodPerTick = calculateResourcesPerTick('food', island)\n  const woodPerTick = calculateResourcesPerTick('wood', island)\n\n  return (\n    <section className={'current-island-info'}>\n      <h3>{name}</h3>A <b>{type} island</b>\n      <p>\n        <i>{IslandDescriptions[type]}</i>\n      </p>\n      <ul>\n        <li>\n          <b>{developmentLevelForIsland(island)}</b>\n        </li>\n        <li>\n          Providing <b>{foodPerTick}</b> food, <b>{woodPerTick}</b> materials\n          per day\n        </li>\n        {hasSettlement ? (\n          <li>\n            <b>has settlement</b>\n          </li>\n        ) : null}\n        <li>\n          <b>{population}</b>/{IslandMaxPopulations[type]}{' '}\n          {bonusPopulation > 0 ? (\n            <b className={'bonus'}>+{bonusPopulation}</b>\n          ) : null}{' '}\n          population\n        </li>\n        <li>\n          <b>{numTreasures}</b>/10 treasures\n        </li>\n        <li>\n          <b>{numDwellings}</b>/5 dwellings\n        </li>\n        <li>\n          <b>{numGardens}</b>/5 gardens\n        </li>\n        {hasTemple ? (\n          <li>\n            <b>has temple</b>\n          </li>\n        ) : null}\n      </ul>\n    </section>\n  )\n}\n\nexport { IslandDetails }\n","import React from 'react'\nimport { Link } from 'office-ui-fabric-react'\nimport { Colors } from './Theme'\nimport { ActionTypes, Actions } from './Actions'\n\nfunction IslandAction(props) {\n  const { children, actionType, onActionClicked, hide, validate } = props\n  const action = Actions[actionType]\n\n  const { emoji, text } = action\n  const requirements = validate()\n  const allRequirementsMet =\n    requirements.filter(({ met }) => met).length === requirements.length\n\n  const reqs =\n    requirements.length > 0 ? (\n      <ul className={'requirements'}>\n        {requirements.map(({ text }) => (text ? <li>{text}</li> : null))}\n      </ul>\n    ) : null\n\n  return hide ? null : (\n    <li>\n      {emoji}\n      <Link\n        onClick={onActionClicked}\n        disabled={!allRequirementsMet}\n        styles={props => ({\n          root: props.isDisabled ? { color: Colors.Disabled } : {}\n        })}\n      >\n        {text}\n      </Link>\n      <div className={'island-options-details'}>{children}</div>\n      {reqs}\n    </li>\n  )\n}\n\nfunction IslandActionsList(props) {\n  const { game, island, doAction } = props\n  const { name, hasSettlement } = island\n\n  /* TODO hide actions if there is an incomplete progress item for the action */\n\n  return (\n    <ul className={'island-options measure'}>\n      <IslandAction\n        actionType={ActionTypes.SpendEnergy}\n        onActionClicked={() => {\n          doAction(ActionTypes.SpendEnergy, name, {})\n        }}\n        validate={() =>\n          Actions[ActionTypes.SpendEnergy].validate(game, name, {})\n        }\n      >\n        <p>\n          Receive a bounty of food and materials from {name} in exchange for all\n          of your current energy.\n          {/*You will receive <b>{}</b> materials\n          and <b>{}</b> food.*/}\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        actionType={ActionTypes.AddSettlement}\n        hide={hasSettlement}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddSettlement, name, {})\n        }}\n        validate={() =>\n          Actions[ActionTypes.AddSettlement].validate(game, name, {})\n        }\n      >\n        <p>\n          Raise a settlement on {name}. A settlement allows new structures to be\n          built and children to be born on the island.\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        hide={!hasSettlement}\n        actionType={ActionTypes.AddPerson}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddPerson, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddPerson].validate(game, name)}\n      >\n        <p>\n          Cause a child to be born on {name}. Uses <b>1 food per day</b> after\n          the initial cost.\n        </p>\n        <p>\n          You need people to explore other islands, upgrade your development\n          level and harvest certain resources. You need at least one person on{' '}\n          {name} to get resources from here.\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        hide={!hasSettlement}\n        actionType={ActionTypes.AddDwelling}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddDwelling, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddDwelling].validate(game, name)}\n      >\n        <p>\n          Build a dwelling on {name} to house more people on this island. Up to\n          five dwellings can be built.\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        actionType={ActionTypes.AddGarden}\n        hide={!hasSettlement}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddGarden, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddGarden].validate(game, name)}\n      >\n        <p>\n          Plant a garden on {name} to receive bonus horticultural resources (\n          <b>root vegetables</b> and <b>fruit trees</b>). Up to five gardens can\n          be planted on islands with horticultural resources.\n        </p>\n      </IslandAction>\n\n      <IslandAction\n        hide={!hasSettlement}\n        actionType={ActionTypes.AddTemple}\n        onActionClicked={() => {\n          doAction(ActionTypes.AddTemple, name, {})\n        }}\n        validate={() => Actions[ActionTypes.AddTemple].validate(game, name)}\n      >\n        <p>\n          Build a temple to find treasures to increase the prestige of {name}.\n          Once a temple is built, bonus energy will be received per day.\n        </p>\n        {/*<h5>scattering</h5>\n        <p style={{textDecoration:'line-through'}}>\n          Building a temple will bring forth a scattering: a blessing or burden\n          that will be carried by this island and its descendants (any islands\n          that are discovered from here).\n        </p> coming soon\n        <h5>treasures</h5>\n        <p style={{textDecoration:'line-through'}}>\n          Treasures will periodically appear when a temple is built. Acquire all\n          the treasures to maximise an island's development level.\n          </p> coming soon */}\n      </IslandAction>\n    </ul>\n  )\n}\n\nexport { IslandActionsList, IslandAction }\n","import React from 'react'\nimport { Link } from 'office-ui-fabric-react'\nimport { ActionTypes, Actions } from './Actions'\nimport { Colors } from './Theme'\nimport { IslandAction } from './IslandActions'\nimport { ScattershellLocations } from './Locations'\n\nfunction VoyageChoicesList(props) {\n  const { island, islands, game, doAction } = props\n  const { name, neighbours } = island\n\n  /* allow voyages to neighbours that have a population less than 5  */\n  const voyagableNeighbours = neighbours.filter(\n    neighbourName =>\n      //!islands[neighbourName].isDiscovered &&\n      islands[neighbourName].population < 5\n  )\n\n  return (\n    <>\n      <section className={'voyage-hints'}>\n        <p className={'hint-text measure'}>\n          <h5>Outrigger</h5>\n          If the destination island is hospitable, it will be populated with the\n          2 voyagers.\n        </p>\n        <p className={'hint-text measure'}>\n          <h5>Fleet</h5>\n          If the destination island is hospitable, it will be populated with the\n          5 voyagers. If there are any dispersible resources on this island, one\n          will be chosen at random and transferred to the destination island.\n        </p>\n      </section>\n      <ul className={'voyages'}>\n        {voyagableNeighbours.map((toName, n) => {\n          const destination = islands[toName]\n          const { isDiscovered } = destination\n          const islandName = name\n          const distance =\n            ScattershellLocations[islandName].neighbourDistance[toName]\n\n          const outriggerTask = {\n            actionType: ActionTypes.LaunchOutrigger,\n            isBeginning: false,\n            toName,\n            islandName\n          }\n\n          const fleetTask = {\n            actionType: ActionTypes.LaunchFleet,\n            isBeginning: false,\n            toName,\n            islandName\n          }\n\n          return (\n            <li\n              style={{\n                marginBottom: '1em',\n                marginBottom: '1em',\n                paddingTop: '1em',\n                ...(n > 0 ? { borderTop: `1px solid ${Colors.Outline}` } : {})\n              }}\n            >\n              <h4>\n                Voyage to {isDiscovered ? toName : 'an undiscovered land'} -{' '}\n                {distance} worlds away{' '}\n                {isDiscovered ? '(already discovered)' : ''}\n              </h4>\n              <br />\n              <IslandAction\n                actionType={ActionTypes.LaunchOutrigger}\n                onActionClicked={() => {\n                  doAction(ActionTypes.LaunchOutrigger, name, outriggerTask)\n                }}\n                validate={() =>\n                  Actions[ActionTypes.LaunchOutrigger].validate(\n                    game,\n                    name,\n                    outriggerTask\n                  )\n                }\n              />\n              <IslandAction\n                actionType={ActionTypes.LaunchFleet}\n                onActionClicked={() => {\n                  doAction(ActionTypes.LaunchFleet, name, fleetTask)\n                }}\n                validate={() =>\n                  Actions[ActionTypes.LaunchFleet].validate(\n                    game,\n                    name,\n                    fleetTask\n                  )\n                }\n              />\n            </li>\n          )\n        })}\n      </ul>\n    </>\n  )\n}\n\nexport { VoyageChoicesList }\n","import React from 'react'\nimport './App.css'\nimport { IslandResources } from './IslandResources'\nimport { IslandIllustrations } from './IslandProperties'\nimport { IslandDetails } from './IslandDetails'\nimport { IslandActionsList } from './IslandActions'\nimport { VoyageChoicesList } from './IslandVoyages'\n\nfunction Island(props) {\n  const { game, island, islands, doAction, progressProvider } = props\n  const { player, world } = game\n  const { type, name, resources, isDiscovered } = island\n\n  const islandActions = (\n    <section className={'current-island-options mv2'}>\n      <IslandActionsList\n        game={game}\n        island={island}\n        doAction={doAction}\n      />\n    </section>\n  )\n\n  const unexploredIslands = (\n    <section className={'current-island-expeditions mv2'}>\n      <h4>Voyages from {name}</h4>\n      <VoyageChoicesList\n        island={island}\n        islands={islands}\n        game={game}\n        doAction={doAction}\n      />\n    </section>\n  )\n\n  return (\n    <div className={'current-island mv2'}>\n      <div className={'current-island-header'}>\n        <aside className={'current-island-illustration'}>\n          <figure>\n            <img src={IslandIllustrations[type]} />\n          </figure>\n        </aside>\n        <IslandDetails island={island} />\n        <IslandResources island={island} />\n      </div>\n      {isDiscovered ? islandActions : null}\n      {isDiscovered ? unexploredIslands : null}\n    </div>\n  )\n}\n\nexport { Island }\n","import React, { useRef, useEffect } from 'react'\nimport './App.css'\nimport * as SVG from 'svg.js'\nimport rough from 'roughjs/dist/rough.umd'\nimport { Colors } from './Theme'\nimport { IslandTypes } from './IslandProperties'\nimport { islandsDetails } from './Game'\n\nconst defaultScattershellMapProps = {\n  places: [\n    { id: 'a', x: 80, y: 120, name: 'A' },\n    {\n      id: 'b',\n      x: 200,\n      y: 100,\n      name: 'B',\n      isActive: true,\n      isBig: true\n    },\n    { id: 'c', x: 150, y: 250, name: 'C', isBig: true }\n  ],\n\n  //paths: [['a', 'b'], ['b', 'c']],\n\n  paths: [],\n  baseMarkerOptions: {\n    //stroke: Colors.Outline,\n    fill: Colors.Green, //Colors.Outline,\n    fillStyle: 'solid',\n    hachureAngle: 65,\n    roughness: 1,\n    stroke: 0,\n    fillWeight: 2,\n    bowing: 2\n  },\n\n  activePlaceOptions: {\n    fill: Colors.Green,\n    stroke: Colors.Light,\n    strokeWidth: 5\n  },\n\n  inactivePlaceOptions: {},\n  pathOptions: {},\n\n  sizes: {\n    [IslandTypes.Rocks]: 5,\n    [IslandTypes.Guano]: 10,\n    [IslandTypes.Small]: 15,\n    [IslandTypes.Medium]: 20,\n    [IslandTypes.Large]: 35\n  }\n}\n\nfunction ScattershellMap(props) {\n  const {\n    islands,\n    paths,\n    baseMarkerOptions,\n    activePlaceOptions,\n    inactivePlaceOptions,\n    lineOptions,\n    sizes,\n    currentIsland // string\n  } = {\n    ...defaultScattershellMapProps,\n    ...props\n  }\n\n  const xOffset = -40,\n    yOffset = 0\n\n  const opts = baseMarkerOptions\n\n  const righties = ['The Pip', 'Elder', 'Father']\n\n  const svgRef = useRef(null)\n\n  function renderMap(svg) {\n    const rc = rough.svg(svg)\n    const draw = SVG(svg) //svg.js draw\n\n    /* draw.click(event => {\n      let x = event.clientX - draw.parent.offsetLeft,\n        y = event.clientY - draw.parent.offsetTop\n      \n        console.log(x,y)\n    })*/\n\n    const placeMarker = ({ name, x, y, type, markerOptions }) => {\n      let circleOpts = {\n        ...opts,\n        ...(name === currentIsland ? activePlaceOptions : inactivePlaceOptions),\n        ...markerOptions\n      }\n      return rc.circle(\n        x * 5 + xOffset,\n        y * 5 + yOffset,\n        sizes[type],\n        circleOpts\n      )\n    }\n    const pathMarker = (place1, place2) =>\n      rc.line(place1.x, place1.y, place2.x, place2.y, {\n        ...opts,\n        ...lineOptions,\n        stroke: Colors.Light\n      })\n\n    const labelMarker = place => {\n      draw\n        .link('javascript:;')\n        .text(place.name)\n        .fill(Colors.Light)\n        .x(\n          place.x * 5 +\n            xOffset +\n            (righties.indexOf(place.name) !== -1 ? +25 + sizes[place.type] : 0)\n        )\n        .y(\n          place.y * 5 +\n            yOffset +\n            (righties.indexOf(place.name) !== -1\n              ? -8\n              : sizes[place.type] / 2 + 1)\n        ) //(place.isBig ? 30 : 20))\n        .font({\n          family: 'Open Sans',\n          size: 16,\n          anchor: 'middle'\n        })\n        .on('click', () => {\n          props.setCurrentIsland(place.name)\n        })\n    }\n\n    Object.values(islandsDetails(islands)).forEach(place => {\n      if (place.isDiscovered) {\n        let marker = placeMarker(place)\n        svg.appendChild(marker)\n        labelMarker(place)\n      }\n    })\n\n    paths.forEach(([fromId, toId]) => {\n      let marker = pathMarker(islands[fromId], islands[toId])\n      svg.appendChild(marker)\n    })\n  }\n\n  // Render initial\n  useEffect(() => {\n    let svg = svgRef.current\n    renderMap(svg)\n  }, [svgRef.current])\n\n  const reRender = () => {\n    let svg = svgRef.current\n    if (svg) {\n      while (svg.lastChild) {\n        svg.removeChild(svg.lastChild)\n      }\n      renderMap(svg)\n    }\n  }\n\n  // Re-render when islands are discovered or current island changes\n  const discoveries = Object.entries(islands).map(\n    ([name, place]) => place.isDiscovered\n  )\n\n  useEffect(reRender, discoveries)\n  useEffect(reRender, [currentIsland])\n\n  return <svg ref={svgRef} className={'map-svg'} />\n}\n\nexport default ScattershellMap\n","import React from 'react'\nimport { Actions, ActionTypes } from './Actions'\nimport { ProgressIndicator } from 'office-ui-fabric-react'\n\nfunction useProgress() {\n  const tick = (onProgressItemBeginning, onProgressItemFinished) => {\n    // return an update to the game state that ticks all progress items as needed.\n    // only put back the ones that are still not ready\n    return game => {\n      const { progressItems, player } = game\n      const { wind } = player\n\n      // take all the updates by progressItems and merge them into the new state\n      var gameUpdates = game\n\n      progressItems\n        .filter(x => x.progress === 0)\n        .forEach(progressItem => {\n          gameUpdates = onProgressItemBeginning(progressItem)(gameUpdates)\n        })\n\n      progressItems\n        .filter(x => x.progress >= x.duration)\n        .forEach(progressItem => {\n          gameUpdates = onProgressItemFinished(progressItem)(gameUpdates)\n        })\n\n      const updatedProgressItems = progressItems\n        .filter(x => x.progress < x.duration)\n        .map(item => {\n          const { duration, actionType } = item\n          const isVoyage =\n            actionType === ActionTypes.LaunchFleet ||\n            actionType === ActionTypes.LaunchOutrigger\n          const progress = item.progress + 1 + (isVoyage ? 0.05 * wind : 0)\n          return {\n            ...item,\n            progress: progress > item.duration ? item.duration : progress\n          }\n        })\n      \n      return {\n        ...gameUpdates,\n        progressItems: updatedProgressItems\n      }\n    }\n  }\n\n  const add = progressItem => {\n    return game => {\n      const progressItems = [...game.progressItems, progressItem]\n      return {\n        ...game,\n        progressItems\n      }\n    }\n  }\n\n  return { add, tick }\n}\n\nfunction ProgressStatus(props) {\n  const { game } = props\n  const { progressItems } = game\n\n  return (\n    <section className={'journeys-container'}>\n      {progressItems.length > 0 ? (\n        <ul>\n          {progressItems.map(item => (\n            <ProgressStatusItem {...item} />\n          ))}\n        </ul>\n      ) : null}\n    </section>\n  )\n}\n\nfunction ProgressStatusItem(props) {\n  const { name, task, progress, duration, actionType, destName } = props\n  const { emoji, text, hidden } = Actions[actionType]\n  const roundedPct = Math.round((progress / duration) * 100)\n  const description =\n    actionType === ActionTypes.LaunchFleet ||\n    actionType === ActionTypes.LaunchOutrigger\n      ? name\n      : '' // TODO island name\n  return hidden ? null : (\n    <li key={`${actionType}-${destName}`}>\n      <ProgressIndicator\n        className={'progress-status-item'}\n        label={`${emoji} ${text} (${roundedPct}%)`}\n        description={description}\n        percentComplete={progress / duration}\n      />\n    </li>\n  )\n}\n\nexport { useProgress, ProgressStatus }\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Panel, PanelType, Link } from 'office-ui-fabric-react'\nimport * as lzutf8 from 'lzutf8'\n\nfunction useLoadSave() {\n  const loadState = saveFile => {\n    return _ => {\n      try {\n        const decoded = lzutf8.decodeBase64(saveFile)\n        const decompressed = lzutf8.decompress(decoded)\n        const game = JSON.parse(decompressed)\n        return game\n      } catch (e) {\n        console.error('Error loading game :(')\n        return _\n      }\n    }\n  }\n\n  const serializeState = gameState => {\n    try {\n      //compressed\n      const json = JSON.stringify(gameState)\n      const compressed = lzutf8.compress(json)\n      const b64 = lzutf8.encodeBase64(compressed)\n       \n      return b64\n    } catch (e) {\n      console.error('Error creating save file :(')\n    }\n  }\n  return { loadState, serializeState }\n}\n\nfunction LoadSavePanel(props) {\n  const { loadSaveProvider, game } = props\n  const { loadState, serializeState } = loadSaveProvider\n  const [showPanel, setShowPanel] = useState(false)\n  const textareaRef = useRef()\n\n  useEffect(() => {\n    if (showPanel && textareaRef.current) {\n      const { current } = textareaRef\n      current.value = serializeState(game)\n      current.focus()\n    }\n  }, [showPanel && textareaRef.current])\n\n  const loadText = () => {\n    const { current } = textareaRef\n    loadState(current.value)\n  }\n\n  return (\n    <>\n      <Panel\n        isOpen={showPanel}\n        onDismiss={() => {\n          setShowPanel(false)\n        }}\n        type={PanelType.smallFixedNear}\n        headerText={'Load and save'}\n      >\n        <p>\n          Copy the save file below to capture your current game, or paste in a\n          save file to load a previous game.\n        </p>\n        <textarea className={'savefile-textarea'} ref={textareaRef} />\n        <p>\n          <Link\n            onClick={() => {\n              loadText()\n            }}\n          >\n            load saved game\n          </Link>\n        </p>\n      </Panel>\n      <Link\n        onClick={() => {\n          setShowPanel(true)\n        }}\n      >\n        load and save games\n      </Link>\n    </>\n  )\n}\n\nexport { useLoadSave, LoadSavePanel }\n","import React, { useState, useEffect } from 'react'\nimport { InitialGameState, StartingLocation } from './Game'\nimport { ActionTypes, Actions } from './Actions'\nimport { gameTick, worldTick } from './State'\nimport { useProgress } from './Progress'\nimport { useLoadSave } from './LoadSave'\n\nconst tickInterval = 1000\n\nfunction useScattershellEngine(messageProvider) {\n  const [gameState, setGameState] = useState(InitialGameState)\n  const [deltas, setDeltas] = useState({\n    woodΔ: 0,\n    foodΔ: 0,\n    energyΔ: 0,\n    windΔ: 0\n  })\n\n  const progress = useProgress()\n  const progressProvider = {\n    add: item => setGameState(progress.add(item)),\n    tick: progress.tick\n  }\n\n  const { clearOneMessage, postMessage } = messageProvider\n  const loadSave = useLoadSave(gameState)\n  const loadSaveProvider = {\n    loadState: saveFile => setGameState(loadSave.loadState(saveFile)),\n    serializeState: loadSave.serializeState\n  }\n  useEffect(() => {\n    // discover the starting island on game launch\n    newGame()\n  }, [])\n\n  const onProgressItemFinished = progressItem => {\n    const { actionType, islandName, task } = progressItem\n    const action = Actions[actionType]\n    postMessage(action.finishMessage(progressItem))\n    return action.endStateChange(islandName, task)\n  }\n\n  const onProgressItemBeginning = progressItem => {\n    const { actionType, islandName, task } = progressItem\n    const action = Actions[actionType]\n    return action.beginStateChange(islandName, task)\n  }\n\n  const tick = () => {\n    setGameState(game => {\n      // The game loop.\n      const worldTickFn = worldTick()\n      const gameTickFn = gameTick(deltas => setDeltas(deltas))\n      const progressTickFn = progressProvider.tick(\n        onProgressItemBeginning,\n        onProgressItemFinished\n      )\n\n      var gameUpdate = game\n      gameUpdate = gameTickFn(gameUpdate)\n      gameUpdate = progressTickFn(gameUpdate)\n      gameUpdate = worldTickFn(gameUpdate)\n      return gameUpdate\n    })\n\n    clearOneMessage()\n  }\n\n  const newGame = () =>\n    doAction(ActionTypes.LaunchFleet, 'Beginning', {\n      toName: StartingLocation,\n      isBeginning: true,\n      actionType: ActionTypes.LaunchFleet\n    })\n\n  const doAction = (actionType, islandName, task) => {\n    const action = Actions[actionType]\n    const { getDuration, getName } = action\n    const destinationIsDiscovered =\n      task.toName && gameState.islands[task.toName].isDiscovered\n    progressProvider.add({\n      task,\n      actionType,\n      duration: getDuration(task),\n      name: getName(task),\n      islandName,\n      progress: 0,\n      destinationIsDiscovered\n    })\n  }\n\n  return {\n    gameState,\n    doAction,\n    tick,\n    deltas,\n    newGame,\n    progressProvider,\n    loadSaveProvider\n  }\n}\n\nexport { useScattershellEngine, tickInterval }\n","import React from 'react'\nimport { Colors } from './Theme'\nimport { useSpring, animated } from 'react-spring'\nimport { tickInterval } from './Engine'\nimport * as numeral from 'numeral'\n\nfunction GameMeter(props) {\n  const { qty, Δ, text } = props\n  const interpolator = useSpring({\n    qty,\n    from: { qty: qty - Δ },\n    config: { duration: tickInterval }\n  })\n  function deltaView(Δ) {\n    return Δ === 0 ? null : (\n      <span\n        className={'game-meter-delta'}\n        style={{ color: Δ > 0 ? Colors.Green : 'red' }}\n      >{`${Δ > 0 ? '+' : ''}${Δ}`}</span>\n    )\n  }\n\n  return (\n    <li>\n      <h4 className={'game-meter-number'}>\n        <animated.span>\n          {interpolator.qty.interpolate(x => {\n            const num = Math.round(x)\n            return num >= 1000 ? numeral(num).format('0.0a') : num\n          })}\n        </animated.span>{' '}\n        {deltaView(Δ)}\n      </h4>{' '}\n      {text}\n    </li>\n  )\n}\n\n/*<section>\n  <h3>total scores</h3>\n  <ul>\n    <li>islands discovered</li>\n    <li>population</li>\n    <li>dwellings</li>\n    <li>treasures</li>\n    <li>temples</li>\n  <0/ul>\n</section>*/\n\nfunction GameMeters(props) {\n  const { deltas, player } = props\n  const { wood, food, wind, energy } = player\n  const { woodΔ, foodΔ, energyΔ, windΔ } = deltas\n\n  return (\n    <section className={'game-meters-container'}>\n      <ul className={'game-meters'}>\n        <GameMeter qty={food} Δ={foodΔ} text={'food 🥝'} />\n        <GameMeter qty={wood} Δ={woodΔ} text={'materials ⚒️'} />\n        <GameMeter qty={energy} Δ={energyΔ} text={'energy ⚡'} />\n        <GameMeter qty={wind} Δ={windΔ} text={'wind 💨'} />\n      </ul>\n    </section>\n  )\n}\n\nexport { GameMeters }\n","import React, { useState } from 'react'\n\nfunction useMessaging() {\n  const [messages, setMessages] = useState([])\n\n  const postMessage = msg =>\n    setMessages(previous => [...previous, { live: 10, text: msg }])\n\n  const clearOneMessage = () =>\n    setMessages(previous =>\n      previous\n        .filter(msg => msg.live > 0)\n        .map(msg => ({ ...msg, live: msg.live - 1 }))\n    )\n\n  return { postMessage, messages, clearOneMessage }\n}\n\nfunction Messages(props) {\n  const { messaging } = props\n  const { messages } = messaging\n  return (\n    <section className={'messages-container'}>\n      <ul>\n        {messages.map(({ text }) => (\n          <li key={text}>{text}</li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport { useMessaging, Messages }\n","import React from 'react'\n\nfunction Calendar(props) {\n  const { world } = props\n  const { day, dayOfWeek, weekOfYear, year } = world\n  return (\n    <section className={'calendar-container'}>\n      <p>{`day ${day}, year ${year} (week ${weekOfYear}/52)`}</p>\n    </section>\n  )\n}\n\nexport { Calendar }","import React, { useState, useRef, useEffect } from 'react'\nimport { Fabric, registerIcons, loadTheme } from 'office-ui-fabric-react'\nimport './App.css'\nimport { fabricIcons, fabricTheme, Colors } from './Theme'\n\nimport { Island } from './Island'\nimport ScattershellMap from './Map'\nimport { GameMeters } from './GameMeters'\nimport { useScattershellEngine, tickInterval } from './Engine'\nimport { StartingLocation, islandsDetails } from './Game'\nimport { ProgressStatus } from './Progress'\nimport { Messages, useMessaging } from './Messages'\nimport { Calendar } from './Calendar'\nimport { LoadSavePanel } from './LoadSave'\nconst VERSION = '0.7.2'\nconst intervalDuration = tickInterval\n\nconst json = _ => JSON.stringify(_, undefined, 4)\n\nregisterIcons(fabricIcons)\nloadTheme(fabricTheme)\n\n/* https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nfunction App() {\n  const messaging = useMessaging()\n\n  const {\n    gameState,\n    tick,\n    doAction,\n    deltas,\n    loadSaveProvider\n  } = useScattershellEngine(messaging)\n\n  const { world, player } = gameState\n  // the island that is currently being viewed.\n  const [currentIsland, setCurrentIsland] = useState(StartingLocation)\n\n  // Set the game loop interval\n  useInterval(tick, intervalDuration)\n\n  const islands = islandsDetails(gameState.islands)\n  return (\n    <Fabric>\n      <main className={'game'}>\n        <aside className={'left'}>\n          <h2 className={'title title-subtitle'}>sailsongs of</h2>\n          <h1 className={'title title-title'} title={VERSION}>\n            scattershell\n          </h1>\n          <div className={'fixed'}>\n            <LoadSavePanel game={gameState} loadSaveProvider={loadSaveProvider} />\n\n            <GameMeters deltas={deltas} player={player} />\n            <ProgressStatus game={gameState} />\n            <Messages messaging={messaging} />\n            <Calendar world={world} />\n          </div>\n          <section style={{ marginTop: '8em' }}>\n            <ScattershellMap\n              islands={islands}\n              currentIsland={currentIsland}\n              setCurrentIsland={setCurrentIsland}\n            />\n          </section>\n        </aside>\n\n        <section className={'right'}>\n          <Island\n            game={gameState}\n            player={player}\n            island={islands[currentIsland]}\n            islands={islands}\n            doAction={doAction}\n          />\n        </section>\n      </main>\n    </Fabric>\n  )\n}\n\nexport default App\n\n/* scatterings\n- slower/faster travel (harness wind)\n- slower/faster harvesting of {materials|food}\n- higher/lower population cost\n- intensive agriculture / intensive foraging / intensive fishing\n- trade routes / isolation\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}